{"ast":null,"code":"import { ColorPalette, Emphasis } from './components.js';\nimport { g as getRootClassName, a as _objectWithoutProperties, b as _extends, d as classnames, h as handleBasicClasses } from './getRootClassName.js';\nimport React, { forwardRef, useRef } from 'react';\nimport { d as mdiClose } from './mdi.js';\nimport { D as DOCUMENT } from './constants.js';\nimport { u as useFocus } from './Popover2.js';\nimport { m as mergeRefs } from './mergeRefs.js';\nimport { I as IconButton } from './IconButton.js';\nimport { u as useFocusTrap } from './useFocusTrap.js';\nimport { createPortal } from 'react-dom';\nimport { u as useCallbackOnEscape, C as ClickAwayProvider } from './ClickAwayProvider.js';\nimport { u as useDelayedVisibility } from './useDelayedVisibility.js';\nimport { u as useDisableBodyScroll } from './useDisableBodyScroll.js';\nvar LIGHTBOX_TRANSITION_DURATION = 400;\n/**\n * Defines the props of the component.\n */\n\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME = 'Lightbox';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME = getRootClassName(COMPONENT_NAME);\n/**\n * Lightbox component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar Lightbox = forwardRef(function (props, ref) {\n  var _childrenRef$current;\n\n  var ariaLabel = props.ariaLabel,\n      children = props.children,\n      className = props.className,\n      closeButtonProps = props.closeButtonProps,\n      isOpen = props.isOpen,\n      onClose = props.onClose,\n      parentElement = props.parentElement,\n      preventAutoClose = props.preventAutoClose,\n      theme = props.theme,\n      zIndex = props.zIndex,\n      forwardedProps = _objectWithoutProperties(props, [\"ariaLabel\", \"children\", \"className\", \"closeButtonProps\", \"isOpen\", \"onClose\", \"parentElement\", \"preventAutoClose\", \"theme\", \"zIndex\"]);\n\n  if (!DOCUMENT) {\n    // Can't render in SSR.\n    return null;\n  } // eslint-disable-next-line react-hooks/rules-of-hooks\n\n\n  var childrenRef = useRef(null); // eslint-disable-next-line react-hooks/rules-of-hooks\n\n  var wrapperRef = useRef(null); // eslint-disable-next-line react-hooks/rules-of-hooks\n\n  useDisableBodyScroll(isOpen && wrapperRef.current); // eslint-disable-next-line react-hooks/rules-of-hooks\n\n  var isVisible = useDelayedVisibility(!!isOpen, LIGHTBOX_TRANSITION_DURATION); // Handle focus trap.\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n\n  useFocusTrap(wrapperRef.current, (_childrenRef$current = childrenRef.current) === null || _childrenRef$current === void 0 ? void 0 : _childrenRef$current.firstChild); // Focus the parent element on close.\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n\n  useFocus(parentElement === null || parentElement === void 0 ? void 0 : parentElement.current, !isOpen); // Close lightbox on escape key pressed.\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n\n  useCallbackOnEscape(onClose); // eslint-disable-next-line react-hooks/rules-of-hooks\n\n  var clickAwayRefs = useRef([wrapperRef]);\n  if (!isOpen && !isVisible) return null;\n  return createPortal(\n  /* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions */\n  React.createElement(\"div\", _extends({\n    ref: mergeRefs(ref, wrapperRef)\n  }, forwardedProps, {\n    \"aria-label\": ariaLabel,\n    \"aria-modal\": \"true\",\n    className: classnames(className, handleBasicClasses({\n      prefix: CLASSNAME,\n      isHidden: !isOpen,\n      isShown: isOpen || isVisible,\n      theme: theme\n    })),\n    style: {\n      zIndex: zIndex\n    }\n  }), closeButtonProps && React.createElement(IconButton, _extends({}, closeButtonProps, {\n    className: \"\".concat(CLASSNAME, \"__close\"),\n    color: ColorPalette.light,\n    emphasis: Emphasis.low,\n    icon: mdiClose,\n    theme: theme,\n    type: \"button\",\n    onClick: onClose\n  })), React.createElement(ClickAwayProvider, {\n    callback: !preventAutoClose && onClose,\n    refs: clickAwayRefs\n  }, React.createElement(\"div\", {\n    ref: childrenRef,\n    className: \"\".concat(CLASSNAME, \"__wrapper\"),\n    role: \"presentation\"\n  }, children))), document.body);\n});\nLightbox.displayName = COMPONENT_NAME;\nLightbox.className = CLASSNAME;\nexport { Lightbox as L };","map":{"version":3,"sources":["../../../src/components/lightbox/Lightbox.tsx"],"names":["LIGHTBOX_TRANSITION_DURATION","COMPONENT_NAME","CLASSNAME","getRootClassName","Lightbox","forwardRef","ariaLabel","children","className","closeButtonProps","isOpen","onClose","parentElement","preventAutoClose","theme","zIndex","forwardedProps","props","childrenRef","useRef","wrapperRef","useDisableBodyScroll","isVisible","useDelayedVisibility","useFocusTrap","useFocus","useCallbackOnEscape","clickAwayRefs","createPortal","mergeRefs","classNames","handleBasicClasses","prefix","isHidden","isShown","ColorPalette","Emphasis","document"],"mappings":"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","sourcesContent":["import React, { forwardRef, RefObject, useRef } from 'react';\n\nimport classNames from 'classnames';\nimport { createPortal } from 'react-dom';\n\nimport { mdiClose } from '@lumx/icons';\nimport { ColorPalette, Emphasis, IconButton, IconButtonProps, Theme } from '@lumx/react';\nimport { DOCUMENT } from '@lumx/react/constants';\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\n\nimport { useFocusTrap } from '@lumx/react/hooks/useFocusTrap';\nimport { useDelayedVisibility } from '@lumx/react/hooks/useDelayedVisibility';\nimport { useFocus } from '@lumx/react/hooks/useFocus';\nimport { useDisableBodyScroll } from '@lumx/react/hooks/useDisableBodyScroll';\nimport { ClickAwayProvider } from '@lumx/react/utils/ClickAwayProvider';\nimport { mergeRefs } from '@lumx/react/utils/mergeRefs';\nimport { useCallbackOnEscape } from '@lumx/react/hooks/useCallbackOnEscape';\n\nconst LIGHTBOX_TRANSITION_DURATION = 400;\n\n/**\n * Defines the props of the component.\n */\nexport interface LightboxProps extends GenericProps {\n    /** Props to pass to the close button (minus those already set by the Lightbox props). */\n    closeButtonProps?: Pick<IconButtonProps, 'label'> &\n        Omit<IconButtonProps, 'label' | 'onClick' | 'icon' | 'emphasis' | 'color'>;\n    /** Whether the component is open or not. */\n    isOpen?: boolean;\n    /** Reference to the element that triggered modal opening to set focus on. */\n    parentElement: RefObject<any>;\n    /** Whether to keep the dialog open on clickaway or escape press. */\n    preventAutoClose?: boolean;\n    /** Theme adapting the component to light or dark background. */\n    theme?: Theme;\n    /** Z-axis position. */\n    zIndex?: number;\n    /** On close callback. */\n    onClose?(): void;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'Lightbox';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * Lightbox component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const Lightbox: Comp<LightboxProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const {\n        ariaLabel,\n        children,\n        className,\n        closeButtonProps,\n        isOpen,\n        onClose,\n        parentElement,\n        preventAutoClose,\n        theme,\n        zIndex,\n        ...forwardedProps\n    } = props;\n    if (!DOCUMENT) {\n        // Can't render in SSR.\n        return null;\n    }\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const childrenRef = useRef<any>(null);\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const wrapperRef = useRef<HTMLDivElement>(null);\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useDisableBodyScroll(isOpen && wrapperRef.current);\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const isVisible = useDelayedVisibility(!!isOpen, LIGHTBOX_TRANSITION_DURATION);\n\n    // Handle focus trap.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useFocusTrap(wrapperRef.current, childrenRef.current?.firstChild);\n\n    // Focus the parent element on close.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useFocus(parentElement?.current, !isOpen);\n\n    // Close lightbox on escape key pressed.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useCallbackOnEscape(onClose);\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const clickAwayRefs = useRef([wrapperRef]);\n\n    if (!isOpen && !isVisible) return null;\n\n    return createPortal(\n        /* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions */\n        <div\n            ref={mergeRefs(ref, wrapperRef)}\n            {...forwardedProps}\n            aria-label={ariaLabel}\n            aria-modal=\"true\"\n            className={classNames(\n                className,\n                handleBasicClasses({\n                    prefix: CLASSNAME,\n                    isHidden: !isOpen,\n                    isShown: isOpen || isVisible,\n                    theme,\n                }),\n            )}\n            style={{ zIndex }}\n        >\n            {closeButtonProps && (\n                <IconButton\n                    {...closeButtonProps}\n                    className={`${CLASSNAME}__close`}\n                    color={ColorPalette.light}\n                    emphasis={Emphasis.low}\n                    icon={mdiClose}\n                    theme={theme}\n                    type=\"button\"\n                    onClick={onClose}\n                />\n            )}\n            <ClickAwayProvider callback={!preventAutoClose && onClose} refs={clickAwayRefs}>\n                <div ref={childrenRef} className={`${CLASSNAME}__wrapper`} role=\"presentation\">\n                    {children}\n                </div>\n            </ClickAwayProvider>\n        </div>,\n        document.body,\n    );\n});\nLightbox.displayName = COMPONENT_NAME;\nLightbox.className = CLASSNAME;\n"]},"metadata":{},"sourceType":"module"}