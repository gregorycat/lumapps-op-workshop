{"ast":null,"code":"import { Theme, ColorPalette, Size } from './components.js';\nimport { g as getRootClassName, a as _objectWithoutProperties, b as _extends, d as classnames, h as handleBasicClasses } from './getRootClassName.js';\nimport React, { forwardRef } from 'react';\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME = 'Icon';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME = getRootClassName(COMPONENT_NAME);\n/**\n * Component default props.\n */\n\nvar DEFAULT_PROPS = {};\n/**\n * Icon component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar Icon = forwardRef(function (props, ref) {\n  var className = props.className,\n      color = props.color,\n      colorVariant = props.colorVariant,\n      hasShape = props.hasShape,\n      icon = props.icon,\n      size = props.size,\n      theme = props.theme,\n      forwardedProps = _objectWithoutProperties(props, [\"className\", \"color\", \"colorVariant\", \"hasShape\", \"icon\", \"size\", \"theme\"]);\n\n  var iconColor;\n\n  if (color) {\n    iconColor = color;\n  } else if (theme) {\n    iconColor = theme === Theme.light ? ColorPalette.dark : ColorPalette.light;\n  } else if (hasShape) {\n    iconColor = ColorPalette.dark;\n  }\n\n  var iconSize;\n\n  if (size) {\n    if (hasShape) {\n      if (size === Size.xxs || size === Size.xs) {\n        iconSize = Size.s;\n      } else if (size === Size.xxl) {\n        iconSize = Size.xl;\n      } else {\n        iconSize = size;\n      }\n    } else {\n      iconSize = size;\n    }\n  } else if (hasShape) {\n    iconSize = Size.m;\n  }\n\n  return React.createElement(\"i\", _extends({\n    ref: ref\n  }, forwardedProps, {\n    className: classnames(className, handleBasicClasses({\n      color: iconColor,\n      colorVariant: colorVariant,\n      hasShape: hasShape,\n      prefix: CLASSNAME,\n      size: iconSize\n    }), !hasShape && \"\".concat(CLASSNAME, \"--no-shape\"), \"\".concat(CLASSNAME, \"--path\"))\n  }), React.createElement(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"1em\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    style: {\n      verticalAlign: '-0.125em'\n    },\n    viewBox: \"0 0 24 24\",\n    width: \"1em\"\n  }, React.createElement(\"path\", {\n    d: icon,\n    fill: \"currentColor\"\n  })));\n});\nIcon.displayName = COMPONENT_NAME;\nIcon.className = CLASSNAME;\nIcon.defaultProps = DEFAULT_PROPS;\nexport { Icon as I };","map":{"version":3,"sources":["../../../src/components/icon/Icon.tsx"],"names":["COMPONENT_NAME","CLASSNAME","getRootClassName","DEFAULT_PROPS","Icon","forwardRef","className","color","colorVariant","hasShape","icon","size","theme","forwardedProps","props","iconColor","Theme","ColorPalette","Size","iconSize","ref","classNames","handleBasicClasses","prefix","verticalAlign"],"mappings":"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","sourcesContent":["import React, { forwardRef } from 'react';\n\nimport classNames from 'classnames';\n\nimport { Color, ColorPalette, ColorVariant, Size, Theme } from '@lumx/react';\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\n\nexport type IconSizes = Extract<Size, 'xxs' | 'xs' | 's' | 'm' | 'l' | 'xl' | 'xxl'>;\n\n/**\n * Defines the props of the component.\n */\nexport interface IconProps extends GenericProps {\n    /** Color variant. */\n    color?: Color;\n    /** Lightened or darkened variant of the selected icon color. */\n    colorVariant?: ColorVariant;\n    /** Whether the icon has a shape. */\n    hasShape?: boolean;\n    /**\n     * Icon (SVG path).draw code (`d` property of the `<path>` SVG element).\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths}\n     */\n    icon: string;\n    /** Size variant. */\n    size?: IconSizes;\n    /** Theme adapting the component to light or dark background. */\n    theme?: Theme;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'Icon';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<IconProps> = {};\n\n/**\n * Icon component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const Icon: Comp<IconProps, HTMLElement> = forwardRef((props, ref) => {\n    const { className, color, colorVariant, hasShape, icon, size, theme, ...forwardedProps } = props;\n    let iconColor;\n    if (color) {\n        iconColor = color;\n    } else if (theme) {\n        iconColor = theme === Theme.light ? ColorPalette.dark : ColorPalette.light;\n    } else if (hasShape) {\n        iconColor = ColorPalette.dark;\n    }\n\n    let iconSize;\n    if (size) {\n        if (hasShape) {\n            if (size === Size.xxs || size === Size.xs) {\n                iconSize = Size.s;\n            } else if (size === Size.xxl) {\n                iconSize = Size.xl;\n            } else {\n                iconSize = size;\n            }\n        } else {\n            iconSize = size;\n        }\n    } else if (hasShape) {\n        iconSize = Size.m;\n    }\n\n    return (\n        <i\n            ref={ref}\n            {...forwardedProps}\n            className={classNames(\n                className,\n                handleBasicClasses({\n                    color: iconColor,\n                    colorVariant,\n                    hasShape,\n                    prefix: CLASSNAME,\n                    size: iconSize,\n                }),\n                !hasShape && `${CLASSNAME}--no-shape`,\n                `${CLASSNAME}--path`,\n            )}\n        >\n            <svg\n                aria-hidden=\"true\"\n                height=\"1em\"\n                preserveAspectRatio=\"xMidYMid meet\"\n                style={{ verticalAlign: '-0.125em' }}\n                viewBox=\"0 0 24 24\"\n                width=\"1em\"\n            >\n                <path d={icon} fill=\"currentColor\" />\n            </svg>\n        </i>\n    );\n});\nIcon.displayName = COMPONENT_NAME;\nIcon.className = CLASSNAME;\nIcon.defaultProps = DEFAULT_PROPS;\n"]},"metadata":{},"sourceType":"module"}