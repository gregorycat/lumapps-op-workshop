{"ast":null,"code":"import { Theme, Size, Emphasis } from './components.js';\nimport { g as getRootClassName, a as _objectWithoutProperties, b as _extends, d as classnames, h as handleBasicClasses, c as _objectSpread2, o as onEnterPressed } from './getRootClassName.js';\nimport React, { forwardRef, Children } from 'react';\nimport { i as mdiChevronUp, j as mdiChevronDown } from './mdi.js';\nimport isEmpty from 'lodash/isEmpty';\nimport { i as isComponent } from './type.js';\nimport { r as renderLink } from './renderLink.js';\nimport { I as IconButton } from './IconButton.js';\nimport { I as Icon } from './Icon2.js';\n/**\n * Defines the props of the component.\n */\n\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME = 'SideNavigation';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME = getRootClassName(COMPONENT_NAME);\n/**\n * SideNavigation component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar SideNavigation = forwardRef(function (props, ref) {\n  var children = props.children,\n      className = props.className,\n      theme = props.theme,\n      forwardedProps = _objectWithoutProperties(props, [\"children\", \"className\", \"theme\"]);\n\n  var content = Children.toArray(children).filter(isComponent(SideNavigationItem));\n  return React.createElement(\"ul\", _extends({\n    ref: ref\n  }, forwardedProps, {\n    className: classnames(className, theme === Theme.dark && 'lumx-color-font-light-N', handleBasicClasses({\n      prefix: CLASSNAME\n    }))\n  }), content);\n});\nSideNavigation.displayName = COMPONENT_NAME;\nSideNavigation.className = CLASSNAME;\n/**\n * Defines the props of the component.\n */\n\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME$1 = 'SideNavigationItem';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME$1 = getRootClassName(COMPONENT_NAME$1);\n/**\n * Component default props.\n */\n\nvar DEFAULT_PROPS = {\n  emphasis: Emphasis.high\n};\n/**\n * SideNavigationItem component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar SideNavigationItem = forwardRef(function (props, ref) {\n  var children = props.children,\n      className = props.className,\n      emphasis = props.emphasis,\n      icon = props.icon,\n      isOpen = props.isOpen,\n      isSelected = props.isSelected,\n      label = props.label,\n      linkAs = props.linkAs,\n      linkProps = props.linkProps,\n      onActionClick = props.onActionClick,\n      onClick = props.onClick,\n      toggleButtonProps = props.toggleButtonProps,\n      forwardedProps = _objectWithoutProperties(props, [\"children\", \"className\", \"emphasis\", \"icon\", \"isOpen\", \"isSelected\", \"label\", \"linkAs\", \"linkProps\", \"onActionClick\", \"onClick\", \"toggleButtonProps\"]);\n\n  var content = children && Children.toArray(children).filter(isComponent(SideNavigationItem));\n  var hasContent = !isEmpty(content);\n  var shouldSplitActions = Boolean(onActionClick);\n  return React.createElement(\"li\", _extends({\n    ref: ref\n  }, forwardedProps, {\n    className: classnames(className, handleBasicClasses({\n      emphasis: emphasis,\n      isOpen: isOpen,\n      isSelected: isSelected,\n      prefix: CLASSNAME$1\n    }))\n  }), shouldSplitActions ? React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME$1, \"__wrapper\")\n  }, renderLink(_objectSpread2({\n    linkAs: linkAs\n  }, linkProps, {\n    className: \"\".concat(CLASSNAME$1, \"__link\"),\n    onClick: onClick,\n    tabIndex: 0\n  }), icon && React.createElement(Icon, {\n    className: \"\".concat(CLASSNAME$1, \"__icon\"),\n    icon: icon,\n    size: Size.xs\n  }), React.createElement(\"span\", null, label)), React.createElement(IconButton, _extends({}, toggleButtonProps, {\n    className: \"\".concat(CLASSNAME$1, \"__toggle\"),\n    icon: isOpen ? mdiChevronUp : mdiChevronDown,\n    size: Size.m,\n    emphasis: Emphasis.low,\n    onClick: onActionClick\n  }))) : renderLink(_objectSpread2({\n    linkAs: linkAs\n  }, linkProps, {\n    className: \"\".concat(CLASSNAME$1, \"__link\"),\n    tabIndex: 0,\n    onClick: onClick,\n    onKeyDown: onClick ? onEnterPressed(onClick) : undefined\n  }), icon && React.createElement(Icon, {\n    className: \"\".concat(CLASSNAME$1, \"__icon\"),\n    icon: icon,\n    size: Size.xs\n  }), React.createElement(\"span\", null, label), hasContent && React.createElement(Icon, {\n    className: \"\".concat(CLASSNAME$1, \"__chevron\"),\n    icon: isOpen ? mdiChevronUp : mdiChevronDown,\n    size: Size.xs\n  })), hasContent && isOpen && React.createElement(\"ul\", {\n    className: \"\".concat(CLASSNAME$1, \"__children\")\n  }, content));\n});\nSideNavigationItem.displayName = COMPONENT_NAME$1;\nSideNavigationItem.className = CLASSNAME$1;\nSideNavigationItem.defaultProps = DEFAULT_PROPS;\nexport { SideNavigation as S, SideNavigationItem as a };","map":{"version":3,"sources":["../../../src/components/side-navigation/SideNavigation.tsx","../../../src/components/side-navigation/SideNavigationItem.tsx"],"names":["COMPONENT_NAME","CLASSNAME","getRootClassName","SideNavigation","forwardRef","children","className","theme","forwardedProps","props","content","Children","isComponent","ref","classNames","Theme","handleBasicClasses","prefix","DEFAULT_PROPS","emphasis","Emphasis","high","SideNavigationItem","icon","isOpen","isSelected","label","linkAs","linkProps","onActionClick","onClick","toggleButtonProps","hasContent","isEmpty","shouldSplitActions","Boolean","renderLink","tabIndex","Size","xs","onKeyDown","onEnterPressed","undefined"],"mappings":"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","sourcesContent":["import React, { Children, forwardRef, ReactNode } from 'react';\n\nimport classNames from 'classnames';\n\nimport { SideNavigationItem, Theme } from '@lumx/react';\n\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses, isComponent } from '@lumx/react/utils';\n\n/**\n * Defines the props of the component.\n */\nexport interface SideNavigationProps extends GenericProps {\n    /** SideNavigationItem elements. */\n    children: ReactNode;\n    /** Theme adapting the component to light or dark background. */\n    theme?: Theme;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'SideNavigation';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * SideNavigation component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const SideNavigation: Comp<SideNavigationProps, HTMLUListElement> = forwardRef((props, ref) => {\n    const { children, className, theme, ...forwardedProps } = props;\n    const content = Children.toArray(children).filter(isComponent(SideNavigationItem));\n\n    return (\n        <ul\n            ref={ref}\n            {...forwardedProps}\n            className={classNames(\n                className,\n                theme === Theme.dark && 'lumx-color-font-light-N',\n                handleBasicClasses({ prefix: CLASSNAME }),\n            )}\n        >\n            {content}\n        </ul>\n    );\n});\nSideNavigation.displayName = COMPONENT_NAME;\nSideNavigation.className = CLASSNAME;\n","import React, { Children, forwardRef, ReactNode } from 'react';\n\nimport classNames from 'classnames';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { mdiChevronDown, mdiChevronUp } from '@lumx/icons';\n\nimport { Emphasis, Icon, Size, IconButton, IconButtonProps } from '@lumx/react';\n\nimport {\n    Callback,\n    Comp,\n    GenericProps,\n    getRootClassName,\n    handleBasicClasses,\n    isComponent,\n    onEnterPressed,\n} from '@lumx/react/utils';\nimport { renderLink } from '@lumx/react/utils/renderLink';\n\n/**\n * Defines the props of the component.\n */\nexport interface SideNavigationItemProps extends GenericProps {\n    /** SideNavigationItem elements. */\n    children?: ReactNode;\n    /** Emphasis variant. */\n    emphasis?: Emphasis;\n    /** Label content. */\n    label: string | ReactNode;\n    /** Icon (SVG path). */\n    icon?: string;\n    /** Whether the component is open or not. */\n    isOpen?: boolean;\n    /** Whether the component is selected or not. */\n    isSelected?: boolean;\n    /** Custom react component for the link (can be used to inject react router Link). */\n    linkAs?: 'a' | any;\n    /** Props to pass to the link (minus those already set by the SideNavigationItem props). */\n    linkProps?: React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;\n    /** Props to pass to the toggle button (minus those already set by the SideNavigationItem props). */\n    toggleButtonProps: Pick<IconButtonProps, 'label'> &\n        Omit<IconButtonProps, 'label' | 'onClick' | 'icon' | 'emphasis' | 'color' | 'size'>;\n    /** On action button click callback. */\n    onActionClick?(evt: React.MouseEvent): void;\n    /** On click callback. */\n    onClick?(evt: React.MouseEvent): void;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'SideNavigationItem';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<SideNavigationItemProps> = {\n    emphasis: Emphasis.high,\n};\n\n/**\n * SideNavigationItem component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const SideNavigationItem: Comp<SideNavigationItemProps, HTMLLIElement> = forwardRef((props, ref) => {\n    const {\n        children,\n        className,\n        emphasis,\n        icon,\n        isOpen,\n        isSelected,\n        label,\n        linkAs,\n        linkProps,\n        onActionClick,\n        onClick,\n        toggleButtonProps,\n        ...forwardedProps\n    } = props;\n\n    const content = children && Children.toArray(children).filter(isComponent(SideNavigationItem));\n    const hasContent = !isEmpty(content);\n    const shouldSplitActions = Boolean(onActionClick);\n\n    return (\n        <li\n            ref={ref}\n            {...forwardedProps}\n            className={classNames(\n                className,\n                handleBasicClasses({\n                    emphasis,\n                    isOpen,\n                    isSelected,\n                    prefix: CLASSNAME,\n                }),\n            )}\n        >\n            {shouldSplitActions ? (\n                <div className={`${CLASSNAME}__wrapper`}>\n                    {renderLink(\n                        {\n                            linkAs,\n                            ...linkProps,\n                            className: `${CLASSNAME}__link`,\n                            onClick,\n                            tabIndex: 0,\n                        },\n                        icon && <Icon className={`${CLASSNAME}__icon`} icon={icon} size={Size.xs} />,\n                        <span>{label}</span>,\n                    )}\n\n                    <IconButton\n                        {...toggleButtonProps}\n                        className={`${CLASSNAME}__toggle`}\n                        icon={isOpen ? mdiChevronUp : mdiChevronDown}\n                        size={Size.m}\n                        emphasis={Emphasis.low}\n                        onClick={onActionClick}\n                    />\n                </div>\n            ) : (\n                renderLink(\n                    {\n                        linkAs,\n                        ...linkProps,\n                        className: `${CLASSNAME}__link`,\n                        tabIndex: 0,\n                        onClick,\n                        onKeyDown: onClick ? onEnterPressed(onClick as Callback) : undefined,\n                    },\n                    icon && <Icon className={`${CLASSNAME}__icon`} icon={icon} size={Size.xs} />,\n                    <span>{label}</span>,\n                    hasContent && (\n                        <Icon\n                            className={`${CLASSNAME}__chevron`}\n                            icon={isOpen ? mdiChevronUp : mdiChevronDown}\n                            size={Size.xs}\n                        />\n                    ),\n                )\n            )}\n\n            {hasContent && isOpen && <ul className={`${CLASSNAME}__children`}>{content}</ul>}\n        </li>\n    );\n});\nSideNavigationItem.displayName = COMPONENT_NAME;\nSideNavigationItem.className = CLASSNAME;\nSideNavigationItem.defaultProps = DEFAULT_PROPS;\n"]},"metadata":{},"sourceType":"module"}