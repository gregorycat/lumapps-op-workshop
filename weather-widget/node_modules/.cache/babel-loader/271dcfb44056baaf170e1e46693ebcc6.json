{"ast":null,"code":"import { Theme, Size } from './components.js';\nimport { g as getRootClassName, a as _objectWithoutProperties, b as _extends, d as classnames, h as handleBasicClasses, _ as _defineProperty, o as onEnterPressed } from './getRootClassName.js';\nimport React, { forwardRef, useCallback } from 'react';\nimport { p as mdiArrowUp, q as mdiArrowDown } from './mdi.js';\nimport isFunction from 'lodash/isFunction';\nimport { I as Icon } from './Icon2.js';\n/**\n * Defines the props of the component.\n */\n\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME = 'Table';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME = getRootClassName(COMPONENT_NAME);\n/**\n * Component default props.\n */\n\nvar DEFAULT_PROPS = {\n  theme: Theme.light\n};\n/**\n * Table component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar Table = forwardRef(function (props, ref) {\n  var children = props.children,\n      className = props.className,\n      hasBefore = props.hasBefore,\n      hasDividers = props.hasDividers,\n      theme = props.theme,\n      forwardedProps = _objectWithoutProperties(props, [\"children\", \"className\", \"hasBefore\", \"hasDividers\", \"theme\"]);\n\n  return React.createElement(\"table\", _extends({\n    ref: ref\n  }, forwardedProps, {\n    className: classnames(className, handleBasicClasses({\n      prefix: CLASSNAME,\n      hasBefore: hasBefore,\n      hasDividers: hasDividers,\n      theme: theme\n    }))\n  }), children);\n});\nTable.displayName = COMPONENT_NAME;\nTable.className = CLASSNAME;\nTable.defaultProps = DEFAULT_PROPS;\n/**\n * Defines the props of the component.\n */\n\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME$1 = 'TableBody';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME$1 = getRootClassName(COMPONENT_NAME$1, true);\n/**\n * TableBody component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar TableBody = forwardRef(function (props, ref) {\n  var children = props.children,\n      className = props.className,\n      forwardedProps = _objectWithoutProperties(props, [\"children\", \"className\"]);\n\n  return React.createElement(\"tbody\", _extends({\n    ref: ref\n  }, forwardedProps, {\n    className: classnames(className, handleBasicClasses({\n      prefix: CLASSNAME$1\n    }))\n  }), children);\n});\nTableBody.displayName = COMPONENT_NAME$1;\nTableBody.className = CLASSNAME$1;\n/**\n * Table head cell sort order.\n */\n\nvar ThOrder = {\n  asc: 'asc',\n  desc: 'desc'\n};\n/**\n * Table cell variants.\n */\n\nvar TableCellVariant = {\n  body: 'body',\n  head: 'head'\n};\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME$2 = 'TableCell';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME$2 = getRootClassName(COMPONENT_NAME$2, true);\n/**\n * Component default props.\n */\n\nvar DEFAULT_PROPS$1 = {\n  variant: TableCellVariant.body\n};\n/**\n * TableCell component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar TableCell = forwardRef(function (props, ref) {\n  var children = props.children,\n      className = props.className,\n      icon = props.icon,\n      isSortable = props.isSortable,\n      onHeaderClick = props.onHeaderClick,\n      sortOrder = props.sortOrder,\n      variant = props.variant,\n      forwardedProps = _objectWithoutProperties(props, [\"children\", \"className\", \"icon\", \"isSortable\", \"onHeaderClick\", \"sortOrder\", \"variant\"]);\n  /**\n   * Handle click on the ordered thead.\n   */\n\n\n  var handleOnHeaderClick = useCallback(function () {\n    if (isFunction(onHeaderClick)) {\n      onHeaderClick();\n    }\n  }, [onHeaderClick]);\n  return React.createElement(React.Fragment, null, variant === TableCellVariant.head && React.createElement(\"th\", _extends({\n    ref: ref\n  }, forwardedProps, {\n    className: classnames(handleBasicClasses({\n      prefix: CLASSNAME$2,\n      isSortable: isSortable\n    }), className, \"\".concat(CLASSNAME$2, \"--head\"), _defineProperty({}, \"\".concat(CLASSNAME$2, \"--is-sorted\"), isSortable && sortOrder)),\n    tabIndex: isSortable && isFunction(onHeaderClick) ? 0 : -1,\n    onClick: handleOnHeaderClick,\n    onKeyDown: onEnterPressed(handleOnHeaderClick)\n  }), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME$2, \"-wrapper\")\n  }, icon && !isSortable && React.createElement(Icon, {\n    className: \"\".concat(CLASSNAME$2, \"-icon\"),\n    icon: icon,\n    size: Size.xxs\n  }), isSortable && sortOrder === ThOrder.asc && React.createElement(Icon, {\n    className: \"\".concat(CLASSNAME$2, \"-icon\"),\n    icon: mdiArrowUp,\n    size: Size.xxs\n  }), isSortable && sortOrder === ThOrder.desc && React.createElement(Icon, {\n    className: \"\".concat(CLASSNAME$2, \"-icon\"),\n    icon: mdiArrowDown,\n    size: Size.xxs\n  }), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME$2, \"-content\")\n  }, children))), variant === TableCellVariant.body && React.createElement(\"td\", _extends({}, forwardedProps, {\n    className: classnames(className, handleBasicClasses({\n      prefix: CLASSNAME$2\n    }), \"\".concat(CLASSNAME$2, \"--body\"))\n  }), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME$2, \"-content\")\n  }, children)));\n});\nTableCell.displayName = COMPONENT_NAME$2;\nTableCell.className = CLASSNAME$2;\nTableCell.defaultProps = DEFAULT_PROPS$1;\n/**\n * Defines the props of the component.\n */\n\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME$3 = 'TableHeader';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME$3 = getRootClassName(COMPONENT_NAME$3, true);\n/**\n * Component default props.\n */\n\nvar DEFAULT_PROPS$2 = {};\n/**\n * TableHeader component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar TableHeader = forwardRef(function (props, ref) {\n  var children = props.children,\n      className = props.className,\n      forwardedProps = _objectWithoutProperties(props, [\"children\", \"className\"]);\n\n  return React.createElement(\"thead\", _extends({\n    ref: ref\n  }, forwardedProps, {\n    className: classnames(className, handleBasicClasses({\n      prefix: CLASSNAME$3\n    }))\n  }), children);\n});\nTableHeader.displayName = COMPONENT_NAME$3;\nTableHeader.className = CLASSNAME$3;\nTableHeader.defaultProps = DEFAULT_PROPS$2;\n/**\n * Defines the props of the component.\n */\n\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME$4 = 'TableRow';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME$4 = getRootClassName(COMPONENT_NAME$4, true);\n/**\n * Component default props.\n */\n\nvar DEFAULT_PROPS$3 = {};\n/**\n * TableRow component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar TableRow = forwardRef(function (props, ref) {\n  var children = props.children,\n      className = props.className,\n      disabled = props.disabled,\n      isClickable = props.isClickable,\n      _props$isDisabled = props.isDisabled,\n      isDisabled = _props$isDisabled === void 0 ? disabled : _props$isDisabled,\n      isSelected = props.isSelected,\n      forwardedProps = _objectWithoutProperties(props, [\"children\", \"className\", \"disabled\", \"isClickable\", \"isDisabled\", \"isSelected\"]);\n\n  return React.createElement(\"tr\", _extends({\n    ref: ref,\n    tabIndex: isClickable && !isDisabled ? 0 : -1\n  }, forwardedProps, {\n    className: classnames(className, handleBasicClasses({\n      isClickable: isClickable && !isDisabled,\n      isDisabled: isDisabled,\n      isSelected: isSelected && !isDisabled,\n      prefix: CLASSNAME$4\n    })),\n    \"aria-disabled\": isDisabled\n  }), children);\n});\nTableRow.displayName = COMPONENT_NAME$4;\nTableRow.className = CLASSNAME$4;\nTableRow.defaultProps = DEFAULT_PROPS$3;\nexport { Table as T, TableBody as a, ThOrder as b, TableCellVariant as c, TableCell as d, TableHeader as e, TableRow as f };","map":{"version":3,"sources":["../../../src/components/table/Table.tsx","../../../src/components/table/TableBody.tsx","../../../src/components/table/TableCell.tsx","../../../src/components/table/TableHeader.tsx","../../../src/components/table/TableRow.tsx"],"names":["COMPONENT_NAME","CLASSNAME","getRootClassName","DEFAULT_PROPS","theme","Theme","light","Table","forwardRef","children","className","hasBefore","hasDividers","forwardedProps","props","ref","classNames","handleBasicClasses","prefix","TableBody","ThOrder","asc","desc","TableCellVariant","body","head","variant","TableCell","icon","isSortable","onHeaderClick","sortOrder","handleOnHeaderClick","useCallback","isFunction","onEnterPressed","Size","xxs","TableHeader","TableRow","disabled","isClickable","isDisabled","isSelected"],"mappings":"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","sourcesContent":["import React, { forwardRef } from 'react';\n\nimport classNames from 'classnames';\n\nimport { Theme } from '@lumx/react';\n\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\n\n/**\n * Defines the props of the component.\n */\nexport interface TableProps extends GenericProps {\n    /** Whether the table has checkbox or thumbnail on first cell or not. */\n    hasBefore?: boolean;\n    /** Whether the table has dividers or not. */\n    hasDividers?: boolean;\n    /** Theme adapting the component to light or dark background. */\n    theme?: Theme;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'Table';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<TableProps> = {\n    theme: Theme.light,\n};\n\n/**\n * Table component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const Table: Comp<TableProps, HTMLTableElement> = forwardRef((props, ref) => {\n    const { children, className, hasBefore, hasDividers, theme, ...forwardedProps } = props;\n\n    return (\n        <table\n            ref={ref}\n            {...forwardedProps}\n            className={classNames(className, handleBasicClasses({ prefix: CLASSNAME, hasBefore, hasDividers, theme }))}\n        >\n            {children}\n        </table>\n    );\n});\nTable.displayName = COMPONENT_NAME;\nTable.className = CLASSNAME;\nTable.defaultProps = DEFAULT_PROPS;\n","import React, { forwardRef } from 'react';\n\nimport classNames from 'classnames';\n\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\n\n/**\n * Defines the props of the component.\n */\nexport type TableBodyProps = GenericProps;\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'TableBody';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME, true);\n\n/**\n * TableBody component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const TableBody: Comp<TableBodyProps, HTMLTableSectionElement> = forwardRef((props, ref) => {\n    const { children, className, ...forwardedProps } = props;\n\n    return (\n        <tbody\n            ref={ref}\n            {...forwardedProps}\n            className={classNames(className, handleBasicClasses({ prefix: CLASSNAME }))}\n        >\n            {children}\n        </tbody>\n    );\n});\nTableBody.displayName = COMPONENT_NAME;\nTableBody.className = CLASSNAME;\n","import React, { forwardRef, useCallback } from 'react';\n\nimport classNames from 'classnames';\n\nimport { Icon, Size } from '@lumx/react';\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses, onEnterPressed, ValueOf } from '@lumx/react/utils';\n\nimport { mdiArrowDown, mdiArrowUp } from '@lumx/icons';\n\nimport isFunction from 'lodash/isFunction';\n\n/**\n * Table head cell sort order.\n */\nexport const ThOrder = { asc: 'asc', desc: 'desc' } as const;\nexport type ThOrder = ValueOf<typeof ThOrder>;\n\n/**\n * Table cell variants.\n */\nexport const TableCellVariant = { body: 'body', head: 'head' } as const;\nexport type TableCellVariant = ValueOf<typeof TableCellVariant>;\n\n/**\n * Defines the props of the component.\n */\nexport interface TableCellProps extends GenericProps {\n    /** Icon (SVG path).(thead only). */\n    icon?: string;\n    /** Whether the column is sortable or not (thead only). */\n    isSortable?: boolean;\n    /** Sort order displayed as icon (sortable thead only). */\n    sortOrder?: ThOrder;\n    /** Variant. */\n    variant?: TableCellVariant;\n    /** On header cell click callback. */\n    onHeaderClick?(): void;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'TableCell';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME, true);\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<TableCellProps> = {\n    variant: TableCellVariant.body,\n};\n\n/**\n * TableCell component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const TableCell: Comp<TableCellProps, HTMLTableCellElement> = forwardRef((props, ref) => {\n    const { children, className, icon, isSortable, onHeaderClick, sortOrder, variant, ...forwardedProps } = props;\n\n    /**\n     * Handle click on the ordered thead.\n     */\n    const handleOnHeaderClick = useCallback(() => {\n        if (isFunction(onHeaderClick)) {\n            onHeaderClick();\n        }\n    }, [onHeaderClick]);\n\n    return (\n        <>\n            {variant === TableCellVariant.head && (\n                <th\n                    ref={ref}\n                    {...forwardedProps}\n                    className={classNames(\n                        handleBasicClasses({ prefix: CLASSNAME, isSortable }),\n                        className,\n                        `${CLASSNAME}--head`,\n                        {\n                            [`${CLASSNAME}--is-sorted`]: isSortable && sortOrder,\n                        },\n                    )}\n                    tabIndex={isSortable && isFunction(onHeaderClick) ? 0 : -1}\n                    onClick={handleOnHeaderClick}\n                    onKeyDown={onEnterPressed(handleOnHeaderClick)}\n                >\n                    <div className={`${CLASSNAME}-wrapper`}>\n                        {icon && !isSortable && <Icon className={`${CLASSNAME}-icon`} icon={icon} size={Size.xxs} />}\n\n                        {isSortable && sortOrder === ThOrder.asc && (\n                            <Icon className={`${CLASSNAME}-icon`} icon={mdiArrowUp} size={Size.xxs} />\n                        )}\n\n                        {isSortable && sortOrder === ThOrder.desc && (\n                            <Icon className={`${CLASSNAME}-icon`} icon={mdiArrowDown} size={Size.xxs} />\n                        )}\n\n                        <div className={`${CLASSNAME}-content`}>{children}</div>\n                    </div>\n                </th>\n            )}\n\n            {variant === TableCellVariant.body && (\n                <td\n                    {...forwardedProps}\n                    className={classNames(className, handleBasicClasses({ prefix: CLASSNAME }), `${CLASSNAME}--body`)}\n                >\n                    <div className={`${CLASSNAME}-content`}>{children}</div>\n                </td>\n            )}\n        </>\n    );\n});\nTableCell.displayName = COMPONENT_NAME;\nTableCell.className = CLASSNAME;\nTableCell.defaultProps = DEFAULT_PROPS;\n","import React, { forwardRef } from 'react';\n\nimport classNames from 'classnames';\n\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\n\n/**\n * Defines the props of the component.\n */\nexport type TableHeaderProps = GenericProps;\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'TableHeader';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME, true);\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<TableHeaderProps> = {};\n\n/**\n * TableHeader component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const TableHeader: Comp<TableHeaderProps, HTMLTableSectionElement> = forwardRef((props, ref) => {\n    const { children, className, ...forwardedProps } = props;\n\n    return (\n        <thead\n            ref={ref}\n            {...forwardedProps}\n            className={classNames(className, handleBasicClasses({ prefix: CLASSNAME }))}\n        >\n            {children}\n        </thead>\n    );\n});\nTableHeader.displayName = COMPONENT_NAME;\nTableHeader.className = CLASSNAME;\nTableHeader.defaultProps = DEFAULT_PROPS;\n","import React, { forwardRef } from 'react';\n\nimport classNames from 'classnames';\n\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\n\n/**\n * Defines the props of the component.\n */\nexport interface TableRowProps extends GenericProps {\n    /** Whether the component is clickable or not. */\n    isClickable?: boolean;\n    /** Whether the component is disabled or not. */\n    isDisabled?: boolean;\n    /** Whether the component is selected or not. */\n    isSelected?: boolean;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'TableRow';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME, true);\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<TableRowProps> = {};\n\n/**\n * TableRow component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const TableRow: Comp<TableRowProps, HTMLTableRowElement> = forwardRef((props, ref) => {\n    const { children, className, disabled, isClickable, isDisabled = disabled, isSelected, ...forwardedProps } = props;\n\n    return (\n        <tr\n            ref={ref}\n            tabIndex={isClickable && !isDisabled ? 0 : -1}\n            {...forwardedProps}\n            className={classNames(\n                className,\n                handleBasicClasses({\n                    isClickable: isClickable && !isDisabled,\n                    isDisabled,\n                    isSelected: isSelected && !isDisabled,\n                    prefix: CLASSNAME,\n                }),\n            )}\n            aria-disabled={isDisabled}\n        >\n            {children}\n        </tr>\n    );\n});\n\nTableRow.displayName = COMPONENT_NAME;\nTableRow.className = CLASSNAME;\nTableRow.defaultProps = DEFAULT_PROPS;\n"]},"metadata":{},"sourceType":"module"}