{"ast":null,"code":"import { Emphasis, Theme, ColorPalette } from './components.js';\nimport { g as getRootClassName, a as _objectWithoutProperties, f as _slicedToArray, d as classnames, h as handleBasicClasses, b as _extends } from './getRootClassName.js';\nimport React, { forwardRef, Children, useRef, useState, useEffect } from 'react';\nimport { i as mdiChevronUp, j as mdiChevronDown } from './mdi.js';\nimport isEmpty from 'lodash/isEmpty';\nimport { p as partitionMulti } from './partitionMulti.js';\nimport get from 'lodash/get';\nimport { i as isComponent } from './type.js';\nimport { I as IconButton } from './IconButton.js';\nimport isFunction from 'lodash/isFunction';\nimport { D as DragHandle } from './DragHandle.js';\n/**\n * Defines the props of the component.\n */\n\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME = 'ExpansionPanel';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME = getRootClassName(COMPONENT_NAME);\n/**\n * Component default props.\n */\n\nvar DEFAULT_PROPS = {\n  theme: Theme.light\n};\nvar isDragHandle = isComponent(DragHandle);\nvar isHeader = isComponent('header');\nvar isFooter = isComponent('footer');\n/**\n * ExpansionPanel component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar ExpansionPanel = forwardRef(function (props, ref) {\n  var className = props.className,\n      anyChildren = props.children,\n      hasBackground = props.hasBackground,\n      hasHeaderDivider = props.hasHeaderDivider,\n      isOpen = props.isOpen,\n      label = props.label,\n      onClose = props.onClose,\n      onOpen = props.onOpen,\n      onToggleOpen = props.onToggleOpen,\n      theme = props.theme,\n      toggleButtonProps = props.toggleButtonProps,\n      forwardedProps = _objectWithoutProperties(props, [\"className\", \"children\", \"hasBackground\", \"hasHeaderDivider\", \"isOpen\", \"label\", \"onClose\", \"onOpen\", \"onToggleOpen\", \"theme\", \"toggleButtonProps\"]);\n\n  var children = Children.toArray(anyChildren); // Partition children by types.\n\n  var _partitionMulti = partitionMulti(children, [isDragHandle, isHeader, isFooter]),\n      _partitionMulti2 = _slicedToArray(_partitionMulti, 4),\n      _partitionMulti2$ = _slicedToArray(_partitionMulti2[0], 1),\n      dragHandle = _partitionMulti2$[0],\n      _partitionMulti2$2 = _slicedToArray(_partitionMulti2[1], 1),\n      header = _partitionMulti2$2[0],\n      _partitionMulti2$3 = _slicedToArray(_partitionMulti2[2], 1),\n      footer = _partitionMulti2$3[0],\n      content = _partitionMulti2[3]; // Either take the header in children or create one with the label.\n\n\n  var headerProps = React.isValidElement(header) ? header.props : {};\n  var headerContent = !isEmpty(headerProps.children) ? headerProps.children : React.createElement(\"span\", {\n    className: \"\".concat(CLASSNAME, \"__label\")\n  }, label);\n\n  var toggleOpen = function toggleOpen() {\n    var shouldOpen = !isOpen;\n\n    if (isFunction(onOpen) && shouldOpen) {\n      onOpen();\n    }\n\n    if (isFunction(onClose) && !shouldOpen) {\n      onClose();\n    }\n\n    if (isFunction(onToggleOpen)) {\n      onToggleOpen(shouldOpen);\n    }\n  };\n\n  var color = theme === Theme.dark ? ColorPalette.light : ColorPalette.dark;\n  var rootClassName = classnames(className, handleBasicClasses({\n    hasBackground: hasBackground,\n    hasHeader: Boolean(!isEmpty(headerProps.children)),\n    hasHeaderDivider: hasHeaderDivider,\n    isClose: !isOpen,\n    isDraggable: Boolean(dragHandle),\n    isOpen: isOpen,\n    prefix: CLASSNAME,\n    theme: theme\n  }));\n  var wrapperRef = useRef(null);\n\n  var isContentVisible = function isContentVisible() {\n    return get(wrapperRef.current, 'clientHeight', 0) > 0;\n  }; // Switch max height on/off to activate the CSS transition (updates when children changes).\n\n\n  var _useState = useState('0'),\n      _useState2 = _slicedToArray(_useState, 2),\n      maxHeight = _useState2[0],\n      setMaxHeight = _useState2[1];\n\n  useEffect(function () {\n    var height = isOpen ? get(wrapperRef.current, 'offsetHeight', 0) : 0;\n    setMaxHeight(\"\".concat(height, \"px\"));\n  }, [children, isOpen]);\n  return React.createElement(\"section\", _extends({\n    ref: ref\n  }, forwardedProps, {\n    className: rootClassName\n  }), React.createElement(\"header\", {\n    className: \"\".concat(CLASSNAME, \"__header\"),\n    onClick: toggleOpen\n  }, dragHandle && React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__header-drag\")\n  }, dragHandle), React.createElement(\"div\", _extends({}, headerProps, {\n    className: \"\".concat(CLASSNAME, \"__header-content\")\n  }), headerContent), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__header-toggle\")\n  }, React.createElement(IconButton, _extends({}, toggleButtonProps, {\n    color: color,\n    emphasis: Emphasis.low,\n    icon: isOpen ? mdiChevronUp : mdiChevronDown\n  })))), (isOpen || isContentVisible()) && React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__wrapper\"),\n    style: {\n      maxHeight: maxHeight\n    }\n  }, React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__container\"),\n    ref: wrapperRef\n  }, React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__content\")\n  }, content), footer && React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__footer\")\n  }, footer))));\n});\nExpansionPanel.displayName = COMPONENT_NAME;\nExpansionPanel.className = CLASSNAME;\nExpansionPanel.defaultProps = DEFAULT_PROPS;\nexport { ExpansionPanel as E };","map":{"version":3,"sources":["../../../src/components/expansion-panel/ExpansionPanel.tsx"],"names":["COMPONENT_NAME","CLASSNAME","getRootClassName","DEFAULT_PROPS","theme","Theme","light","isDragHandle","isComponent","isHeader","isFooter","ExpansionPanel","forwardRef","className","anyChildren","hasBackground","hasHeaderDivider","isOpen","label","onClose","onOpen","onToggleOpen","toggleButtonProps","forwardedProps","props","children","Children","dragHandle","header","footer","content","partitionMulti","headerProps","React","headerContent","isEmpty","toggleOpen","shouldOpen","isFunction","color","ColorPalette","rootClassName","classNames","handleBasicClasses","hasHeader","Boolean","isClose","isDraggable","prefix","wrapperRef","useRef","isContentVisible","get","maxHeight","setMaxHeight","useState","useEffect","height","ref","Emphasis","mdiChevronDown"],"mappings":"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","sourcesContent":["import React, { Children, forwardRef, PropsWithChildren, ReactNode, useEffect, useRef, useState } from 'react';\n\nimport classNames from 'classnames';\n\nimport { mdiChevronDown, mdiChevronUp } from '@lumx/icons';\n\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport isFunction from 'lodash/isFunction';\n\nimport { ColorPalette, DragHandle, Emphasis, IconButton, IconButtonProps, Theme } from '@lumx/react';\nimport {\n    Callback,\n    Comp,\n    GenericProps,\n    getRootClassName,\n    handleBasicClasses,\n    isComponent,\n    partitionMulti,\n} from '@lumx/react/utils';\n\n/**\n * Defines the props of the component.\n */\nexport interface ExpansionPanelProps extends GenericProps {\n    /** Whether the expansion panel has a background. */\n    hasBackground?: boolean;\n    /** Whether the header has a divider. */\n    hasHeaderDivider?: boolean;\n    /** Whether the component is open or not. */\n    isOpen?: boolean;\n    /** Label text (overwritten if a `<header>` is provided in the children). */\n    label?: string;\n    /** Theme adapting the component to light or dark background. */\n    theme?: Theme;\n    /** On open callback. */\n    onOpen?: Callback;\n    /** On close callback. */\n    onClose?: Callback;\n    /** Props to pass to the toggle button (minus those already set by the ExpansionPanel props). */\n    toggleButtonProps: Pick<IconButtonProps, 'label'> &\n        Omit<IconButtonProps, 'label' | 'onClick' | 'icon' | 'emphasis' | 'color'>;\n    /** On toggle open or close callback. */\n    onToggleOpen?(shouldOpen: boolean): void;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'ExpansionPanel';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<ExpansionPanelProps> = {\n    theme: Theme.light,\n};\n\nconst isDragHandle = isComponent(DragHandle);\nconst isHeader = isComponent('header');\nconst isFooter = isComponent('footer');\n\n/**\n * ExpansionPanel component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const ExpansionPanel: Comp<ExpansionPanelProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const {\n        className,\n        children: anyChildren,\n        hasBackground,\n        hasHeaderDivider,\n        isOpen,\n        label,\n        onClose,\n        onOpen,\n        onToggleOpen,\n        theme,\n        toggleButtonProps,\n        ...forwardedProps\n    } = props;\n\n    const children: ReactNode[] = Children.toArray(anyChildren);\n\n    // Partition children by types.\n    const [[dragHandle], [header], [footer], content] = partitionMulti(children, [isDragHandle, isHeader, isFooter]);\n\n    // Either take the header in children or create one with the label.\n    const headerProps: PropsWithChildren<any> = React.isValidElement(header) ? header.props : {};\n    const headerContent = !isEmpty(headerProps.children) ? (\n        headerProps.children\n    ) : (\n        <span className={`${CLASSNAME}__label`}>{label}</span>\n    );\n\n    const toggleOpen = () => {\n        const shouldOpen = !isOpen;\n        if (isFunction(onOpen) && shouldOpen) {\n            onOpen();\n        }\n        if (isFunction(onClose) && !shouldOpen) {\n            onClose();\n        }\n        if (isFunction(onToggleOpen)) {\n            onToggleOpen(shouldOpen);\n        }\n    };\n\n    const color = theme === Theme.dark ? ColorPalette.light : ColorPalette.dark;\n\n    const rootClassName = classNames(\n        className,\n        handleBasicClasses({\n            hasBackground,\n            hasHeader: Boolean(!isEmpty(headerProps.children)),\n            hasHeaderDivider,\n            isClose: !isOpen,\n            isDraggable: Boolean(dragHandle),\n            isOpen,\n            prefix: CLASSNAME,\n            theme,\n        }),\n    );\n\n    const wrapperRef = useRef<HTMLDivElement>(null);\n    const isContentVisible = (): boolean => get(wrapperRef.current, 'clientHeight', 0) > 0;\n\n    // Switch max height on/off to activate the CSS transition (updates when children changes).\n    const [maxHeight, setMaxHeight] = useState('0');\n    useEffect(() => {\n        const height = isOpen ? get(wrapperRef.current, 'offsetHeight', 0) : 0;\n        setMaxHeight(`${height}px`);\n    }, [children, isOpen]);\n\n    return (\n        <section ref={ref} {...forwardedProps} className={rootClassName}>\n            {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions */}\n            <header className={`${CLASSNAME}__header`} onClick={toggleOpen}>\n                {dragHandle && <div className={`${CLASSNAME}__header-drag`}>{dragHandle}</div>}\n\n                <div {...headerProps} className={`${CLASSNAME}__header-content`}>\n                    {headerContent}\n                </div>\n\n                <div className={`${CLASSNAME}__header-toggle`}>\n                    <IconButton\n                        {...toggleButtonProps}\n                        color={color}\n                        emphasis={Emphasis.low}\n                        icon={isOpen ? mdiChevronUp : mdiChevronDown}\n                    />\n                </div>\n            </header>\n\n            {(isOpen || isContentVisible()) && (\n                <div className={`${CLASSNAME}__wrapper`} style={{ maxHeight }}>\n                    <div className={`${CLASSNAME}__container`} ref={wrapperRef}>\n                        <div className={`${CLASSNAME}__content`}>{content}</div>\n\n                        {footer && <div className={`${CLASSNAME}__footer`}>{footer}</div>}\n                    </div>\n                </div>\n            )}\n        </section>\n    );\n});\nExpansionPanel.displayName = COMPONENT_NAME;\nExpansionPanel.className = CLASSNAME;\nExpansionPanel.defaultProps = DEFAULT_PROPS;\n"]},"metadata":{},"sourceType":"module"}