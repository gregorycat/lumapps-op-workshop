{"ast":null,"code":"import { Kind, Theme } from './components.js';\nimport { g as getRootClassName, a as _objectWithoutProperties, b as _extends, d as classnames, h as handleBasicClasses } from './getRootClassName.js';\nimport React, { forwardRef } from 'react';\nvar INPUT_HELPER_CONFIGURATION = {\n  error: {\n    color: 'red'\n  },\n  success: {\n    color: 'green'\n  },\n  warning: {\n    color: 'yellow'\n  }\n};\n/**\n * Defines the props of the component.\n */\n\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME = 'InputHelper';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME = getRootClassName(COMPONENT_NAME);\n/**\n * Component default props.\n */\n\nvar DEFAULT_PROPS = {\n  kind: Kind.info,\n  theme: Theme.light\n};\n/**\n * InputHelper component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar InputHelper = forwardRef(function (props, ref) {\n  var children = props.children,\n      className = props.className,\n      kind = props.kind,\n      theme = props.theme,\n      forwardedProps = _objectWithoutProperties(props, [\"children\", \"className\", \"kind\", \"theme\"]);\n\n  var _ref = INPUT_HELPER_CONFIGURATION[kind] || {},\n      color = _ref.color;\n\n  return React.createElement(\"span\", _extends({\n    ref: ref\n  }, forwardedProps, {\n    className: classnames(className, handleBasicClasses({\n      prefix: CLASSNAME,\n      color: color,\n      theme: theme\n    }))\n  }), children);\n});\nInputHelper.displayName = COMPONENT_NAME;\nInputHelper.className = CLASSNAME;\nInputHelper.defaultProps = DEFAULT_PROPS;\nexport { InputHelper as I };","map":{"version":3,"sources":["../../../src/components/input-helper/constants.ts","../../../src/components/input-helper/InputHelper.tsx"],"names":["INPUT_HELPER_CONFIGURATION","error","color","success","warning","COMPONENT_NAME","CLASSNAME","getRootClassName","DEFAULT_PROPS","kind","Kind","theme","Theme","light","InputHelper","forwardRef","children","className","forwardedProps","props","ref","classNames","handleBasicClasses","prefix"],"mappings":";;;AAAO,IAAMA,0BAA6D,GAAG;AACzEC,EAAAA,KAAK,EAAE;AACHC,IAAAA,KAAK,EAAE;AADJ,GADkE;AAIzEC,EAAAA,OAAO,EAAE;AACLD,IAAAA,KAAK,EAAE;AADF,GAJgE;AAOzEE,EAAAA,OAAO,EAAE;AACLF,IAAAA,KAAK,EAAE;AADF;AAPgE,CAAtE;ACOP;;;;AAYA;;;;AAGA,IAAMG,cAAc,GAApB,aAAA;AAEA;;;;AAGA,IAAMC,SAAS,GAAGC,gBAAgB,CAAlC,cAAkC,CAAlC;AAEA;;;;AAGA,IAAMC,aAAwC,GAAG;AAC7CC,EAAAA,IAAI,EAAEC,IAAI,CADmC,IAAA;AAE7CC,EAAAA,KAAK,EAAEC,KAAK,CAACC;AAFgC,CAAjD;AAKA;;;;;;;;IAOaC,WAAoD,GAAGC,UAAU,CAAC,UAAA,KAAA,EAAA,GAAA,EAAgB;AAAA,MACnFC,QADmF,GAC3BG,KAD2B,CAAA,QAAA;AAAA,MACzEF,SADyE,GAC3BE,KAD2B,CAAA,SAAA;AAAA,MAC9DV,IAD8D,GAC3BU,KAD2B,CAAA,IAAA;AAAA,MACxDR,KADwD,GAC3BQ,KAD2B,CAAA,KAAA;AAAA,MAC9CD,cAD8C,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,UAAA,EAAA,WAAA,EAAA,MAAA,EAAA,OAAA,CAAA,CAAA;;AAAA,MAAA,IAAA,GAEzElB,0BAA0B,CAA1BA,IAA0B,CAA1BA,IAFyE,EAAA;AAAA,MAEnFE,KAFmF,GAAA,IAAA,CAAA,KAAA;;AAI3F,SACI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA;AACI,IAAA,GAAG,EAAEkB;AADT,GAAA,EAAA,cAAA,EAAA;AAGI,IAAA,SAAS,EAAEC,UAAU,CAAA,SAAA,EAAYC,kBAAkB,CAAC;AAAEC,MAAAA,MAAM,EAAR,SAAA;AAAqBrB,MAAAA,KAAK,EAA1B,KAAA;AAA4BS,MAAAA,KAAK,EAALA;AAA5B,KAAD,CAA9B;AAHzB,GAAA,CAAA,EADJ,QACI,CADJ;AAJ0E,CAAA,C;AAe9EG,WAAW,CAAXA,WAAAA,GAAAA,cAAAA;AACAA,WAAW,CAAXA,SAAAA,GAAAA,SAAAA;AACAA,WAAW,CAAXA,YAAAA,GAAAA,aAAAA","sourcesContent":["export const INPUT_HELPER_CONFIGURATION: Record<string, { color: string }> = {\n    error: {\n        color: 'red',\n    },\n    success: {\n        color: 'green',\n    },\n    warning: {\n        color: 'yellow',\n    },\n};\n","import { Kind, Theme } from '@lumx/react';\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\nimport classNames from 'classnames';\nimport React, { forwardRef, ReactNode } from 'react';\n\nimport { INPUT_HELPER_CONFIGURATION } from './constants';\n\n/**\n * Defines the props of the component.\n */\nexport interface InputHelperProps extends GenericProps {\n    /** Helper content. */\n    children: string | ReactNode;\n    /** Helper variant. */\n    kind?: Kind;\n    /** Theme adapting the component to light or dark background. */\n    theme?: Theme;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'InputHelper';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<InputHelperProps> = {\n    kind: Kind.info,\n    theme: Theme.light,\n};\n\n/**\n * InputHelper component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const InputHelper: Comp<InputHelperProps, HTMLSpanElement> = forwardRef((props, ref) => {\n    const { children, className, kind, theme, ...forwardedProps } = props;\n    const { color } = INPUT_HELPER_CONFIGURATION[kind as any] || {};\n\n    return (\n        <span\n            ref={ref}\n            {...forwardedProps}\n            className={classNames(className, handleBasicClasses({ prefix: CLASSNAME, color, theme }))}\n        >\n            {children}\n        </span>\n    );\n});\n\nInputHelper.displayName = COMPONENT_NAME;\nInputHelper.className = CLASSNAME;\nInputHelper.defaultProps = DEFAULT_PROPS;\n"]},"metadata":{},"sourceType":"module"}