{"ast":null,"code":"import { Emphasis, ColorPalette, Theme } from './components.js';\nimport { a as _objectWithoutProperties, c as _objectSpread2, d as classnames, h as handleBasicClasses, b as _extends, C as CSS_PREFIX } from './getRootClassName.js';\nimport React, { forwardRef } from 'react';\nimport isEmpty from 'lodash/isEmpty';\nimport { r as renderLink } from './renderLink.js';\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME = 'ButtonRoot';\nvar BUTTON_WRAPPER_CLASSNAME = \"\".concat(CSS_PREFIX, \"-button-wrapper\");\nvar BUTTON_CLASSNAME = \"\".concat(CSS_PREFIX, \"-button\");\n/**\n * Render a button wrapper with the ButtonRoot inside.\n *\n * @param  props Component props.\n * @return React element.\n */\n\nvar renderButtonWrapper = function renderButtonWrapper(props) {\n  var color = props.color,\n      emphasis = props.emphasis,\n      variant = props.variant;\n  var adaptedColor = emphasis === Emphasis.low && (color === ColorPalette.light ? ColorPalette.dark : ColorPalette.light);\n  var wrapperClassName = classnames(handleBasicClasses({\n    color: adaptedColor,\n    prefix: BUTTON_WRAPPER_CLASSNAME,\n    variant: variant\n  }));\n\n  var buttonProps = _objectSpread2({}, props, {\n    hasBackground: false\n  });\n\n  return React.createElement(\"div\", {\n    className: wrapperClassName\n  }, React.createElement(ButtonRoot, buttonProps));\n};\n/**\n * ButtonRoot component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\n\nvar ButtonRoot = forwardRef(function (props, ref) {\n  var ariaLabel = props['aria-label'],\n      children = props.children,\n      className = props.className,\n      color = props.color,\n      disabled = props.disabled,\n      emphasis = props.emphasis,\n      hasBackground = props.hasBackground,\n      href = props.href,\n      _props$isDisabled = props.isDisabled,\n      isDisabled = _props$isDisabled === void 0 ? disabled : _props$isDisabled,\n      isSelected = props.isSelected,\n      linkAs = props.linkAs,\n      name = props.name,\n      size = props.size,\n      target = props.target,\n      theme = props.theme,\n      variant = props.variant,\n      _props$type = props.type,\n      type = _props$type === void 0 ? 'button' : _props$type,\n      forwardedProps = _objectWithoutProperties(props, [\"aria-label\", \"children\", \"className\", \"color\", \"disabled\", \"emphasis\", \"hasBackground\", \"href\", \"isDisabled\", \"isSelected\", \"linkAs\", \"name\", \"size\", \"target\", \"theme\", \"variant\", \"type\"]);\n\n  var adaptedColor = color || emphasis !== Emphasis.high && theme === Theme.dark && ColorPalette.light || emphasis === Emphasis.high && ColorPalette.primary || ColorPalette.dark;\n\n  if (hasBackground) {\n    return renderButtonWrapper(_objectSpread2({}, props, {\n      ref: ref,\n      variant: variant,\n      color: adaptedColor\n    }));\n  }\n\n  var buttonClassName = classnames(className, handleBasicClasses({\n    color: adaptedColor,\n    emphasis: emphasis,\n    isSelected: isSelected,\n    isDisabled: isDisabled,\n    prefix: BUTTON_CLASSNAME,\n    size: size,\n    theme: emphasis === Emphasis.high && theme,\n    variant: variant\n  }));\n  /**\n   * If the linkAs prop is used, we use the linkAs component instead of a <button>.\n   * If there is an href attribute, we display an <a> instead of a <button>.\n   *\n   * However, in any case, if the component is disabled, we returned a <button> since disabled is not compatible with <a>.\n   */\n\n  if ((linkAs || !isEmpty(props.href)) && !isDisabled) {\n    return renderLink(_objectSpread2({\n      linkAs: linkAs\n    }, forwardedProps, {\n      'aria-label': ariaLabel,\n      href: href,\n      target: target,\n      className: buttonClassName,\n      ref: ref\n    }), children);\n  }\n\n  return React.createElement(\"button\", _extends({}, forwardedProps, {\n    disabled: isDisabled,\n    \"aria-disabled\": isDisabled,\n    \"aria-label\": ariaLabel,\n    ref: ref,\n    className: buttonClassName,\n    name: name,\n    type: // eslint-disable-next-line react/button-has-type\n    type\n  }), children);\n});\nButtonRoot.displayName = COMPONENT_NAME;\nButtonRoot.defaultProps = {};\nexport { ButtonRoot as B };","map":{"version":3,"sources":["../../../src/components/button/ButtonRoot.tsx"],"names":["COMPONENT_NAME","BUTTON_WRAPPER_CLASSNAME","BUTTON_CLASSNAME","renderButtonWrapper","color","emphasis","variant","props","adaptedColor","Emphasis","ColorPalette","wrapperClassName","classNames","handleBasicClasses","prefix","buttonProps","hasBackground","ButtonRoot","forwardRef","ariaLabel","children","className","disabled","href","isDisabled","isSelected","linkAs","name","size","target","theme","type","forwardedProps","Theme","ref","buttonClassName","isEmpty","renderLink"],"mappings":"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","sourcesContent":["import React, { ButtonHTMLAttributes, DetailedHTMLProps, forwardRef, RefObject } from 'react';\n\nimport isEmpty from 'lodash/isEmpty';\n\nimport classNames from 'classnames';\n\nimport { Color, ColorPalette, Emphasis, Size, Theme } from '@lumx/react';\nimport { CSS_PREFIX } from '@lumx/react/constants';\nimport { Comp, GenericProps, handleBasicClasses } from '@lumx/react/utils';\nimport { renderLink } from '@lumx/react/utils/renderLink';\n\ntype HTMLButtonProps = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n\n/**\n * Button size definition.\n */\nexport type ButtonSize = Extract<Size, 's' | 'm'>;\n\nexport interface BaseButtonProps extends GenericProps {\n    /** ARIA button label. */\n    ['aria-label']?: string;\n    /** Color variant. */\n    color?: Color;\n    /** Emphasis variant. */\n    emphasis?: Emphasis;\n    /** Whether or not the button has a background color in low emphasis. */\n    hasBackground?: boolean;\n    /** Native anchor href property. It determines whether the Button will be a <button> or an <a>. */\n    href?: string;\n    /** Whether the component is disabled or not. */\n    isDisabled?: boolean;\n    /** Whether the component is selected or not. */\n    isSelected?: boolean;\n    /** Native button name property. */\n    name?: string;\n    /** Size variant. */\n    size?: ButtonSize;\n    /** Native anchor target property. */\n    target?: '_self' | '_blank' | '_parent' | '_top';\n    /** Theme adapting the component to light or dark background. */\n    theme?: Theme;\n    /** Native button type. */\n    type?: HTMLButtonProps['type'];\n    /** Custom react component for the link (can be used to inject react router Link). */\n    linkAs?: 'a' | any;\n}\n\nexport interface ButtonRootProps extends BaseButtonProps {\n    variant: 'button' | 'icon';\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'ButtonRoot';\n\nexport const BUTTON_WRAPPER_CLASSNAME = `${CSS_PREFIX}-button-wrapper`;\nexport const BUTTON_CLASSNAME = `${CSS_PREFIX}-button`;\n\n/**\n * Render a button wrapper with the ButtonRoot inside.\n *\n * @param  props Component props.\n * @return React element.\n */\nconst renderButtonWrapper: React.FC<ButtonRootProps> = (props) => {\n    const { color, emphasis, variant } = props;\n\n    const adaptedColor =\n        emphasis === Emphasis.low && (color === ColorPalette.light ? ColorPalette.dark : ColorPalette.light);\n\n    const wrapperClassName = classNames(\n        handleBasicClasses({\n            color: adaptedColor,\n            prefix: BUTTON_WRAPPER_CLASSNAME,\n            variant,\n        }),\n    );\n    const buttonProps = { ...props, hasBackground: false };\n\n    return (\n        <div className={wrapperClassName}>\n            {/* eslint-disable-next-line @typescript-eslint/no-use-before-define */}\n            <ButtonRoot {...buttonProps} />\n        </div>\n    );\n};\n\n/**\n * ButtonRoot component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const ButtonRoot: Comp<ButtonRootProps, HTMLButtonElement | HTMLAnchorElement> = forwardRef((props, ref) => {\n    const {\n        'aria-label': ariaLabel,\n        children,\n        className,\n        color,\n        disabled,\n        emphasis,\n        hasBackground,\n        href,\n        isDisabled = disabled,\n        isSelected,\n        linkAs,\n        name,\n        size,\n        target,\n        theme,\n        variant,\n        type = 'button',\n        ...forwardedProps\n    } = props;\n\n    const adaptedColor =\n        color ||\n        (emphasis !== Emphasis.high && theme === Theme.dark && ColorPalette.light) ||\n        (emphasis === Emphasis.high && ColorPalette.primary) ||\n        ColorPalette.dark;\n\n    if (hasBackground) {\n        return renderButtonWrapper({ ...props, ref, variant, color: adaptedColor });\n    }\n\n    const buttonClassName = classNames(\n        className,\n        handleBasicClasses({\n            color: adaptedColor,\n            emphasis,\n            isSelected,\n            isDisabled,\n            prefix: BUTTON_CLASSNAME,\n            size,\n            theme: emphasis === Emphasis.high && theme,\n            variant,\n        }),\n    );\n\n    /**\n     * If the linkAs prop is used, we use the linkAs component instead of a <button>.\n     * If there is an href attribute, we display an <a> instead of a <button>.\n     *\n     * However, in any case, if the component is disabled, we returned a <button> since disabled is not compatible with <a>.\n     */\n    if ((linkAs || !isEmpty(props.href)) && !isDisabled) {\n        return renderLink(\n            {\n                linkAs,\n                ...forwardedProps,\n                'aria-label': ariaLabel,\n                href,\n                target,\n                className: buttonClassName,\n                ref: ref as RefObject<HTMLAnchorElement>,\n            },\n            children,\n        );\n    }\n    return (\n        <button\n            {...forwardedProps}\n            disabled={isDisabled}\n            aria-disabled={isDisabled}\n            aria-label={ariaLabel}\n            ref={ref as RefObject<HTMLButtonElement>}\n            className={buttonClassName}\n            name={name}\n            type={\n                // eslint-disable-next-line react/button-has-type\n                type\n            }\n        >\n            {children}\n        </button>\n    );\n});\nButtonRoot.displayName = COMPONENT_NAME;\nButtonRoot.defaultProps = {};\n"]},"metadata":{},"sourceType":"module"}