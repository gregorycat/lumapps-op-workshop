{"ast":null,"code":"import { Size } from './components.js';\nimport { g as getRootClassName, a as _objectWithoutProperties, b as _extends, d as classnames, h as handleBasicClasses } from './getRootClassName.js';\nimport React, { forwardRef, useRef } from 'react';\nimport { d as mdiClose } from './mdi.js';\nimport { u as useFocus } from './Popover2.js';\nimport { m as mergeRefs } from './mergeRefs.js';\nimport { C as Chip } from './Chip2.js';\nimport { D as Dropdown } from './Dropdown2.js';\nimport { I as Icon } from './Icon2.js';\nimport { T as TextField } from './TextField.js';\n/**\n * Defines the props of the component.\n */\n\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME = 'Autocomplete';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME = getRootClassName(COMPONENT_NAME);\n/**\n * Component default props.\n */\n\nvar DEFAULT_PROPS = {\n  anchorToInput: false,\n  closeOnClick: false,\n  closeOnClickAway: true,\n  closeOnEscape: true,\n  shouldFocusOnClose: false\n};\n/**\n * Autocomplete component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar Autocomplete = forwardRef(function (props, ref) {\n  var anchorToInput = props.anchorToInput,\n      children = props.children,\n      chips = props.chips,\n      className = props.className,\n      closeOnClick = props.closeOnClick,\n      closeOnClickAway = props.closeOnClickAway,\n      closeOnEscape = props.closeOnEscape,\n      disabled = props.disabled,\n      error = props.error,\n      fitToAnchorWidth = props.fitToAnchorWidth,\n      hasError = props.hasError,\n      helper = props.helper,\n      icon = props.icon,\n      inputRef = props.inputRef,\n      clearButtonProps = props.clearButtonProps,\n      _props$isDisabled = props.isDisabled,\n      isDisabled = _props$isDisabled === void 0 ? disabled : _props$isDisabled,\n      isRequired = props.isRequired,\n      isOpen = props.isOpen,\n      isValid = props.isValid,\n      label = props.label,\n      name = props.name,\n      offset = props.offset,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onClose = props.onClose,\n      onFocus = props.onFocus,\n      onInfiniteScroll = props.onInfiniteScroll,\n      placeholder = props.placeholder,\n      placement = props.placement,\n      shouldFocusOnClose = props.shouldFocusOnClose,\n      theme = props.theme,\n      value = props.value,\n      forwardedProps = _objectWithoutProperties(props, [\"anchorToInput\", \"children\", \"chips\", \"className\", \"closeOnClick\", \"closeOnClickAway\", \"closeOnEscape\", \"disabled\", \"error\", \"fitToAnchorWidth\", \"hasError\", \"helper\", \"icon\", \"inputRef\", \"clearButtonProps\", \"isDisabled\", \"isRequired\", \"isOpen\", \"isValid\", \"label\", \"name\", \"offset\", \"onBlur\", \"onChange\", \"onClose\", \"onFocus\", \"onInfiniteScroll\", \"placeholder\", \"placement\", \"shouldFocusOnClose\", \"theme\", \"value\"]);\n\n  var inputAnchorRef = useRef(null);\n  var textFieldRef = useRef(null);\n  useFocus(inputAnchorRef.current, !isOpen && shouldFocusOnClose);\n  return React.createElement(\"div\", _extends({\n    ref: ref\n  }, forwardedProps, {\n    className: classnames(className, handleBasicClasses({\n      prefix: CLASSNAME\n    }))\n  }), React.createElement(TextField, {\n    chips: chips,\n    error: error,\n    hasError: hasError,\n    helper: helper,\n    icon: icon,\n    inputRef: mergeRefs(inputAnchorRef, inputRef),\n    clearButtonProps: clearButtonProps,\n    isDisabled: isDisabled,\n    isRequired: isRequired,\n    isValid: isValid,\n    label: label,\n    name: name,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    placeholder: placeholder,\n    textFieldRef: textFieldRef,\n    theme: theme,\n    value: value\n  }), React.createElement(Dropdown, {\n    anchorRef: anchorToInput ? inputAnchorRef : textFieldRef,\n    closeOnClick: closeOnClick,\n    closeOnClickAway: closeOnClickAway,\n    closeOnEscape: closeOnEscape,\n    fitToAnchorWidth: fitToAnchorWidth,\n    isOpen: isOpen,\n    offset: offset,\n    onClose: onClose,\n    onInfiniteScroll: onInfiniteScroll,\n    placement: placement,\n    shouldFocusOnOpen: false,\n    theme: theme\n  }, children));\n});\nAutocomplete.displayName = COMPONENT_NAME;\nAutocomplete.className = CLASSNAME;\nAutocomplete.defaultProps = DEFAULT_PROPS;\n/**\n * Defines the props of the component.\n */\n\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME$1 = 'AutocompleteMultiple';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME$1 = getRootClassName(COMPONENT_NAME$1);\n/**\n * Component default props.\n */\n\nvar DEFAULT_PROPS$1 = {\n  closeOnClickAway: true,\n  closeOnEscape: true,\n  selectedChipRender: function selectedChipRender(choice, index, onClear, isDisabled) {\n    var onClick = function onClick(event) {\n      return onClear && onClear(event, choice);\n    };\n\n    return React.createElement(Chip, {\n      key: index,\n      after: onClear && React.createElement(Icon, {\n        icon: mdiClose,\n        size: Size.xxs\n      }),\n      isDisabled: isDisabled,\n      size: Size.s,\n      onAfterClick: onClick,\n      onClick: onClick\n    }, choice);\n  },\n  values: []\n};\n/**\n * AutocompleteMultiple component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar AutocompleteMultiple = forwardRef(function (props, ref) {\n  var anchorToInput = props.anchorToInput,\n      children = props.children,\n      chipsAlignment = props.chipsAlignment,\n      className = props.className,\n      closeOnClickAway = props.closeOnClickAway,\n      closeOnEscape = props.closeOnEscape,\n      fitToAnchorWidth = props.fitToAnchorWidth,\n      hasError = props.hasError,\n      helper = props.helper,\n      icon = props.icon,\n      inputRef = props.inputRef,\n      clearButtonProps = props.clearButtonProps,\n      isDisabled = props.isDisabled,\n      isRequired = props.isRequired,\n      isOpen = props.isOpen,\n      isValid = props.isValid,\n      label = props.label,\n      name = props.name,\n      offset = props.offset,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onClear = props.onClear,\n      onClose = props.onClose,\n      onFocus = props.onFocus,\n      onInfiniteScroll = props.onInfiniteScroll,\n      onKeyDown = props.onKeyDown,\n      placeholder = props.placeholder,\n      placement = props.placement,\n      selectedChipRender = props.selectedChipRender,\n      shouldFocusOnClose = props.shouldFocusOnClose,\n      theme = props.theme,\n      type = props.type,\n      value = props.value,\n      values = props.values,\n      forwardedProps = _objectWithoutProperties(props, [\"anchorToInput\", \"children\", \"chipsAlignment\", \"className\", \"closeOnClickAway\", \"closeOnEscape\", \"fitToAnchorWidth\", \"hasError\", \"helper\", \"icon\", \"inputRef\", \"clearButtonProps\", \"isDisabled\", \"isRequired\", \"isOpen\", \"isValid\", \"label\", \"name\", \"offset\", \"onBlur\", \"onChange\", \"onClear\", \"onClose\", \"onFocus\", \"onInfiniteScroll\", \"onKeyDown\", \"placeholder\", \"placement\", \"selectedChipRender\", \"shouldFocusOnClose\", \"theme\", \"type\", \"value\", \"values\"]);\n\n  return React.createElement(Autocomplete, _extends({\n    ref: ref\n  }, forwardedProps, {\n    anchorToInput: anchorToInput,\n    className: classnames(className, handleBasicClasses({\n      prefix: CLASSNAME$1\n    })),\n    name: name,\n    value: value,\n    onChange: onChange,\n    onKeyDown: onKeyDown,\n    onBlur: onBlur,\n    shouldFocusOnClose: shouldFocusOnClose,\n    onFocus: onFocus,\n    hasError: hasError,\n    helper: helper,\n    icon: icon,\n    inputRef: inputRef,\n    chips: values && values.map(function (chip, index) {\n      return selectedChipRender(chip, index, onClear);\n    }),\n    isDisabled: isDisabled,\n    isRequired: isRequired,\n    clearButtonProps: clearButtonProps,\n    isValid: isValid,\n    label: label,\n    placeholder: placeholder,\n    theme: theme,\n    type: type,\n    isOpen: isOpen,\n    closeOnClick: false,\n    closeOnClickAway: closeOnClickAway,\n    closeOnEscape: closeOnEscape,\n    onClose: onClose,\n    offset: offset,\n    placement: placement,\n    fitToAnchorWidth: fitToAnchorWidth,\n    onInfiniteScroll: onInfiniteScroll\n  }), children);\n});\nAutocompleteMultiple.displayName = COMPONENT_NAME$1;\nAutocompleteMultiple.className = CLASSNAME$1;\nAutocompleteMultiple.defaultProps = DEFAULT_PROPS$1;\nexport { Autocomplete as A, AutocompleteMultiple as a };","map":{"version":3,"sources":["../../../src/components/autocomplete/Autocomplete.tsx","../../../src/components/autocomplete/AutocompleteMultiple.tsx"],"names":["COMPONENT_NAME","CLASSNAME","getRootClassName","DEFAULT_PROPS","anchorToInput","closeOnClick","closeOnClickAway","closeOnEscape","shouldFocusOnClose","Autocomplete","forwardRef","children","chips","className","disabled","error","fitToAnchorWidth","hasError","helper","icon","inputRef","clearButtonProps","isDisabled","isRequired","isOpen","isValid","label","name","offset","onBlur","onChange","onClose","onFocus","onInfiniteScroll","placeholder","placement","theme","value","forwardedProps","props","inputAnchorRef","useRef","textFieldRef","useFocus","ref","classNames","handleBasicClasses","prefix","mergeRefs","selectedChipRender","onClick","onClear","Size","xxs","values","AutocompleteMultiple","chipsAlignment","onKeyDown","type"],"mappings":";;;;;;;;;;AAWA;;;;AAsJA;;;;AAGA,IAAMA,cAAc,GAApB,cAAA;AAEA;;;;AAGA,IAAMC,SAAS,GAAGC,gBAAgB,CAAlC,cAAkC,CAAlC;AAEA;;;;AAGA,IAAMC,aAAyC,GAAG;AAC9CC,EAAAA,aAAa,EADiC,KAAA;AAE9CC,EAAAA,YAAY,EAFkC,KAAA;AAG9CC,EAAAA,gBAAgB,EAH8B,IAAA;AAI9CC,EAAAA,aAAa,EAJiC,IAAA;AAK9CC,EAAAA,kBAAkB,EAAE;AAL0B,CAAlD;AAQA;;;;;;;;IAOaC,YAAqD,GAAGC,UAAU,CAAC,UAAA,KAAA,EAAA,GAAA,EAAgB;AAAA,MAExFN,aAFwF,GAmCxFmC,KAnCwF,CAAA,aAAA;AAAA,MAGxF5B,QAHwF,GAmCxF4B,KAnCwF,CAAA,QAAA;AAAA,MAIxF3B,KAJwF,GAmCxF2B,KAnCwF,CAAA,KAAA;AAAA,MAKxF1B,SALwF,GAmCxF0B,KAnCwF,CAAA,SAAA;AAAA,MAMxFlC,YANwF,GAmCxFkC,KAnCwF,CAAA,YAAA;AAAA,MAOxFjC,gBAPwF,GAmCxFiC,KAnCwF,CAAA,gBAAA;AAAA,MAQxFhC,aARwF,GAmCxFgC,KAnCwF,CAAA,aAAA;AAAA,MASxFzB,QATwF,GAmCxFyB,KAnCwF,CAAA,QAAA;AAAA,MAUxFxB,KAVwF,GAmCxFwB,KAnCwF,CAAA,KAAA;AAAA,MAWxFvB,gBAXwF,GAmCxFuB,KAnCwF,CAAA,gBAAA;AAAA,MAYxFtB,QAZwF,GAmCxFsB,KAnCwF,CAAA,QAAA;AAAA,MAaxFrB,MAbwF,GAmCxFqB,KAnCwF,CAAA,MAAA;AAAA,MAcxFpB,IAdwF,GAmCxFoB,KAnCwF,CAAA,IAAA;AAAA,MAexFnB,QAfwF,GAmCxFmB,KAnCwF,CAAA,QAAA;AAAA,MAgBxFlB,gBAhBwF,GAmCxFkB,KAnCwF,CAAA,gBAAA;AAAA,MAAA,iBAAA,GAmCxFA,KAnCwF,CAAA,UAAA;AAAA,MAiBxFjB,UAjBwF,GAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,QAAA,GAAA,iBAAA;AAAA,MAkBxFC,UAlBwF,GAmCxFgB,KAnCwF,CAAA,UAAA;AAAA,MAmBxFf,MAnBwF,GAmCxFe,KAnCwF,CAAA,MAAA;AAAA,MAoBxFd,OApBwF,GAmCxFc,KAnCwF,CAAA,OAAA;AAAA,MAqBxFb,KArBwF,GAmCxFa,KAnCwF,CAAA,KAAA;AAAA,MAsBxFZ,IAtBwF,GAmCxFY,KAnCwF,CAAA,IAAA;AAAA,MAuBxFX,MAvBwF,GAmCxFW,KAnCwF,CAAA,MAAA;AAAA,MAwBxFV,MAxBwF,GAmCxFU,KAnCwF,CAAA,MAAA;AAAA,MAyBxFT,QAzBwF,GAmCxFS,KAnCwF,CAAA,QAAA;AAAA,MA0BxFR,OA1BwF,GAmCxFQ,KAnCwF,CAAA,OAAA;AAAA,MA2BxFP,OA3BwF,GAmCxFO,KAnCwF,CAAA,OAAA;AAAA,MA4BxFN,gBA5BwF,GAmCxFM,KAnCwF,CAAA,gBAAA;AAAA,MA6BxFL,WA7BwF,GAmCxFK,KAnCwF,CAAA,WAAA;AAAA,MA8BxFJ,SA9BwF,GAmCxFI,KAnCwF,CAAA,SAAA;AAAA,MA+BxF/B,kBA/BwF,GAmCxF+B,KAnCwF,CAAA,kBAAA;AAAA,MAgCxFH,KAhCwF,GAmCxFG,KAnCwF,CAAA,KAAA;AAAA,MAiCxFF,KAjCwF,GAmCxFE,KAnCwF,CAAA,KAAA;AAAA,MAkCrFD,cAlCqF,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,eAAA,EAAA,UAAA,EAAA,OAAA,EAAA,WAAA,EAAA,cAAA,EAAA,kBAAA,EAAA,eAAA,EAAA,UAAA,EAAA,OAAA,EAAA,kBAAA,EAAA,UAAA,EAAA,QAAA,EAAA,MAAA,EAAA,UAAA,EAAA,kBAAA,EAAA,YAAA,EAAA,YAAA,EAAA,QAAA,EAAA,SAAA,EAAA,OAAA,EAAA,MAAA,EAAA,QAAA,EAAA,QAAA,EAAA,UAAA,EAAA,SAAA,EAAA,SAAA,EAAA,kBAAA,EAAA,aAAA,EAAA,WAAA,EAAA,oBAAA,EAAA,OAAA,EAAA,OAAA,CAAA,CAAA;;AAoC5F,MAAME,cAAc,GAAGC,MAAM,CAA7B,IAA6B,CAA7B;AACA,MAAMC,YAAY,GAAGD,MAAM,CAA3B,IAA2B,CAA3B;AACAE,EAAAA,QAAQ,CAACH,cAAc,CAAf,OAAA,EAAyB,CAAA,MAAA,IAAjCG,kBAAQ,CAARA;AAEA,SACI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA;AACI,IAAA,GAAG,EAAEC;AADT,GAAA,EAAA,cAAA,EAAA;AAGI,IAAA,SAAS,EAAEC,UAAU,CAAA,SAAA,EAEjBC,kBAAkB,CAAC;AACfC,MAAAA,MAAM,EAAE9C;AADO,KAAD,CAFD;AAHzB,GAAA,CAAA,EAUI,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AACI,IAAA,KAAK,EADT,KAAA;AAEI,IAAA,KAAK,EAFT,KAAA;AAGI,IAAA,QAAQ,EAHZ,QAAA;AAII,IAAA,MAAM,EAJV,MAAA;AAKI,IAAA,IAAI,EALR,IAAA;AAMI,IAAA,QAAQ,EAAE+C,SAAS,CAAA,cAAA,EANvB,QAMuB,CANvB;AAOI,IAAA,gBAAgB,EAPpB,gBAAA;AAQI,IAAA,UAAU,EARd,UAAA;AASI,IAAA,UAAU,EATd,UAAA;AAUI,IAAA,OAAO,EAVX,OAAA;AAWI,IAAA,KAAK,EAXT,KAAA;AAYI,IAAA,IAAI,EAZR,IAAA;AAaI,IAAA,MAAM,EAbV,MAAA;AAcI,IAAA,QAAQ,EAdZ,QAAA;AAeI,IAAA,OAAO,EAfX,OAAA;AAgBI,IAAA,WAAW,EAhBf,WAAA;AAiBI,IAAA,YAAY,EAjBhB,YAAA;AAkBI,IAAA,KAAK,EAlBT,KAAA;AAmBI,IAAA,KAAK,EAAEX;AAnBX,GAAA,CAVJ,EA+BI,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AACI,IAAA,SAAS,EAAEjC,aAAa,GAAA,cAAA,GAD5B,YAAA;AAEI,IAAA,YAAY,EAFhB,YAAA;AAGI,IAAA,gBAAgB,EAHpB,gBAAA;AAII,IAAA,aAAa,EAJjB,aAAA;AAKI,IAAA,gBAAgB,EALpB,gBAAA;AAMI,IAAA,MAAM,EANV,MAAA;AAOI,IAAA,MAAM,EAPV,MAAA;AAQI,IAAA,OAAO,EARX,OAAA;AASI,IAAA,gBAAgB,EATpB,gBAAA;AAUI,IAAA,SAAS,EAVb,SAAA;AAWI,IAAA,iBAAiB,EAXrB,KAAA;AAYI,IAAA,KAAK,EAAEgC;AAZX,GAAA,EAhCR,QAgCQ,CA/BJ,CADJ;AAxC2E,CAAA,C;AA2F/E3B,YAAY,CAAZA,WAAAA,GAAAA,cAAAA;AACAA,YAAY,CAAZA,SAAAA,GAAAA,SAAAA;AACAA,YAAY,CAAZA,YAAAA,GAAAA,aAAAA;AClRA;;;;AAiBA;;;;AAGA,IAAMT,gBAAc,GAApB,sBAAA;AAEA;;;;AAGA,IAAMC,WAAS,GAAGC,gBAAgB,CAAlC,gBAAkC,CAAlC;AAEA;;;;AAGA,IAAMC,eAAiD,GAAG;AACtDG,EAAAA,gBAAgB,EADsC,IAAA;AAEtDC,EAAAA,aAAa,EAFyC,IAAA;AAGtD0C,EAAAA,kBAHsD,EAAA,SAAA,kBAAA,CAAA,MAAA,EAAA,KAAA,EAAA,OAAA,EAAA,UAAA,EAGC;AACnD,QAAMC,OAAO,GAAG,SAAVA,OAAU,CAAA,KAAA,EAAA;AAAA,aAA6BC,OAAO,IAAIA,OAAO,CAAA,KAAA,EAA/C,MAA+C,CAA/C;AAAhB,KAAA;;AACA,WACI,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACI,MAAA,GAAG,EADP,KAAA;AAEI,MAAA,KAAK,EAAEA,OAAO,IAAI,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,QAAA,IAAI,EAAV,QAAA;AAAsB,QAAA,IAAI,EAAEC,IAAI,CAACC;AAAjC,OAAA,CAFtB;AAGI,MAAA,UAAU,EAHd,UAAA;AAII,MAAA,IAAI,EAAED,IAAI,CAJd,CAAA;AAKI,MAAA,YAAY,EALhB,OAAA;AAMI,MAAA,OAAO,EAAEF;AANb,KAAA,EADJ,MACI,CADJ;AALkD,GAAA;AAkBtDI,EAAAA,MAAM,EAAE;AAlB8C,CAA1D;AAqBA;;;;;;;;IAOaC,oBAAqE,GAAG7C,UAAU,CAAC,UAAA,KAAA,EAAA,GAAA,EAAgB;AAAA,MAExGN,aAFwG,GAqCxGmC,KArCwG,CAAA,aAAA;AAAA,MAGxG5B,QAHwG,GAqCxG4B,KArCwG,CAAA,QAAA;AAAA,MAIxGiB,cAJwG,GAqCxGjB,KArCwG,CAAA,cAAA;AAAA,MAKxG1B,SALwG,GAqCxG0B,KArCwG,CAAA,SAAA;AAAA,MAMxGjC,gBANwG,GAqCxGiC,KArCwG,CAAA,gBAAA;AAAA,MAOxGhC,aAPwG,GAqCxGgC,KArCwG,CAAA,aAAA;AAAA,MAQxGvB,gBARwG,GAqCxGuB,KArCwG,CAAA,gBAAA;AAAA,MASxGtB,QATwG,GAqCxGsB,KArCwG,CAAA,QAAA;AAAA,MAUxGrB,MAVwG,GAqCxGqB,KArCwG,CAAA,MAAA;AAAA,MAWxGpB,IAXwG,GAqCxGoB,KArCwG,CAAA,IAAA;AAAA,MAYxGnB,QAZwG,GAqCxGmB,KArCwG,CAAA,QAAA;AAAA,MAaxGlB,gBAbwG,GAqCxGkB,KArCwG,CAAA,gBAAA;AAAA,MAcxGjB,UAdwG,GAqCxGiB,KArCwG,CAAA,UAAA;AAAA,MAexGhB,UAfwG,GAqCxGgB,KArCwG,CAAA,UAAA;AAAA,MAgBxGf,MAhBwG,GAqCxGe,KArCwG,CAAA,MAAA;AAAA,MAiBxGd,OAjBwG,GAqCxGc,KArCwG,CAAA,OAAA;AAAA,MAkBxGb,KAlBwG,GAqCxGa,KArCwG,CAAA,KAAA;AAAA,MAmBxGZ,IAnBwG,GAqCxGY,KArCwG,CAAA,IAAA;AAAA,MAoBxGX,MApBwG,GAqCxGW,KArCwG,CAAA,MAAA;AAAA,MAqBxGV,MArBwG,GAqCxGU,KArCwG,CAAA,MAAA;AAAA,MAsBxGT,QAtBwG,GAqCxGS,KArCwG,CAAA,QAAA;AAAA,MAuBxGY,OAvBwG,GAqCxGZ,KArCwG,CAAA,OAAA;AAAA,MAwBxGR,OAxBwG,GAqCxGQ,KArCwG,CAAA,OAAA;AAAA,MAyBxGP,OAzBwG,GAqCxGO,KArCwG,CAAA,OAAA;AAAA,MA0BxGN,gBA1BwG,GAqCxGM,KArCwG,CAAA,gBAAA;AAAA,MA2BxGkB,SA3BwG,GAqCxGlB,KArCwG,CAAA,SAAA;AAAA,MA4BxGL,WA5BwG,GAqCxGK,KArCwG,CAAA,WAAA;AAAA,MA6BxGJ,SA7BwG,GAqCxGI,KArCwG,CAAA,SAAA;AAAA,MA8BxGU,kBA9BwG,GAqCxGV,KArCwG,CAAA,kBAAA;AAAA,MA+BxG/B,kBA/BwG,GAqCxG+B,KArCwG,CAAA,kBAAA;AAAA,MAgCxGH,KAhCwG,GAqCxGG,KArCwG,CAAA,KAAA;AAAA,MAiCxGmB,IAjCwG,GAqCxGnB,KArCwG,CAAA,IAAA;AAAA,MAkCxGF,KAlCwG,GAqCxGE,KArCwG,CAAA,KAAA;AAAA,MAmCxGe,MAnCwG,GAqCxGf,KArCwG,CAAA,MAAA;AAAA,MAoCrGD,cApCqG,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,eAAA,EAAA,UAAA,EAAA,gBAAA,EAAA,WAAA,EAAA,kBAAA,EAAA,eAAA,EAAA,kBAAA,EAAA,UAAA,EAAA,QAAA,EAAA,MAAA,EAAA,UAAA,EAAA,kBAAA,EAAA,YAAA,EAAA,YAAA,EAAA,QAAA,EAAA,SAAA,EAAA,OAAA,EAAA,MAAA,EAAA,QAAA,EAAA,QAAA,EAAA,UAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,kBAAA,EAAA,WAAA,EAAA,aAAA,EAAA,WAAA,EAAA,oBAAA,EAAA,oBAAA,EAAA,OAAA,EAAA,MAAA,EAAA,OAAA,EAAA,QAAA,CAAA,CAAA;;AAuC5G,SACI,KAAA,CAAA,aAAA,CAAA,YAAA,EAAA,QAAA,CAAA;AACI,IAAA,GAAG,EAAEM;AADT,GAAA,EAAA,cAAA,EAAA;AAGI,IAAA,aAAa,EAHjB,aAAA;AAII,IAAA,SAAS,EAAEC,UAAU,CAAA,SAAA,EAEjBC,kBAAkB,CAAC;AACfC,MAAAA,MAAM,EAAE9C;AADO,KAAD,CAFD,CAJzB;AAUI,IAAA,IAAI,EAVR,IAAA;AAWI,IAAA,KAAK,EAXT,KAAA;AAYI,IAAA,QAAQ,EAZZ,QAAA;AAaI,IAAA,SAAS,EAbb,SAAA;AAcI,IAAA,MAAM,EAdV,MAAA;AAeI,IAAA,kBAAkB,EAftB,kBAAA;AAgBI,IAAA,OAAO,EAhBX,OAAA;AAiBI,IAAA,QAAQ,EAjBZ,QAAA;AAkBI,IAAA,MAAM,EAlBV,MAAA;AAmBI,IAAA,IAAI,EAnBR,IAAA;AAoBI,IAAA,QAAQ,EApBZ,QAAA;AAqBI,IAAA,KAAK,EAAEqD,MAAM,IAAI,MAAM,CAAN,GAAA,CAAW,UAAA,IAAA,EAAA,KAAA,EAAA;AAAA,aAA8BL,kBAAkB,CAAA,IAAA,EAAA,KAAA,EAAhD,OAAgD,CAAhD;AArBhC,KAqBqB,CArBrB;AAsBI,IAAA,UAAU,EAtBd,UAAA;AAuBI,IAAA,UAAU,EAvBd,UAAA;AAwBI,IAAA,gBAAgB,EAxBpB,gBAAA;AAyBI,IAAA,OAAO,EAzBX,OAAA;AA0BI,IAAA,KAAK,EA1BT,KAAA;AA2BI,IAAA,WAAW,EA3Bf,WAAA;AA4BI,IAAA,KAAK,EA5BT,KAAA;AA6BI,IAAA,IAAI,EA7BR,IAAA;AA8BI,IAAA,MAAM,EA9BV,MAAA;AA+BI,IAAA,YAAY,EA/BhB,KAAA;AAgCI,IAAA,gBAAgB,EAhCpB,gBAAA;AAiCI,IAAA,aAAa,EAjCjB,aAAA;AAkCI,IAAA,OAAO,EAlCX,OAAA;AAmCI,IAAA,MAAM,EAnCV,MAAA;AAoCI,IAAA,SAAS,EApCb,SAAA;AAqCI,IAAA,gBAAgB,EArCpB,gBAAA;AAsCI,IAAA,gBAAgB,EAAEhB;AAtCtB,GAAA,CAAA,EADJ,QACI,CADJ;AAvC2F,CAAA,C;AAoF/FsB,oBAAoB,CAApBA,WAAAA,GAAAA,gBAAAA;AACAA,oBAAoB,CAApBA,SAAAA,GAAAA,WAAAA;AACAA,oBAAoB,CAApBA,YAAAA,GAAAA,eAAAA","sourcesContent":["import React, { forwardRef, ReactNode, RefObject, SyntheticEvent, useRef } from 'react';\n\nimport classNames from 'classnames';\n\nimport { Dropdown, IconButtonProps, Offset, Placement, TextField, Theme } from '@lumx/react';\n\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\n\nimport { useFocus } from '@lumx/react/hooks/useFocus';\nimport { mergeRefs } from '@lumx/react/utils/mergeRefs';\n\n/**\n * Defines the props of the component.\n */\nexport interface AutocompleteProps extends GenericProps {\n    /**\n     * Whether the suggestions list should display anchored to the input or to the wrapper.\n     * @see {@link DropdownProps#anchorToInput}\n     */\n    anchorToInput?: boolean;\n    /**\n     * Props to pass to the clear button (minus those already set by the TextField props).\n     * If not specified, the button won't be displayed.\n     * @see {@link TextFieldProps#clearButtonProps}\n     */\n    clearButtonProps?: Pick<IconButtonProps, 'label'> &\n        Omit<IconButtonProps, 'label' | 'onClick' | 'icon' | 'emphasis'>;\n    /**\n     * Reference to the <input> or <textarea> element.\n     * @see {@link TextFieldProps#inputRef}\n     */\n    inputRef?: RefObject<HTMLInputElement>;\n    /**\n     * The offset that will be applied to the Dropdown position.\n     * @see {@link DropdownProps#offset}\n     */\n    offset?: Offset;\n    /**\n     * The preferred Dropdown location against the anchor element.\n     * @see {@link DropdownProps#placement}\n     */\n    placement?: Placement;\n    /**\n     * Whether the dropdown should fit to the anchor width or not.\n     * @see {@link DropdownProps#fitToAnchorWidth}\n     */\n    fitToAnchorWidth?: boolean;\n    /**\n     * The error related to the component.\n     * @see {@link TextFieldProps#error}\n     */\n    error?: string | ReactNode;\n    /**\n     * Whether the text field is displayed with error style or not.\n     * @see {@link TextFieldProps#hasError}\n     */\n    hasError?: boolean;\n    /**\n     * Whether the text box should be focused upon closing the suggestions or not.\n     */\n    shouldFocusOnClose?: boolean;\n    /**\n     * The helper message of the text field.\n     * @see {@link TextFieldProps#helper}\n     */\n    helper?: string;\n    /**\n     * The icon of the text field (SVG path).\n     * @see {@link TextFieldProps#icon}\n     */\n    icon?: string;\n    /**\n     * Whether the component is disabled or not.\n     * @see {@link TextFieldProps#isDisabled}\n     */\n    isDisabled?: boolean;\n    /**\n     * Whether the component is required or not.\n     * @see {@link TextFieldProps#isRequired}\n     */\n    isRequired?: boolean;\n    /**\n     * Whether the text field is displayed with valid style or not.\n     * @see {@link TextFieldProps#isValid}\n     */\n    isValid?: boolean;\n    /**\n     * The label of the text field displayed in a label tag.\n     * @see {@link TextFieldProps#label}\n     */\n    label?: string;\n    /**\n     * The placeholder message of the text field.\n     * @see {@link TextFieldProps#placeholder}\n     */\n    placeholder?: string;\n    /** Theme adapting the component to light or dark background. */\n    theme?: Theme;\n    /** List of suggestions to display during autocomplete. */\n    children: React.ReactNode;\n    /**\n     * The list of chips to be displayed before the text field input.\n     */\n    chips?: React.ReactNode;\n    /**\n     * The value of the text field.\n     * @see {@link TextFieldProps#value}\n     */\n    value: string;\n    /**\n     * Whether the suggestions from the autocomplete should be displayed or not.\n     * @see {@link DropdownProps#isOpen}\n     */\n    isOpen: boolean;\n    /**\n     * The native input name property.\n     * @see {@link TextFieldProps#name}\n     */\n    name?: string;\n    /**\n     * Whether a click in the Autocomplete dropdown would close it or not.\n     * @see {@link DropdownProps#closeOnClick}\n     */\n    closeOnClick?: boolean;\n    /**\n     * Whether a click anywhere out of the Autocomplete would close it or not.\n     * @see {@link DropdownProps#closeOnClickAway}\n     */\n    closeOnClickAway?: boolean;\n    /**\n     * Whether an escape key press would close the Autocomplete or not.\n     * @see {@link DropdownProps#closeOnEscape}\n     */\n    closeOnEscape?: boolean;\n    /**\n     * The function called on blur.\n     * @see {@link TextFieldProps#onBlur}\n     */\n    onBlur?(event: React.FocusEvent): void;\n    /**\n     * On change callback.\n     * @see {@link TextFieldProps#onChange}\n     */\n    onChange(value: string, name?: string, event?: SyntheticEvent): void;\n    /**\n     * The function called on close.\n     * @see {@link DropdownProps#onClose}\n     */\n    onClose?(): void;\n    /**\n     * The function called on focus.\n     * @see {@link TextFieldProps#onFocus}\n     */\n    onFocus?(event: React.FocusEvent): void;\n    /**\n     * The function called when the bottom of the dropdown is reached.\n     * @see {@link DropdownProps#onInfiniteScroll}\n     */\n    onInfiniteScroll?(): void;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'Autocomplete';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<AutocompleteProps> = {\n    anchorToInput: false,\n    closeOnClick: false,\n    closeOnClickAway: true,\n    closeOnEscape: true,\n    shouldFocusOnClose: false,\n};\n\n/**\n * Autocomplete component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const Autocomplete: Comp<AutocompleteProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const {\n        anchorToInput,\n        children,\n        chips,\n        className,\n        closeOnClick,\n        closeOnClickAway,\n        closeOnEscape,\n        disabled,\n        error,\n        fitToAnchorWidth,\n        hasError,\n        helper,\n        icon,\n        inputRef,\n        clearButtonProps,\n        isDisabled = disabled,\n        isRequired,\n        isOpen,\n        isValid,\n        label,\n        name,\n        offset,\n        onBlur,\n        onChange,\n        onClose,\n        onFocus,\n        onInfiniteScroll,\n        placeholder,\n        placement,\n        shouldFocusOnClose,\n        theme,\n        value,\n        ...forwardedProps\n    } = props;\n    const inputAnchorRef = useRef<HTMLElement>(null);\n    const textFieldRef = useRef(null);\n    useFocus(inputAnchorRef.current, !isOpen && shouldFocusOnClose);\n\n    return (\n        <div\n            ref={ref}\n            {...forwardedProps}\n            className={classNames(\n                className,\n                handleBasicClasses({\n                    prefix: CLASSNAME,\n                }),\n            )}\n        >\n            <TextField\n                chips={chips}\n                error={error}\n                hasError={hasError}\n                helper={helper}\n                icon={icon}\n                inputRef={mergeRefs(inputAnchorRef, inputRef) as any}\n                clearButtonProps={clearButtonProps}\n                isDisabled={isDisabled}\n                isRequired={isRequired}\n                isValid={isValid}\n                label={label}\n                name={name}\n                onBlur={onBlur}\n                onChange={onChange}\n                onFocus={onFocus}\n                placeholder={placeholder}\n                textFieldRef={textFieldRef}\n                theme={theme}\n                value={value}\n            />\n            <Dropdown\n                anchorRef={anchorToInput ? inputAnchorRef : textFieldRef}\n                closeOnClick={closeOnClick}\n                closeOnClickAway={closeOnClickAway}\n                closeOnEscape={closeOnEscape}\n                fitToAnchorWidth={fitToAnchorWidth}\n                isOpen={isOpen}\n                offset={offset}\n                onClose={onClose}\n                onInfiniteScroll={onInfiniteScroll}\n                placement={placement}\n                shouldFocusOnOpen={false}\n                theme={theme}\n            >\n                {children}\n            </Dropdown>\n        </div>\n    );\n});\nAutocomplete.displayName = COMPONENT_NAME;\nAutocomplete.className = CLASSNAME;\nAutocomplete.defaultProps = DEFAULT_PROPS;\n","import { mdiClose } from '@lumx/icons';\nimport { Autocomplete, AutocompleteProps, Chip, ChipGroup, HorizontalAlignment, Icon, Size } from '@lumx/react';\n\nimport { Comp, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\n\nimport classNames from 'classnames';\nimport React, { forwardRef, ReactNode } from 'react';\n\n/**\n * Defines the props of the component.\n */\nexport interface AutocompleteMultipleProps extends AutocompleteProps {\n    /** Selected values. */\n    values: any[];\n    /** Alignment of the chips in the autocomplete. */\n    chipsAlignment?: HorizontalAlignment;\n    /** Selected value render function. Default: Renders the value inside of a Chip. */\n    selectedChipRender(\n        choice: any,\n        index: number,\n        onClear?: (event: React.MouseEvent, choice: any) => void,\n        isDisabled?: boolean,\n    ): ReactNode | string;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'AutocompleteMultiple';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<AutocompleteMultipleProps> = {\n    closeOnClickAway: true,\n    closeOnEscape: true,\n    selectedChipRender(choice, index, onClear, isDisabled) {\n        const onClick = (event: React.MouseEvent) => onClear && onClear(event, choice);\n        return (\n            <Chip\n                key={index}\n                after={onClear && <Icon icon={mdiClose} size={Size.xxs} />}\n                isDisabled={isDisabled}\n                size={Size.s}\n                onAfterClick={onClick}\n                onClick={onClick}\n            >\n                {choice}\n            </Chip>\n        );\n    },\n    values: [],\n};\n\n/**\n * AutocompleteMultiple component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const AutocompleteMultiple: Comp<AutocompleteMultipleProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const {\n        anchorToInput,\n        children,\n        chipsAlignment,\n        className,\n        closeOnClickAway,\n        closeOnEscape,\n        fitToAnchorWidth,\n        hasError,\n        helper,\n        icon,\n        inputRef,\n        clearButtonProps,\n        isDisabled,\n        isRequired,\n        isOpen,\n        isValid,\n        label,\n        name,\n        offset,\n        onBlur,\n        onChange,\n        onClear,\n        onClose,\n        onFocus,\n        onInfiniteScroll,\n        onKeyDown,\n        placeholder,\n        placement,\n        selectedChipRender,\n        shouldFocusOnClose,\n        theme,\n        type,\n        value,\n        values,\n        ...forwardedProps\n    } = props;\n\n    return (\n        <Autocomplete\n            ref={ref}\n            {...forwardedProps}\n            anchorToInput={anchorToInput}\n            className={classNames(\n                className,\n                handleBasicClasses({\n                    prefix: CLASSNAME,\n                }),\n            )}\n            name={name}\n            value={value}\n            onChange={onChange}\n            onKeyDown={onKeyDown}\n            onBlur={onBlur}\n            shouldFocusOnClose={shouldFocusOnClose}\n            onFocus={onFocus}\n            hasError={hasError}\n            helper={helper}\n            icon={icon}\n            inputRef={inputRef}\n            chips={values && values.map((chip: any, index: number) => selectedChipRender(chip, index, onClear))}\n            isDisabled={isDisabled}\n            isRequired={isRequired}\n            clearButtonProps={clearButtonProps}\n            isValid={isValid}\n            label={label}\n            placeholder={placeholder}\n            theme={theme}\n            type={type}\n            isOpen={isOpen}\n            closeOnClick={false}\n            closeOnClickAway={closeOnClickAway}\n            closeOnEscape={closeOnEscape}\n            onClose={onClose}\n            offset={offset}\n            placement={placement}\n            fitToAnchorWidth={fitToAnchorWidth}\n            onInfiniteScroll={onInfiniteScroll}\n        >\n            {children}\n        </Autocomplete>\n    );\n});\nAutocompleteMultiple.displayName = COMPONENT_NAME;\nAutocompleteMultiple.className = CLASSNAME;\nAutocompleteMultiple.defaultProps = DEFAULT_PROPS;\n"]},"metadata":{},"sourceType":"module"}