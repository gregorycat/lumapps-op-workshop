{"ast":null,"code":"import { Orientation } from './components.js';\nimport { g as getRootClassName, a as _objectWithoutProperties, b as _extends, d as classnames, h as handleBasicClasses } from './getRootClassName.js';\nimport React, { forwardRef } from 'react';\nimport castArray from 'lodash/castArray';\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME = 'FlexBox';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME = getRootClassName(COMPONENT_NAME);\n/**\n * FlexBox component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar FlexBox = forwardRef(function (props, ref) {\n  var children = props.children,\n      className = props.className,\n      fillSpace = props.fillSpace,\n      gap = props.gap,\n      hAlign = props.hAlign,\n      marginAuto = props.marginAuto,\n      noShrink = props.noShrink,\n      orientation = props.orientation,\n      vAlign = props.vAlign,\n      wrap = props.wrap,\n      forwardedProps = _objectWithoutProperties(props, [\"children\", \"className\", \"fillSpace\", \"gap\", \"hAlign\", \"marginAuto\", \"noShrink\", \"orientation\", \"vAlign\", \"wrap\"]);\n\n  return React.createElement(\"div\", _extends({\n    ref: ref\n  }, forwardedProps, {\n    className: classnames(className, handleBasicClasses({\n      prefix: CLASSNAME,\n      orientation: orientation !== null && orientation !== void 0 ? orientation : wrap || hAlign || vAlign ? Orientation.horizontal : null,\n      vAlign: vAlign,\n      hAlign: hAlign,\n      gap: gap\n    }), wrap && \"\".concat(CLASSNAME, \"--wrap\"), fillSpace && \"\".concat(CLASSNAME, \"--fill-space\"), noShrink && \"\".concat(CLASSNAME, \"--no-shrink\"), marginAuto && castArray(marginAuto).map(function (align) {\n      return \"\".concat(CLASSNAME, \"--margin-auto-\").concat(align);\n    }))\n  }), children);\n});\nFlexBox.displayName = COMPONENT_NAME;\nFlexBox.className = CLASSNAME;\nexport { FlexBox as F };","map":{"version":3,"sources":["../../../src/components/flex-box/FlexBox.tsx"],"names":["COMPONENT_NAME","CLASSNAME","getRootClassName","FlexBox","forwardRef","children","className","fillSpace","gap","hAlign","marginAuto","noShrink","orientation","vAlign","wrap","forwardedProps","props","ref","classNames","handleBasicClasses","prefix","Orientation"],"mappings":";;;;AAkCA;;;;AAGA,IAAMA,cAAc,GAApB,SAAA;AAEA;;;;AAGA,IAAMC,SAAS,GAAGC,gBAAgB,CAAlC,cAAkC,CAAlC;AAEA;;;;;;;;IAOaC,OAA2C,GAAGC,UAAU,CAAC,UAAA,KAAA,EAAA,GAAA,EAAgB;AAAA,MAE9EC,QAF8E,GAa9EW,KAb8E,CAAA,QAAA;AAAA,MAG9EV,SAH8E,GAa9EU,KAb8E,CAAA,SAAA;AAAA,MAI9ET,SAJ8E,GAa9ES,KAb8E,CAAA,SAAA;AAAA,MAK9ER,GAL8E,GAa9EQ,KAb8E,CAAA,GAAA;AAAA,MAM9EP,MAN8E,GAa9EO,KAb8E,CAAA,MAAA;AAAA,MAO9EN,UAP8E,GAa9EM,KAb8E,CAAA,UAAA;AAAA,MAQ9EL,QAR8E,GAa9EK,KAb8E,CAAA,QAAA;AAAA,MAS9EJ,WAT8E,GAa9EI,KAb8E,CAAA,WAAA;AAAA,MAU9EH,MAV8E,GAa9EG,KAb8E,CAAA,MAAA;AAAA,MAW9EF,IAX8E,GAa9EE,KAb8E,CAAA,IAAA;AAAA,MAY3ED,cAZ2E,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,UAAA,EAAA,WAAA,EAAA,WAAA,EAAA,KAAA,EAAA,QAAA,EAAA,YAAA,EAAA,UAAA,EAAA,aAAA,EAAA,QAAA,EAAA,MAAA,CAAA,CAAA;;AAelF,SACI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA;AACI,IAAA,GAAG,EAAEE;AADT,GAAA,EAAA,cAAA,EAAA;AAGI,IAAA,SAAS,EAAEC,UAAU,CAAA,SAAA,EAEjBC,kBAAkB,CAAC;AACfC,MAAAA,MAAM,EADS,SAAA;AAEfR,MAAAA,WAAW,EAAEA,WAAF,KAAA,IAAEA,IAAAA,WAAF,KAAA,KAAA,CAAEA,GAAF,WAAEA,GAAgBE,IAAI,IAAJA,MAAAA,IAAAA,MAAAA,GAA2BO,WAAW,CAAtCP,UAAAA,GAFd,IAAA;AAGfD,MAAAA,MAAM,EAHS,MAAA;AAIfJ,MAAAA,MAAM,EAJS,MAAA;AAKfD,MAAAA,GAAG,EAAHA;AALe,KAAD,CAFD,EASjBM,IAAI,IAAA,GAAA,MAAA,CAAA,SAAA,EATa,QASb,CATa,EAUjBP,SAAS,IAAA,GAAA,MAAA,CAAA,SAAA,EAVQ,cAUR,CAVQ,EAWjBI,QAAQ,IAAA,GAAA,MAAA,CAAA,SAAA,EAXS,aAWT,CAXS,EAYjBD,UAAU,IAAI,SAAS,CAAT,UAAS,CAAT,CAAA,GAAA,CAA0B,UAAA,KAAA,EAAA;AAAA,aAAA,GAAA,MAAA,CAAA,SAAA,EAAA,gBAAA,EAAA,MAAA,CAAA,KAAA,CAAA;AAZvB,KAYH,CAZG;AAHzB,GAAA,CAAA,EADJ,QACI,CADJ;AAfiE,CAAA,C;AAsCrEP,OAAO,CAAPA,WAAAA,GAAAA,cAAAA;AACAA,OAAO,CAAPA,SAAAA,GAAAA,SAAAA","sourcesContent":["import { Alignment, HorizontalAlignment, Orientation, VerticalAlignment } from '@lumx/react';\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\nimport classNames from 'classnames';\nimport castArray from 'lodash/castArray';\nimport React, { forwardRef, ReactNode } from 'react';\nimport { Size } from '..';\n\nexport type MarginAutoAlignment = Extract<Alignment, 'top' | 'bottom' | 'right' | 'left'>;\nexport type GapSize = Extract<Size, 'regular' | 'big' | 'huge'>;\n\n/**\n * Defines the props of the component.\n */\nexport interface FlexBoxProps extends GenericProps {\n    /** Children elements. */\n    children?: ReactNode;\n    /** Whether the \"content filling space\" is enabled or not. */\n    fillSpace?: boolean;\n    /** Gap space between flexbox items. */\n    gap?: GapSize;\n    /** Flex horizontal alignment. */\n    hAlign?: VerticalAlignment;\n    /** Whether the \"auto margin\" is enabled all around or not. */\n    marginAuto?: MarginAutoAlignment | MarginAutoAlignment[];\n    /** Whether the \"content shrink\" is disabled or not. */\n    noShrink?: boolean;\n    /** Flex direction. */\n    orientation?: Orientation;\n    /** Flex vertical alignment. */\n    vAlign?: HorizontalAlignment;\n    /** Whether the \"flex wrap\" is enabled or not. */\n    wrap?: boolean;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'FlexBox';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * FlexBox component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const FlexBox: Comp<FlexBoxProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const {\n        children,\n        className,\n        fillSpace,\n        gap,\n        hAlign,\n        marginAuto,\n        noShrink,\n        orientation,\n        vAlign,\n        wrap,\n        ...forwardedProps\n    } = props;\n\n    return (\n        <div\n            ref={ref}\n            {...forwardedProps}\n            className={classNames(\n                className,\n                handleBasicClasses({\n                    prefix: CLASSNAME,\n                    orientation: orientation ?? (wrap || hAlign || vAlign ? Orientation.horizontal : null),\n                    vAlign,\n                    hAlign,\n                    gap,\n                }),\n                wrap && `${CLASSNAME}--wrap`,\n                fillSpace && `${CLASSNAME}--fill-space`,\n                noShrink && `${CLASSNAME}--no-shrink`,\n                marginAuto && castArray(marginAuto).map((align) => `${CLASSNAME}--margin-auto-${align}`),\n            )}\n        >\n            {children}\n        </div>\n    );\n});\nFlexBox.displayName = COMPONENT_NAME;\nFlexBox.className = CLASSNAME;\n"]},"metadata":{},"sourceType":"module"}