{"ast":null,"code":"import { Size, Emphasis, Theme } from './components.js';\nimport { g as getRootClassName, a as _objectWithoutProperties, b as _extends, d as classnames, h as handleBasicClasses, N as NOTIFICATION_TRANSITION_DURATION } from './getRootClassName.js';\nimport React, { forwardRef } from 'react';\nimport { m as mdiAlert, a as mdiInformation, b as mdiCheckCircle, c as mdiAlertCircle } from './mdi.js';\nimport { D as DOCUMENT } from './constants.js';\nimport { a as Button } from './Button2.js';\nimport isFunction from 'lodash/isFunction';\nimport { createPortal } from 'react-dom';\nimport { u as useDelayedVisibility } from './useDelayedVisibility.js';\nimport { I as Icon } from './Icon2.js';\n/**\n * Notification icon and colors according to their type.\n */\n\nvar NOTIFICATION_CONFIGURATION = {\n  error: {\n    color: 'red',\n    icon: mdiAlert\n  },\n  info: {\n    color: 'dark',\n    icon: mdiInformation\n  },\n  success: {\n    color: 'green',\n    icon: mdiCheckCircle\n  },\n  warning: {\n    color: 'yellow',\n    icon: mdiAlertCircle\n  }\n};\n/**\n * Defines the props of the component.\n */\n\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME = 'Notification';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME = getRootClassName(COMPONENT_NAME);\n/**\n * Component default props.\n */\n\nvar DEFAULT_PROPS = {\n  theme: Theme.light,\n  zIndex: 9999\n};\n/* eslint-disable react-hooks/rules-of-hooks, jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */\n\n/**\n * Notification component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar Notification = forwardRef(function (props, ref) {\n  var actionLabel = props.actionLabel,\n      className = props.className,\n      content = props.content,\n      isOpen = props.isOpen,\n      onActionClick = props.onActionClick,\n      onClick = props.onClick,\n      theme = props.theme,\n      type = props.type,\n      zIndex = props.zIndex,\n      forwardedProps = _objectWithoutProperties(props, [\"actionLabel\", \"className\", \"content\", \"isOpen\", \"onActionClick\", \"onClick\", \"theme\", \"type\", \"zIndex\"]);\n\n  if (!DOCUMENT) {\n    // Can't render in SSR.\n    return null;\n  }\n\n  var _ref = NOTIFICATION_CONFIGURATION[type] || {},\n      color = _ref.color,\n      icon = _ref.icon;\n\n  var isVisible = useDelayedVisibility(!!isOpen, NOTIFICATION_TRANSITION_DURATION);\n  var hasAction = Boolean(onActionClick) && Boolean(actionLabel);\n\n  var handleCallback = function handleCallback(evt) {\n    if (isFunction(onActionClick)) {\n      onActionClick();\n    }\n\n    evt.stopPropagation();\n  };\n\n  return type && isVisible ? createPortal(React.createElement(\"div\", _extends({\n    ref: ref,\n    role: \"alert\"\n  }, forwardedProps, {\n    className: classnames(className, handleBasicClasses({\n      color: color,\n      hasAction: hasAction,\n      isHidden: !isOpen,\n      prefix: CLASSNAME\n    })),\n    onClick: onClick,\n    style: {\n      zIndex: zIndex\n    }\n  }), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__icon\")\n  }, React.createElement(Icon, {\n    icon: icon,\n    size: Size.s\n  })), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__content\")\n  }, content), hasAction && React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__action\")\n  }, React.createElement(Button, {\n    emphasis: Emphasis.medium,\n    theme: theme,\n    onClick: handleCallback\n  }, React.createElement(\"span\", null, actionLabel)))), document.body) : null;\n});\nNotification.displayName = COMPONENT_NAME;\nNotification.className = CLASSNAME;\nNotification.defaultProps = DEFAULT_PROPS;\nexport { Notification as N };","map":{"version":3,"sources":["../../../src/components/notification/constants.ts","../../../src/components/notification/Notification.tsx"],"names":["NOTIFICATION_CONFIGURATION","error","color","icon","mdiAlert","info","mdiInformation","success","mdiCheckCircle","warning","mdiAlertCircle","COMPONENT_NAME","CLASSNAME","getRootClassName","DEFAULT_PROPS","theme","Theme","zIndex","Notification","forwardRef","actionLabel","className","content","isOpen","onActionClick","onClick","type","forwardedProps","props","isVisible","useDelayedVisibility","hasAction","Boolean","handleCallback","isFunction","evt","createPortal","classNames","handleBasicClasses","isHidden","prefix","Size","s","Emphasis","document"],"mappings":"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","sourcesContent":["import { mdiAlert, mdiAlertCircle, mdiCheckCircle, mdiInformation } from '@lumx/icons';\n\n/**\n * Notification delay before hiding.\n */\nexport const HIDE_DELAY = 6000;\n\n/**\n * Notification icon and colors according to their type.\n */\nexport const NOTIFICATION_CONFIGURATION = {\n    error: {\n        color: 'red',\n        icon: mdiAlert,\n    },\n    info: {\n        color: 'dark',\n        icon: mdiInformation,\n    },\n    success: {\n        color: 'green',\n        icon: mdiCheckCircle,\n    },\n    warning: {\n        color: 'yellow',\n        icon: mdiAlertCircle,\n    },\n};\n","import React, { forwardRef } from 'react';\nimport { createPortal } from 'react-dom';\n\nimport classNames from 'classnames';\n\nimport isFunction from 'lodash/isFunction';\n\nimport { Button, Emphasis, Icon, Kind, Size, Theme } from '@lumx/react';\n\nimport { DOCUMENT, NOTIFICATION_TRANSITION_DURATION } from '@lumx/react/constants';\nimport { NOTIFICATION_CONFIGURATION } from '@lumx/react/components/notification/constants';\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\n\nimport { useDelayedVisibility } from '@lumx/react/hooks/useDelayedVisibility';\n\n/**\n * Defines the props of the component.\n */\nexport interface NotificationProps extends GenericProps {\n    /** Action button label. */\n    actionLabel?: string;\n    /** Content. */\n    content?: React.ReactNode;\n    /** Whether the component is open or not. */\n    isOpen?: boolean;\n    /** Theme adapting the component to light or dark background. */\n    theme?: Theme;\n    /** Notification type. */\n    type?: Kind;\n    /** Z-axis position. */\n    zIndex?: number;\n    /** On action button click callback. */\n    onActionClick?(): void;\n    /** On click callback. */\n    onClick?(): void;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'Notification';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<NotificationProps> = {\n    theme: Theme.light,\n    zIndex: 9999,\n};\n\n/* eslint-disable react-hooks/rules-of-hooks, jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */\n/**\n * Notification component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const Notification: Comp<NotificationProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const {\n        actionLabel,\n        className,\n        content,\n        isOpen,\n        onActionClick,\n        onClick,\n        theme,\n        type,\n        zIndex,\n        ...forwardedProps\n    } = props;\n    if (!DOCUMENT) {\n        // Can't render in SSR.\n        return null;\n    }\n    const { color, icon } = NOTIFICATION_CONFIGURATION[type as Kind] || {};\n    const isVisible = useDelayedVisibility(!!isOpen, NOTIFICATION_TRANSITION_DURATION);\n    const hasAction: boolean = Boolean(onActionClick) && Boolean(actionLabel);\n\n    const handleCallback = (evt: React.MouseEvent) => {\n        if (isFunction(onActionClick)) {\n            onActionClick();\n        }\n        evt.stopPropagation();\n    };\n\n    return type && isVisible\n        ? createPortal(\n              <div\n                  ref={ref}\n                  role=\"alert\"\n                  {...forwardedProps}\n                  className={classNames(\n                      className,\n                      handleBasicClasses({\n                          color,\n                          hasAction,\n                          isHidden: !isOpen,\n                          prefix: CLASSNAME,\n                      }),\n                  )}\n                  onClick={onClick}\n                  style={{ zIndex }}\n              >\n                  <div className={`${CLASSNAME}__icon`}>\n                      <Icon icon={icon} size={Size.s} />\n                  </div>\n                  <div className={`${CLASSNAME}__content`}>{content}</div>\n                  {hasAction && (\n                      <div className={`${CLASSNAME}__action`}>\n                          <Button emphasis={Emphasis.medium} theme={theme} onClick={handleCallback}>\n                              <span>{actionLabel}</span>\n                          </Button>\n                      </div>\n                  )}\n              </div>,\n              document.body,\n          )\n        : null;\n});\nNotification.displayName = COMPONENT_NAME;\nNotification.className = CLASSNAME;\nNotification.defaultProps = DEFAULT_PROPS;\n"]},"metadata":{},"sourceType":"module"}