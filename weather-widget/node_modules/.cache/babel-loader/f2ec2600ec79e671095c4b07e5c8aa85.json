{"ast":null,"code":"import { useEffect } from 'react';\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n} // Older browsers don't support event options, feature detect it.\n// Adopted and modified solution from Bohdan Didukh (2017)\n// https://stackoverflow.com/questions/41594997/ios-10-safari-prevent-scrolling-behind-a-fixed-overlay-and-maintain-scroll-posi\n\n\nvar hasPassiveEvents = false;\n\nif (typeof window !== 'undefined') {\n  var passiveTestOptions = {\n    get passive() {\n      hasPassiveEvents = true;\n      return undefined;\n    }\n\n  };\n  window.addEventListener('testPassive', null, passiveTestOptions);\n  window.removeEventListener('testPassive', null, passiveTestOptions);\n}\n\nvar isIosDevice = typeof window !== 'undefined' && window.navigator && window.navigator.platform && (/iP(ad|hone|od)/.test(window.navigator.platform) || window.navigator.platform === 'MacIntel' && window.navigator.maxTouchPoints > 1);\nvar locks = [];\nvar documentListenerAdded = false;\nvar initialClientY = -1;\nvar previousBodyOverflowSetting = void 0;\nvar previousBodyPaddingRight = void 0; // returns true if `el` should be allowed to receive touchmove events.\n\nvar allowTouchMove = function allowTouchMove(el) {\n  return locks.some(function (lock) {\n    if (lock.options.allowTouchMove && lock.options.allowTouchMove(el)) {\n      return true;\n    }\n\n    return false;\n  });\n};\n\nvar preventDefault = function preventDefault(rawEvent) {\n  var e = rawEvent || window.event; // For the case whereby consumers adds a touchmove event listener to document.\n  // Recall that we do document.addEventListener('touchmove', preventDefault, { passive: false })\n  // in disableBodyScroll - so if we provide this opportunity to allowTouchMove, then\n  // the touchmove event on document will break.\n\n  if (allowTouchMove(e.target)) {\n    return true;\n  } // Do not prevent if the event has more than one touch (usually meaning this is a multi touch gesture like pinch to zoom).\n\n\n  if (e.touches.length > 1) return true;\n  if (e.preventDefault) e.preventDefault();\n  return false;\n};\n\nvar setOverflowHidden = function setOverflowHidden(options) {\n  // If previousBodyPaddingRight is already set, don't set it again.\n  if (previousBodyPaddingRight === undefined) {\n    var _reserveScrollBarGap = !!options && options.reserveScrollBarGap === true;\n\n    var scrollBarGap = window.innerWidth - document.documentElement.clientWidth;\n\n    if (_reserveScrollBarGap && scrollBarGap > 0) {\n      previousBodyPaddingRight = document.body.style.paddingRight;\n      document.body.style.paddingRight = scrollBarGap + 'px';\n    }\n  } // If previousBodyOverflowSetting is already set, don't set it again.\n\n\n  if (previousBodyOverflowSetting === undefined) {\n    previousBodyOverflowSetting = document.body.style.overflow;\n    document.body.style.overflow = 'hidden';\n  }\n};\n\nvar restoreOverflowSetting = function restoreOverflowSetting() {\n  if (previousBodyPaddingRight !== undefined) {\n    document.body.style.paddingRight = previousBodyPaddingRight; // Restore previousBodyPaddingRight to undefined so setOverflowHidden knows it\n    // can be set again.\n\n    previousBodyPaddingRight = undefined;\n  }\n\n  if (previousBodyOverflowSetting !== undefined) {\n    document.body.style.overflow = previousBodyOverflowSetting; // Restore previousBodyOverflowSetting to undefined\n    // so setOverflowHidden knows it can be set again.\n\n    previousBodyOverflowSetting = undefined;\n  }\n}; // https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight#Problems_and_solutions\n\n\nvar isTargetElementTotallyScrolled = function isTargetElementTotallyScrolled(targetElement) {\n  return targetElement ? targetElement.scrollHeight - targetElement.scrollTop <= targetElement.clientHeight : false;\n};\n\nvar handleScroll = function handleScroll(event, targetElement) {\n  var clientY = event.targetTouches[0].clientY - initialClientY;\n\n  if (allowTouchMove(event.target)) {\n    return false;\n  }\n\n  if (targetElement && targetElement.scrollTop === 0 && clientY > 0) {\n    // element is at the top of its scroll.\n    return preventDefault(event);\n  }\n\n  if (isTargetElementTotallyScrolled(targetElement) && clientY < 0) {\n    // element is at the bottom of its scroll.\n    return preventDefault(event);\n  }\n\n  event.stopPropagation();\n  return true;\n};\n\nvar disableBodyScroll = function disableBodyScroll(targetElement, options) {\n  // targetElement must be provided\n  if (!targetElement) {\n    // eslint-disable-next-line no-console\n    console.error('disableBodyScroll unsuccessful - targetElement must be provided when calling disableBodyScroll on IOS devices.');\n    return;\n  } // disableBodyScroll must not have been called on this targetElement before\n\n\n  if (locks.some(function (lock) {\n    return lock.targetElement === targetElement;\n  })) {\n    return;\n  }\n\n  var lock = {\n    targetElement: targetElement,\n    options: options || {}\n  };\n  locks = [].concat(_toConsumableArray(locks), [lock]);\n\n  if (isIosDevice) {\n    targetElement.ontouchstart = function (event) {\n      if (event.targetTouches.length === 1) {\n        // detect single touch.\n        initialClientY = event.targetTouches[0].clientY;\n      }\n    };\n\n    targetElement.ontouchmove = function (event) {\n      if (event.targetTouches.length === 1) {\n        // detect single touch.\n        handleScroll(event, targetElement);\n      }\n    };\n\n    if (!documentListenerAdded) {\n      document.addEventListener('touchmove', preventDefault, hasPassiveEvents ? {\n        passive: false\n      } : undefined);\n      documentListenerAdded = true;\n    }\n  } else {\n    setOverflowHidden(options);\n  }\n};\n\nvar enableBodyScroll = function enableBodyScroll(targetElement) {\n  if (!targetElement) {\n    // eslint-disable-next-line no-console\n    console.error('enableBodyScroll unsuccessful - targetElement must be provided when calling enableBodyScroll on IOS devices.');\n    return;\n  }\n\n  locks = locks.filter(function (lock) {\n    return lock.targetElement !== targetElement;\n  });\n\n  if (isIosDevice) {\n    targetElement.ontouchstart = null;\n    targetElement.ontouchmove = null;\n\n    if (documentListenerAdded && locks.length === 0) {\n      document.removeEventListener('touchmove', preventDefault, hasPassiveEvents ? {\n        passive: false\n      } : undefined);\n      documentListenerAdded = false;\n    }\n  } else if (!locks.length) {\n    restoreOverflowSetting();\n  }\n};\n/**\n * Disables the scroll on the body to make it only usable in the current modal element.\n * When the modal element is not provided anymore, the scroll is restored.\n *\n * @param modalElement The modal element.\n */\n\n\nvar useDisableBodyScroll = function useDisableBodyScroll(modalElement) {\n  useEffect(function () {\n    if (!modalElement) {\n      return undefined;\n    } // Fixing the document overflow style to prevent a bug that scrolls the window to the top.\n\n\n    var previousDocumentOverflow = document.documentElement.style.overflow;\n    document.documentElement.style.overflow = 'visible';\n    disableBodyScroll(modalElement);\n    return function () {\n      enableBodyScroll(modalElement); // Restore the previous overflow style.\n\n      requestAnimationFrame(function () {\n        document.documentElement.style.overflow = previousDocumentOverflow;\n      });\n    };\n  }, [modalElement]);\n};\n\nexport { useDisableBodyScroll as u };","map":{"version":3,"sources":["../../../../../node_modules/body-scroll-lock/lib/bodyScrollLock.esm.js","../../../src/hooks/useDisableBodyScroll.ts"],"names":["useDisableBodyScroll","useEffect","previousDocumentOverflow","document","disableBodyScroll","enableBodyScroll","requestAnimationFrame"],"mappings":"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","sourcesContent":["function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n// Older browsers don't support event options, feature detect it.\n\n// Adopted and modified solution from Bohdan Didukh (2017)\n// https://stackoverflow.com/questions/41594997/ios-10-safari-prevent-scrolling-behind-a-fixed-overlay-and-maintain-scroll-posi\n\nvar hasPassiveEvents = false;\nif (typeof window !== 'undefined') {\n  var passiveTestOptions = {\n    get passive() {\n      hasPassiveEvents = true;\n      return undefined;\n    }\n  };\n  window.addEventListener('testPassive', null, passiveTestOptions);\n  window.removeEventListener('testPassive', null, passiveTestOptions);\n}\n\nvar isIosDevice = typeof window !== 'undefined' && window.navigator && window.navigator.platform && (/iP(ad|hone|od)/.test(window.navigator.platform) || window.navigator.platform === 'MacIntel' && window.navigator.maxTouchPoints > 1);\n\n\nvar locks = [];\nvar documentListenerAdded = false;\nvar initialClientY = -1;\nvar previousBodyOverflowSetting = void 0;\nvar previousBodyPaddingRight = void 0;\n\n// returns true if `el` should be allowed to receive touchmove events.\nvar allowTouchMove = function allowTouchMove(el) {\n  return locks.some(function (lock) {\n    if (lock.options.allowTouchMove && lock.options.allowTouchMove(el)) {\n      return true;\n    }\n\n    return false;\n  });\n};\n\nvar preventDefault = function preventDefault(rawEvent) {\n  var e = rawEvent || window.event;\n\n  // For the case whereby consumers adds a touchmove event listener to document.\n  // Recall that we do document.addEventListener('touchmove', preventDefault, { passive: false })\n  // in disableBodyScroll - so if we provide this opportunity to allowTouchMove, then\n  // the touchmove event on document will break.\n  if (allowTouchMove(e.target)) {\n    return true;\n  }\n\n  // Do not prevent if the event has more than one touch (usually meaning this is a multi touch gesture like pinch to zoom).\n  if (e.touches.length > 1) return true;\n\n  if (e.preventDefault) e.preventDefault();\n\n  return false;\n};\n\nvar setOverflowHidden = function setOverflowHidden(options) {\n  // If previousBodyPaddingRight is already set, don't set it again.\n  if (previousBodyPaddingRight === undefined) {\n    var _reserveScrollBarGap = !!options && options.reserveScrollBarGap === true;\n    var scrollBarGap = window.innerWidth - document.documentElement.clientWidth;\n\n    if (_reserveScrollBarGap && scrollBarGap > 0) {\n      previousBodyPaddingRight = document.body.style.paddingRight;\n      document.body.style.paddingRight = scrollBarGap + 'px';\n    }\n  }\n\n  // If previousBodyOverflowSetting is already set, don't set it again.\n  if (previousBodyOverflowSetting === undefined) {\n    previousBodyOverflowSetting = document.body.style.overflow;\n    document.body.style.overflow = 'hidden';\n  }\n};\n\nvar restoreOverflowSetting = function restoreOverflowSetting() {\n  if (previousBodyPaddingRight !== undefined) {\n    document.body.style.paddingRight = previousBodyPaddingRight;\n\n    // Restore previousBodyPaddingRight to undefined so setOverflowHidden knows it\n    // can be set again.\n    previousBodyPaddingRight = undefined;\n  }\n\n  if (previousBodyOverflowSetting !== undefined) {\n    document.body.style.overflow = previousBodyOverflowSetting;\n\n    // Restore previousBodyOverflowSetting to undefined\n    // so setOverflowHidden knows it can be set again.\n    previousBodyOverflowSetting = undefined;\n  }\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight#Problems_and_solutions\nvar isTargetElementTotallyScrolled = function isTargetElementTotallyScrolled(targetElement) {\n  return targetElement ? targetElement.scrollHeight - targetElement.scrollTop <= targetElement.clientHeight : false;\n};\n\nvar handleScroll = function handleScroll(event, targetElement) {\n  var clientY = event.targetTouches[0].clientY - initialClientY;\n\n  if (allowTouchMove(event.target)) {\n    return false;\n  }\n\n  if (targetElement && targetElement.scrollTop === 0 && clientY > 0) {\n    // element is at the top of its scroll.\n    return preventDefault(event);\n  }\n\n  if (isTargetElementTotallyScrolled(targetElement) && clientY < 0) {\n    // element is at the bottom of its scroll.\n    return preventDefault(event);\n  }\n\n  event.stopPropagation();\n  return true;\n};\n\nexport var disableBodyScroll = function disableBodyScroll(targetElement, options) {\n  // targetElement must be provided\n  if (!targetElement) {\n    // eslint-disable-next-line no-console\n    console.error('disableBodyScroll unsuccessful - targetElement must be provided when calling disableBodyScroll on IOS devices.');\n    return;\n  }\n\n  // disableBodyScroll must not have been called on this targetElement before\n  if (locks.some(function (lock) {\n    return lock.targetElement === targetElement;\n  })) {\n    return;\n  }\n\n  var lock = {\n    targetElement: targetElement,\n    options: options || {}\n  };\n\n  locks = [].concat(_toConsumableArray(locks), [lock]);\n\n  if (isIosDevice) {\n    targetElement.ontouchstart = function (event) {\n      if (event.targetTouches.length === 1) {\n        // detect single touch.\n        initialClientY = event.targetTouches[0].clientY;\n      }\n    };\n    targetElement.ontouchmove = function (event) {\n      if (event.targetTouches.length === 1) {\n        // detect single touch.\n        handleScroll(event, targetElement);\n      }\n    };\n\n    if (!documentListenerAdded) {\n      document.addEventListener('touchmove', preventDefault, hasPassiveEvents ? { passive: false } : undefined);\n      documentListenerAdded = true;\n    }\n  } else {\n    setOverflowHidden(options);\n  }\n};\n\nexport var clearAllBodyScrollLocks = function clearAllBodyScrollLocks() {\n  if (isIosDevice) {\n    // Clear all locks ontouchstart/ontouchmove handlers, and the references.\n    locks.forEach(function (lock) {\n      lock.targetElement.ontouchstart = null;\n      lock.targetElement.ontouchmove = null;\n    });\n\n    if (documentListenerAdded) {\n      document.removeEventListener('touchmove', preventDefault, hasPassiveEvents ? { passive: false } : undefined);\n      documentListenerAdded = false;\n    }\n\n    // Reset initial clientY.\n    initialClientY = -1;\n  } else {\n    restoreOverflowSetting();\n  }\n\n  locks = [];\n};\n\nexport var enableBodyScroll = function enableBodyScroll(targetElement) {\n  if (!targetElement) {\n    // eslint-disable-next-line no-console\n    console.error('enableBodyScroll unsuccessful - targetElement must be provided when calling enableBodyScroll on IOS devices.');\n    return;\n  }\n\n  locks = locks.filter(function (lock) {\n    return lock.targetElement !== targetElement;\n  });\n\n  if (isIosDevice) {\n    targetElement.ontouchstart = null;\n    targetElement.ontouchmove = null;\n\n    if (documentListenerAdded && locks.length === 0) {\n      document.removeEventListener('touchmove', preventDefault, hasPassiveEvents ? { passive: false } : undefined);\n      documentListenerAdded = false;\n    }\n  } else if (!locks.length) {\n    restoreOverflowSetting();\n  }\n};\n\n","import { useEffect } from 'react';\nimport { disableBodyScroll, enableBodyScroll } from 'body-scroll-lock';\nimport { Falsy } from '@lumx/react/utils';\n\n/**\n * Disables the scroll on the body to make it only usable in the current modal element.\n * When the modal element is not provided anymore, the scroll is restored.\n *\n * @param modalElement The modal element.\n */\nexport const useDisableBodyScroll = (modalElement: Element | Falsy): void => {\n    useEffect(() => {\n        if (!modalElement) {\n            return undefined;\n        }\n        // Fixing the document overflow style to prevent a bug that scrolls the window to the top.\n        const previousDocumentOverflow = document.documentElement.style.overflow;\n        document.documentElement.style.overflow = 'visible';\n        disableBodyScroll(modalElement);\n        return () => {\n            enableBodyScroll(modalElement);\n            // Restore the previous overflow style.\n            requestAnimationFrame(() => {\n                document.documentElement.style.overflow = previousDocumentOverflow;\n            });\n        };\n    }, [modalElement]);\n};\n"]},"metadata":{},"sourceType":"module"}