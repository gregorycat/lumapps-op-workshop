{"ast":null,"code":"import { useEffect } from 'react';\nimport { D as DOCUMENT } from './constants.js';\n/**\n * Get first and last elements focusable in an element.\n *\n * @param parentElement The element in which to search focusable elements.\n * @return first and last focusable elements\n */\n\nfunction getFocusable(parentElement) {\n  var focusableElements = parentElement.querySelectorAll('a[href]:not([tabindex=\"-1\"]), button:not([tabindex=\"-1\"]), textarea:not([tabindex=\"-1\"]), input[type=\"text\"]:not([tabindex=\"-1\"]), input[type=\"radio\"]:not([tabindex=\"-1\"]), input[type=\"checkbox\"]:not([tabindex=\"-1\"]), [tabindex]:not([tabindex=\"-1\"])');\n\n  if (focusableElements.length <= 0) {\n    return {};\n  }\n\n  var first = focusableElements[0];\n  var last = focusableElements[focusableElements.length - 1];\n  return {\n    first: first,\n    last: last\n  };\n}\n/**\n * Add a key down event handler to the given root element (document.body by default) to trap the move of focus\n * (TAB and SHIFT-TAB keys) inside the given focusZoneElement.\n * Will focus the given focus element when activating the focus trap.\n *\n * @param focusZoneElement The element in which to trap the focus.\n * @param focusElement     The element to focus when the focus trap is activated.\n * @param rootElement      The element on which the key down event will be placed.\n */\n\n\nfunction useFocusTrap(focusZoneElement, focusElement) {\n  var rootElement = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DOCUMENT === null || DOCUMENT === void 0 ? void 0 : DOCUMENT.body;\n  useEffect(function () {\n    if (rootElement && focusZoneElement) {\n      var _ref;\n\n      (_ref = document.activeElement) === null || _ref === void 0 ? void 0 : _ref.blur();\n\n      if (focusElement) {\n        focusElement.focus();\n      }\n\n      var onKeyDown = function onKeyDown(evt) {\n        var key = evt.key;\n\n        if (key !== 'Tab') {\n          return;\n        }\n\n        var _getFocusable = getFocusable(focusZoneElement),\n            first = _getFocusable.first,\n            last = _getFocusable.last; // Prevent focus switch if no focusable available.\n\n\n        if (!first) {\n          evt.preventDefault();\n          return;\n        }\n\n        if (evt.shiftKey) {\n          if (document.activeElement === first) {\n            last === null || last === void 0 ? void 0 : last.focus();\n            evt.preventDefault();\n          }\n        } else if (document.activeElement === last) {\n          first === null || first === void 0 ? void 0 : first.focus();\n          evt.preventDefault();\n        }\n      };\n\n      rootElement.addEventListener('keydown', onKeyDown);\n      return function () {\n        return rootElement.removeEventListener('keydown', onKeyDown);\n      };\n    }\n\n    return undefined;\n  }, [focusElement, focusZoneElement, rootElement]);\n}\n\nexport { useFocusTrap as u };","map":{"version":3,"sources":["../../../src/hooks/useFocusTrap.ts"],"names":["focusableElements","parentElement","first","last","rootElement","DOCUMENT","body","useEffect","document","focusElement","onKeyDown","key","evt","getFocusable"],"mappings":";;AAIA;;;;;;;AAMA,SAAA,YAAA,CAAA,aAAA,EAAkD;AAC9C,MAAMA,iBAAiB,GAAGC,aAAa,CAAbA,gBAAAA,CAA1B,2PAA0BA,CAA1B;;AAIA,MAAID,iBAAiB,CAAjBA,MAAAA,IAAJ,CAAA,EAAmC;AAC/B,WAAA,EAAA;AACH;;AAED,MAAME,KAAK,GAAGF,iBAAiB,CAA/B,CAA+B,CAA/B;AACA,MAAMG,IAAI,GAAGH,iBAAiB,CAACA,iBAAiB,CAAjBA,MAAAA,GAA/B,CAA8B,CAA9B;AACA,SAAO;AAAEE,IAAAA,KAAK,EAAP,KAAA;AAASC,IAAAA,IAAI,EAAJA;AAAT,GAAP;AACH;AAED;;;;;;;;;;;AASO,SAAA,YAAA,CAAA,gBAAA,EAAA,YAAA,EAIC;AAAA,MADJC,WACI,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GADUC,QACV,KAAA,IADUA,IAAAA,QACV,KAAA,KAAA,CADUA,GACV,KAAA,CADUA,GAAAA,QAAQ,CAAEC,IACpB;AACJC,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIH,WAAW,IAAf,gBAAA,EAAqC;AAAA,UAAA,IAAA;;AACjC,OAAA,IAAA,GAACI,QAAQ,CAAT,aAAA,MAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,IAAA,CAAA,IAAA,EAAA;;AACA,UAAA,YAAA,EAAkB;AACdC,QAAAA,YAAY,CAAZA,KAAAA;AACH;;AAED,UAAMC,SAAS,GAAG,SAAZA,SAAY,CAAA,GAAA,EAAwB;AAAA,YAC9BC,GAD8B,GACtBC,GADsB,CAAA,GAAA;;AAEtC,YAAID,GAAG,KAAP,KAAA,EAAmB;AACf;AACH;;AAJqC,YAAA,aAAA,GAKdE,YAAY,CALE,gBAKF,CALE;AAAA,YAK9BX,KAL8B,GAAA,aAAA,CAAA,KAAA;AAAA,YAKvBC,IALuB,GAAA,aAAA,CAAA,IAAA,CAAA,CAAA;;;AAQtC,YAAI,CAAJ,KAAA,EAAY;AACRS,UAAAA,GAAG,CAAHA,cAAAA;AACA;AACH;;AAED,YAAIA,GAAG,CAAP,QAAA,EAAkB;AACd,cAAIJ,QAAQ,CAARA,aAAAA,KAAJ,KAAA,EAAsC;AAClCL,YAAAA,IAAI,KAAJA,IAAAA,IAAAA,IAAI,KAAA,KAAJA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,IAAI,CAAJA,KAAAA,EAAAA;AACAS,YAAAA,GAAG,CAAHA,cAAAA;AACH;AAJL,SAAA,MAKO,IAAIJ,QAAQ,CAARA,aAAAA,KAAJ,IAAA,EAAqC;AACxCN,UAAAA,KAAK,KAALA,IAAAA,IAAAA,KAAK,KAAA,KAALA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,KAAK,CAALA,KAAAA,EAAAA;AACAU,UAAAA,GAAG,CAAHA,cAAAA;AACH;AArBL,OAAA;;AAuBAR,MAAAA,WAAW,CAAXA,gBAAAA,CAAAA,SAAAA,EAAAA,SAAAA;AACA,aAAO,YAAA;AAAA,eAAMA,WAAW,CAAXA,mBAAAA,CAAAA,SAAAA,EAAN,SAAMA,CAAN;AAAP,OAAA;AACH;;AACD,WAAA,SAAA;AAjCK,GAAA,EAkCN,CAAA,YAAA,EAAA,gBAAA,EAlCHG,WAkCG,CAlCM,CAATA;AAmCH","sourcesContent":["import { useEffect } from 'react';\n\nimport { DOCUMENT } from '@lumx/react/constants';\n\n/**\n * Get first and last elements focusable in an element.\n *\n * @param parentElement The element in which to search focusable elements.\n * @return first and last focusable elements\n */\nfunction getFocusable(parentElement: HTMLElement) {\n    const focusableElements = parentElement.querySelectorAll<HTMLElement>(\n        'a[href]:not([tabindex=\"-1\"]), button:not([tabindex=\"-1\"]), textarea:not([tabindex=\"-1\"]), input[type=\"text\"]:not([tabindex=\"-1\"]), input[type=\"radio\"]:not([tabindex=\"-1\"]), input[type=\"checkbox\"]:not([tabindex=\"-1\"]), [tabindex]:not([tabindex=\"-1\"])',\n    );\n\n    if (focusableElements.length <= 0) {\n        return {};\n    }\n\n    const first = focusableElements[0];\n    const last = focusableElements[focusableElements.length - 1];\n    return { first, last };\n}\n\n/**\n * Add a key down event handler to the given root element (document.body by default) to trap the move of focus\n * (TAB and SHIFT-TAB keys) inside the given focusZoneElement.\n * Will focus the given focus element when activating the focus trap.\n *\n * @param focusZoneElement The element in which to trap the focus.\n * @param focusElement     The element to focus when the focus trap is activated.\n * @param rootElement      The element on which the key down event will be placed.\n */\nexport function useFocusTrap(\n    focusZoneElement: HTMLElement | null,\n    focusElement?: HTMLElement | null,\n    rootElement = DOCUMENT?.body,\n): void {\n    useEffect(() => {\n        if (rootElement && focusZoneElement) {\n            (document.activeElement as HTMLElement)?.blur();\n            if (focusElement) {\n                focusElement.focus();\n            }\n\n            const onKeyDown = (evt: KeyboardEvent) => {\n                const { key } = evt;\n                if (key !== 'Tab') {\n                    return;\n                }\n                const { first, last } = getFocusable(focusZoneElement);\n\n                // Prevent focus switch if no focusable available.\n                if (!first) {\n                    evt.preventDefault();\n                    return;\n                }\n\n                if (evt.shiftKey) {\n                    if (document.activeElement === first) {\n                        last?.focus();\n                        evt.preventDefault();\n                    }\n                } else if (document.activeElement === last) {\n                    first?.focus();\n                    evt.preventDefault();\n                }\n            };\n            rootElement.addEventListener('keydown', onKeyDown);\n            return () => rootElement.removeEventListener('keydown', onKeyDown);\n        }\n        return undefined;\n    }, [focusElement, focusZoneElement, rootElement]);\n}\n"]},"metadata":{},"sourceType":"module"}