{"ast":null,"code":"import { g as getRootClassName, a as _objectWithoutProperties, c as _objectSpread2, b as _extends, d as classnames, h as handleBasicClasses } from './getRootClassName.js';\nimport React, { useEffect, forwardRef, useRef, useMemo, cloneElement } from 'react';\nimport { i as isComponent } from './type.js';\nimport { a as Popover, P as Placement } from './Popover2.js';\nimport { L as List } from './List2.js'; // The error margin in px we want to have for triggering infinite scroll\n\nvar SCROLL_TRIGGER_MARGIN = 5;\n/**\n * Listen to clicks away from a given element and callback the passed in function.\n *\n * @param  ref               A reference to the element on which you want to listen scroll event.\n * @param  [callback]        A callback function to call when the bottom of the reference element is reached.\n * @param  [callbackOnMount] A callback function to call when the component is mounted.\n */\n\nvar useInfiniteScroll = function useInfiniteScroll(ref, callback) {\n  var callbackOnMount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var scrollTriggerMargin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : SCROLL_TRIGGER_MARGIN;\n  useEffect(function () {\n    var current = ref.current;\n\n    if (!callback || !current) {\n      return undefined;\n    }\n\n    var isAtBottom = function isAtBottom() {\n      return Boolean(current && current.scrollHeight - (current.scrollTop + current.clientHeight) <= scrollTriggerMargin);\n    };\n\n    var onScroll = function onScroll(e) {\n      if (isAtBottom()) {\n        callback(e);\n      }\n    };\n\n    if (isAtBottom()) {\n      onScroll();\n    }\n\n    current.addEventListener('scroll', onScroll);\n    current.addEventListener('resize', onScroll);\n    return function () {\n      current.removeEventListener('scroll', onScroll);\n      current.removeEventListener('resize', onScroll);\n    };\n  }, [ref, callback, scrollTriggerMargin]);\n  useEffect(function () {\n    if (callback && callbackOnMount) {\n      callback();\n    }\n  }, [callback, callbackOnMount]);\n};\n/**\n * Defines the props of the component.\n */\n\n/**\n * Component display name.\n */\n\n\nvar COMPONENT_NAME = 'Dropdown';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME = getRootClassName(COMPONENT_NAME);\n/**\n * Component default props.\n */\n\nvar DEFAULT_PROPS = {\n  closeOnClick: true,\n  closeOnClickAway: true,\n  closeOnEscape: true,\n  fitToAnchorWidth: true,\n  fitWithinViewportHeight: true,\n  placement: Placement.BOTTOM_START,\n  shouldFocusOnOpen: true\n};\n/**\n * Dropdown component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar Dropdown = forwardRef(function (props, ref) {\n  var anchorRef = props.anchorRef,\n      children = props.children,\n      className = props.className,\n      closeOnClick = props.closeOnClick,\n      closeOnClickAway = props.closeOnClickAway,\n      closeOnEscape = props.closeOnEscape,\n      fitToAnchorWidth = props.fitToAnchorWidth,\n      fitWithinViewportHeight = props.fitWithinViewportHeight,\n      isOpen = props.isOpen,\n      offset = props.offset,\n      onClose = props.onClose,\n      onInfiniteScroll = props.onInfiniteScroll,\n      placement = props.placement,\n      shouldFocusOnOpen = props.shouldFocusOnOpen,\n      zIndex = props.zIndex,\n      forwardedProps = _objectWithoutProperties(props, [\"anchorRef\", \"children\", \"className\", \"closeOnClick\", \"closeOnClickAway\", \"closeOnEscape\", \"fitToAnchorWidth\", \"fitWithinViewportHeight\", \"isOpen\", \"offset\", \"onClose\", \"onInfiniteScroll\", \"placement\", \"shouldFocusOnOpen\", \"zIndex\"]);\n\n  var innerRef = useRef(null);\n  var listElement = useRef(null);\n  useInfiniteScroll(innerRef, onInfiniteScroll);\n  var popperElement = useMemo(function () {\n    return !Array.isArray(children) && isComponent(List)(children) ? cloneElement(children, _objectSpread2({}, children.props, {\n      ref: listElement,\n      onClick: function onClick(evt) {\n        var _children$props$onCli, _children$props;\n\n        (_children$props$onCli = (_children$props = children.props).onClick) === null || _children$props$onCli === void 0 ? void 0 : _children$props$onCli.call(_children$props, evt);\n\n        if (closeOnClick) {\n          onClose === null || onClose === void 0 ? void 0 : onClose();\n        }\n      },\n      isClickable: true\n    })) : children;\n  }, [children, closeOnClick, onClose]);\n  return isOpen ? React.createElement(Popover, _extends({\n    ref: ref\n  }, forwardedProps, {\n    anchorRef: anchorRef,\n    className: classnames(className, handleBasicClasses({\n      prefix: CLASSNAME\n    })),\n    elevation: 0,\n    closeOnClickAway: closeOnClickAway,\n    closeOnEscape: closeOnEscape,\n    fitToAnchorWidth: fitToAnchorWidth,\n    fitWithinViewportHeight: fitWithinViewportHeight,\n    focusElement: shouldFocusOnOpen ? listElement : undefined,\n    isOpen: isOpen,\n    offset: offset,\n    onClose: onClose,\n    placement: placement,\n    zIndex: zIndex\n  }), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__menu\"),\n    ref: innerRef\n  }, popperElement)) : null;\n});\nDropdown.displayName = COMPONENT_NAME;\nDropdown.className = CLASSNAME;\nDropdown.defaultProps = DEFAULT_PROPS;\nexport { Dropdown as D };","map":{"version":3,"sources":["../../../src/hooks/useInfiniteScroll.tsx","../../../src/components/dropdown/Dropdown.tsx"],"names":["SCROLL_TRIGGER_MARGIN","useInfiniteScroll","callbackOnMount","scrollTriggerMargin","useEffect","current","ref","isAtBottom","Boolean","onScroll","callback","COMPONENT_NAME","CLASSNAME","getRootClassName","DEFAULT_PROPS","closeOnClick","closeOnClickAway","closeOnEscape","fitToAnchorWidth","fitWithinViewportHeight","placement","Placement","shouldFocusOnOpen","Dropdown","forwardRef","anchorRef","children","className","isOpen","offset","onClose","onInfiniteScroll","zIndex","forwardedProps","props","innerRef","useRef","listElement","popperElement","useMemo","Array","isComponent","cloneElement","onClick","isClickable","classNames","handleBasicClasses","prefix"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\n\ntype useInfiniteScrollType = (\n    ref: React.RefObject<HTMLElement>,\n    callback?: EventCallback,\n    callbackOnMount?: boolean,\n) => void;\ntype EventCallback = (evt?: Event) => void;\n\n// The error margin in px we want to have for triggering infinite scroll\nconst SCROLL_TRIGGER_MARGIN = 5;\n\n/**\n * Listen to clicks away from a given element and callback the passed in function.\n *\n * @param  ref               A reference to the element on which you want to listen scroll event.\n * @param  [callback]        A callback function to call when the bottom of the reference element is reached.\n * @param  [callbackOnMount] A callback function to call when the component is mounted.\n */\nexport const useInfiniteScroll: useInfiniteScrollType = (\n    ref,\n    callback,\n    callbackOnMount = false,\n    scrollTriggerMargin = SCROLL_TRIGGER_MARGIN,\n) => {\n    useEffect(() => {\n        const { current } = ref;\n        if (!callback || !current) {\n            return undefined;\n        }\n\n        const isAtBottom = () =>\n            Boolean(\n                current && current.scrollHeight - (current.scrollTop + current.clientHeight) <= scrollTriggerMargin,\n            );\n\n        const onScroll = (e?: Event): void => {\n            if (isAtBottom()) {\n                callback(e);\n            }\n        };\n\n        if (isAtBottom()) {\n            onScroll();\n        }\n\n        current.addEventListener('scroll', onScroll);\n        current.addEventListener('resize', onScroll);\n        return () => {\n            current.removeEventListener('scroll', onScroll);\n            current.removeEventListener('resize', onScroll);\n        };\n    }, [ref, callback, scrollTriggerMargin]);\n\n    useEffect(() => {\n        if (callback && callbackOnMount) {\n            callback();\n        }\n    }, [callback, callbackOnMount]);\n};\n","import React, { cloneElement, forwardRef, useMemo, useRef } from 'react';\n\nimport classNames from 'classnames';\n\nimport { List, ListProps } from '@lumx/react/components/list/List';\nimport { Offset, Placement, Popover } from '@lumx/react/components/popover/Popover';\nimport { useInfiniteScroll } from '@lumx/react/hooks/useInfiniteScroll';\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses, isComponent } from '@lumx/react/utils';\n\n/**\n * Defines the props of the component.\n */\nexport interface DropdownProps extends GenericProps {\n    /** Reference to the element around which the dropdown is placed.\n     * @see {@link PopoverProps#anchorRef}\n     */\n    anchorRef: React.RefObject<HTMLElement>;\n    /** Dropdown content. */\n    children: React.ReactNode;\n    /**\n     * Whether a click anywhere out of the Dropdown would close it or not.\n     * @see {@link PopoverProps#closeOnClickAway}\n     */\n    closeOnClickAway?: boolean;\n    /**\n     * Whether to close the Dropdown when clicking in it or not.\n     */\n    closeOnClick?: boolean;\n    /**\n     * Whether an escape key press would close the Dropdown or not.\n     * @see {@link PopoverProps#closeOnEscape}\n     */\n    closeOnEscape?: boolean;\n    /**\n     * Whether the dropdown should fit to the anchor width (if dropdown is smaller) or not.\n     * @see {@link PopoverProps#fitToAnchorWidth}\n     */\n    fitToAnchorWidth?: boolean;\n    /**\n     * Whether the dropdown should shrink to fit within the viewport height or not.\n     * @see {@link PopoverProps#fitWithinViewportHeight}\n     */\n    fitWithinViewportHeight?: boolean;\n    /**\n     * Whether the dropdown should be displayed or not. Useful to control the Dropdown from outside the component.\n     * @see {@link PopoverProps#isOpen}\n     */\n    isOpen: boolean;\n    /**\n     * Offset applied to the Dropdown position.\n     * @see {@link PopoverProps#offset}\n     */\n    offset?: Offset;\n    /**\n     * Preferred Dropdown placement against the anchor element.\n     * @see {@link PopoverProps#placement}\n     */\n    placement?: Placement;\n    /** Whether the focus should be set on the list when the dropdown is open or not. */\n    shouldFocusOnOpen?: boolean;\n    /**\n     * Z-axis position.\n     * @see {@link PopoverProps#zIndex}\n     */\n    zIndex?: number;\n    /**\n     * On close callback.\n     * @see {@link PopoverProps#onClose}\n     */\n    onClose?(): void;\n    /** On scroll end callback. */\n    onInfiniteScroll?(): void;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'Dropdown';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<DropdownProps> = {\n    closeOnClick: true,\n    closeOnClickAway: true,\n    closeOnEscape: true,\n    fitToAnchorWidth: true,\n    fitWithinViewportHeight: true,\n    placement: Placement.BOTTOM_START,\n    shouldFocusOnOpen: true,\n};\n\n/**\n * Dropdown component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const Dropdown: Comp<DropdownProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const {\n        anchorRef,\n        children,\n        className,\n        closeOnClick,\n        closeOnClickAway,\n        closeOnEscape,\n        fitToAnchorWidth,\n        fitWithinViewportHeight,\n        isOpen,\n        offset,\n        onClose,\n        onInfiniteScroll,\n        placement,\n        shouldFocusOnOpen,\n        zIndex,\n        ...forwardedProps\n    } = props;\n    const innerRef = useRef<HTMLDivElement>(null);\n    const listElement = useRef(null);\n\n    useInfiniteScroll(innerRef, onInfiniteScroll);\n\n    const popperElement = useMemo(() => {\n        return !Array.isArray(children) && isComponent(List)(children)\n            ? cloneElement<ListProps>(children, {\n                  ...children.props,\n                  ref: listElement,\n                  onClick(evt: MouseEvent) {\n                      children.props.onClick?.(evt);\n\n                      if (closeOnClick) {\n                          onClose?.();\n                      }\n                  },\n                  isClickable: true,\n              })\n            : children;\n    }, [children, closeOnClick, onClose]);\n\n    return isOpen ? (\n        <Popover\n            ref={ref}\n            {...forwardedProps}\n            anchorRef={anchorRef}\n            className={classNames(className, handleBasicClasses({ prefix: CLASSNAME }))}\n            elevation={0 as any}\n            closeOnClickAway={closeOnClickAway}\n            closeOnEscape={closeOnEscape}\n            fitToAnchorWidth={fitToAnchorWidth}\n            fitWithinViewportHeight={fitWithinViewportHeight}\n            focusElement={shouldFocusOnOpen ? listElement : undefined}\n            isOpen={isOpen}\n            offset={offset}\n            onClose={onClose}\n            placement={placement}\n            zIndex={zIndex}\n        >\n            <div className={`${CLASSNAME}__menu`} ref={innerRef}>\n                {popperElement}\n            </div>\n        </Popover>\n    ) : null;\n});\nDropdown.displayName = COMPONENT_NAME;\nDropdown.className = CLASSNAME;\nDropdown.defaultProps = DEFAULT_PROPS;\n"]},"metadata":{},"sourceType":"module"}