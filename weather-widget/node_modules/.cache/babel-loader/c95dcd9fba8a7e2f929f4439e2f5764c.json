{"ast":null,"code":"import { Size, Kind } from './components.js';\nimport { a as _objectWithoutProperties, f as _slicedToArray, c as _objectSpread2, i as _toConsumableArray, g as getRootClassName, b as _extends, d as classnames, h as handleBasicClasses, C as CSS_PREFIX } from './getRootClassName.js';\nimport React, { useReducer, useEffect, forwardRef, useCallback } from 'react';\nimport { b as mdiCheckCircle, c as mdiAlertCircle, k as mdiRadioboxMarked, l as mdiRadioboxBlank } from './mdi.js';\nimport { m as mergeRefs } from './mergeRefs.js';\nimport { I as Icon } from './Icon2.js';\nimport { I as InputHelper } from './InputHelper.js';\nimport { I as InputLabel } from './InputLabel.js';\nimport { r as reducer, I as INIT_STATE, T as TabProviderContext, u as useRovingTabIndex, a as useTabProviderContextState, b as useTabProviderContext } from './useRovingTabIndex.js';\nvar DEFAULT_PROPS = {\n  isLazy: INIT_STATE.isLazy,\n  shouldActivateOnFocus: INIT_STATE.shouldActivateOnFocus\n};\n/**\n * This component provides a context in which steps can be defined and linked to their step panel.\n *\n * It does not produce any markup so you can wrap it around any React elements and then split the ProgressTracker and ProgressTrackerPanel\n * components in the react tree.\n *\n * This works exactly as TabProvider so it uses TabProviderContext and tabs state.\n *\n * @param  props React component props.\n * @return React element.\n */\n\nvar ProgressTrackerProvider = function ProgressTrackerProvider(props) {\n  var children = props.children,\n      onChange = props.onChange,\n      propState = _objectWithoutProperties(props, [\"children\", \"onChange\"]);\n\n  var _useReducer = useReducer(reducer, INIT_STATE),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1]; // On prop state change => dispatch update.\n\n\n  useEffect(function () {\n    dispatch({\n      type: 'update',\n      payload: _objectSpread2({}, propState, {\n        activeTabIndex: propState.activeStepIndex || INIT_STATE.activeTabIndex\n      })\n    });\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [dispatch].concat(_toConsumableArray(Object.values(propState)))); // On active tab index state change => send update to the onChange.\n\n  useEffect(function () {\n    if (state === INIT_STATE || !onChange || propState.activeStepIndex === state.activeTabIndex) {\n      return;\n    }\n\n    onChange(state.activeTabIndex);\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [onChange, state.activeTabIndex]);\n  return React.createElement(TabProviderContext.Provider, {\n    value: [state, dispatch]\n  }, children);\n};\n\nProgressTrackerProvider.defaultProps = DEFAULT_PROPS;\n/**\n * Defines the props of the component.\n */\n\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME = 'ProgressTracker';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME = getRootClassName(COMPONENT_NAME);\n/**\n * Component default props.\n */\n\nvar DEFAULT_PROPS$1 = {};\n/**\n * ProgressTracker component.\n *\n * Implements WAI-ARIA `tablist` role {@see https://www.w3.org/TR/wai-aria-practices-1.1/examples/tabs/tabs-1/tabs.html#rps_label}\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar ProgressTracker = forwardRef(function (props, ref) {\n  var _state$ids, _state$ids$tab;\n\n  var ariaLabel = props['aria-label'],\n      children = props.children,\n      className = props.className,\n      forwardedProps = _objectWithoutProperties(props, [\"aria-label\", \"children\", \"className\"]);\n\n  var stepListRef = React.useRef(null);\n  useRovingTabIndex({\n    parentRef: stepListRef,\n    elementSelector: '[role=\"tab\"]',\n    keepTabIndex: false,\n    extraDependencies: [children]\n  });\n  var state = useTabProviderContextState();\n  var numberOfSteps = (state === null || state === void 0 ? void 0 : (_state$ids = state.ids) === null || _state$ids === void 0 ? void 0 : (_state$ids$tab = _state$ids.tab) === null || _state$ids$tab === void 0 ? void 0 : _state$ids$tab.length) || 0;\n  var backgroundPosition = numberOfSteps > 0 ? 100 / (numberOfSteps * 2) : 0;\n  var trackPosition = numberOfSteps > 0 ? 100 / (numberOfSteps - 1) * ((state === null || state === void 0 ? void 0 : state.activeTabIndex) || 0) / 100 : 0;\n  return React.createElement(\"div\", _extends({\n    ref: mergeRefs(ref, stepListRef)\n  }, forwardedProps, {\n    className: classnames(className, handleBasicClasses({\n      prefix: CLASSNAME\n    }))\n  }), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__steps\"),\n    role: \"tablist\",\n    \"aria-label\": ariaLabel\n  }, children), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__background-bar\"),\n    style: {\n      left: \"\".concat(backgroundPosition, \"%\"),\n      right: \"\".concat(backgroundPosition, \"%\")\n    }\n  }), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__foreground-bar\"),\n    style: {\n      left: \"\".concat(backgroundPosition, \"%\"),\n      right: \"\".concat(backgroundPosition, \"%\"),\n      transform: \"scaleX(\".concat(trackPosition, \")\")\n    }\n  }));\n});\nProgressTracker.displayName = COMPONENT_NAME;\nProgressTracker.className = CLASSNAME;\nProgressTracker.defaultProps = DEFAULT_PROPS$1;\n/**\n * Defines the props of the component.\n */\n\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME$1 = 'ProgressTrackerStep';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME$1 = getRootClassName(COMPONENT_NAME$1);\n/**\n * Component default props.\n */\n\nvar DEFAULT_PROPS$2 = {};\n/**\n * ProgressTrackerStep component.\n *\n * Implements WAI-ARIA `tab` role {@see https://www.w3.org/TR/wai-aria-practices-1.1/examples/tabs/tabs-1/tabs.html#rps_label}\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar ProgressTrackerStep = forwardRef(function (props, ref) {\n  var className = props.className,\n      disabled = props.disabled,\n      hasError = props.hasError,\n      helper = props.helper,\n      id = props.id,\n      propIsActive = props.isActive,\n      isComplete = props.isComplete,\n      _props$isDisabled = props.isDisabled,\n      isDisabled = _props$isDisabled === void 0 ? disabled : _props$isDisabled,\n      label = props.label,\n      onFocus = props.onFocus,\n      onKeyPress = props.onKeyPress,\n      _props$tabIndex = props.tabIndex,\n      tabIndex = _props$tabIndex === void 0 ? -1 : _props$tabIndex,\n      forwardedProps = _objectWithoutProperties(props, [\"className\", \"disabled\", \"hasError\", \"helper\", \"id\", \"isActive\", \"isComplete\", \"isDisabled\", \"label\", \"onFocus\", \"onKeyPress\", \"tabIndex\"]);\n\n  var state = useTabProviderContext('tab', id);\n  var isActive = propIsActive || (state === null || state === void 0 ? void 0 : state.isActive);\n  var changeToCurrentTab = useCallback(function () {\n    if (isDisabled) {\n      return;\n    }\n\n    state === null || state === void 0 ? void 0 : state.changeToTab();\n  }, [isDisabled, state]);\n  var handleFocus = useCallback(function (event) {\n    onFocus === null || onFocus === void 0 ? void 0 : onFocus(event);\n\n    if (state === null || state === void 0 ? void 0 : state.shouldActivateOnFocus) {\n      changeToCurrentTab();\n    }\n  }, [changeToCurrentTab, onFocus, state === null || state === void 0 ? void 0 : state.shouldActivateOnFocus]);\n  var handleKeyPress = useCallback(function (event) {\n    onKeyPress === null || onKeyPress === void 0 ? void 0 : onKeyPress(event);\n\n    if (event.key !== 'Enter') {\n      return;\n    }\n\n    changeToCurrentTab();\n  }, [changeToCurrentTab, onKeyPress]);\n\n  var getIcon = function getIcon() {\n    if (isComplete) {\n      return mdiCheckCircle;\n    }\n\n    if (isActive) {\n      return hasError ? mdiAlertCircle : mdiRadioboxMarked;\n    }\n\n    return mdiRadioboxBlank;\n  };\n\n  return React.createElement(\"button\", _extends({\n    ref: ref\n  }, forwardedProps, {\n    type: \"button\",\n    id: state === null || state === void 0 ? void 0 : state.tabId,\n    className: classnames(className, handleBasicClasses({\n      prefix: CLASSNAME$1,\n      hasError: hasError,\n      isActive: isActive,\n      isClickable: state && !isDisabled,\n      isComplete: isComplete\n    })),\n    onClick: changeToCurrentTab,\n    onKeyPress: handleKeyPress,\n    onFocus: handleFocus,\n    role: \"tab\",\n    tabIndex: isActive ? 0 : tabIndex,\n    \"aria-disabled\": isDisabled,\n    \"aria-selected\": isActive,\n    \"aria-controls\": state === null || state === void 0 ? void 0 : state.tabPanelId\n  }), React.createElement(Icon, {\n    className: \"\".concat(CLASSNAME$1, \"__state\"),\n    icon: getIcon(),\n    size: Size.s\n  }), React.createElement(InputLabel, {\n    htmlFor: (state === null || state === void 0 ? void 0 : state.tabId) || '',\n    className: \"\".concat(CLASSNAME$1, \"__label\")\n  }, label), helper && React.createElement(InputHelper, {\n    kind: hasError ? Kind.error : Kind.info,\n    className: \"\".concat(CLASSNAME$1, \"__helper\")\n  }, helper));\n});\nProgressTrackerStep.displayName = COMPONENT_NAME$1;\nProgressTrackerStep.className = CLASSNAME$1;\nProgressTrackerStep.defaultProps = DEFAULT_PROPS$2;\n/**\n * Defines the props of the component.\n */\n\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME$2 = 'ProgressTrackerStepPanel';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME$2 = \"\".concat(CSS_PREFIX, \"-step-panel\");\n/**\n * Component default props.\n */\n\nvar DEFAULT_PROPS$3 = {};\n/**\n * ProgressTrackerStepPanel component.\n *\n * Implements WAI-ARIA `tabpanel` role {@see https://www.w3.org/TR/wai-aria-practices-1.1/examples/tabs/tabs-1/tabs.html#rps_label}\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar ProgressTrackerStepPanel = forwardRef(function (props, ref) {\n  var children = props.children,\n      id = props.id,\n      className = props.className,\n      propIsActive = props.isActive,\n      forwardedProps = _objectWithoutProperties(props, [\"children\", \"id\", \"className\", \"isActive\"]);\n\n  var state = useTabProviderContext('tabPanel', id);\n  var isActive = propIsActive || (state === null || state === void 0 ? void 0 : state.isActive);\n  return React.createElement(\"div\", _extends({\n    ref: ref\n  }, forwardedProps, {\n    id: state === null || state === void 0 ? void 0 : state.tabPanelId,\n    className: classnames(className, handleBasicClasses({\n      prefix: CLASSNAME$2,\n      isActive: isActive\n    })),\n    role: \"tabpanel\",\n    tabIndex: 0,\n    \"aria-labelledby\": state === null || state === void 0 ? void 0 : state.tabId\n  }), (!(state === null || state === void 0 ? void 0 : state.isLazy) || isActive) && children);\n});\nProgressTrackerStepPanel.displayName = COMPONENT_NAME$2;\nProgressTrackerStepPanel.className = CLASSNAME$2;\nProgressTrackerStepPanel.defaultProps = DEFAULT_PROPS$3;\nexport { ProgressTrackerProvider as P, ProgressTracker as a, ProgressTrackerStep as b, ProgressTrackerStepPanel as c };","map":{"version":3,"sources":["../../../src/components/progress-tracker/ProgressTrackerProvider.tsx","../../../src/components/progress-tracker/ProgressTracker.tsx","../../../src/components/progress-tracker/ProgressTrackerStep.tsx","../../../src/components/progress-tracker/ProgressTrackerStepPanel.tsx"],"names":["DEFAULT_PROPS","isLazy","INIT_STATE","shouldActivateOnFocus","ProgressTrackerProvider","children","onChange","propState","props","state","dispatch","useReducer","useEffect","type","payload","activeTabIndex","Object","COMPONENT_NAME","CLASSNAME","getRootClassName","ProgressTracker","forwardRef","ariaLabel","className","forwardedProps","stepListRef","React","useRovingTabIndex","parentRef","elementSelector","keepTabIndex","extraDependencies","useTabProviderContextState","numberOfSteps","backgroundPosition","trackPosition","mergeRefs","classNames","handleBasicClasses","prefix","left","right","transform","ProgressTrackerStep","disabled","hasError","helper","id","propIsActive","isComplete","isDisabled","label","onFocus","onKeyPress","tabIndex","useTabProviderContext","isActive","changeToCurrentTab","useCallback","handleFocus","handleKeyPress","event","getIcon","ref","isClickable","tabPanelId","Size","s","Kind","ProgressTrackerStepPanel","tabId"],"mappings":"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","sourcesContent":["import React, { ReactNode, useEffect, useReducer } from 'react';\nimport { INIT_STATE, TabProviderContext, reducer } from '../tabs/state';\n\nexport interface ProgressTrackerProviderProps {\n    /** Active step index. */\n    activeStepIndex?: number;\n    /** ProgressTrackerProvider children. */\n    children: ReactNode;\n    /** Step panel children should not render if the step panel is hidden. */\n    isLazy?: boolean;\n    /** Activate tabs on focus. */\n    shouldActivateOnFocus?: boolean;\n    /** Step change callback. */\n    onChange?(index: number): void;\n}\n\nconst DEFAULT_PROPS: Partial<ProgressTrackerProviderProps> = {\n    isLazy: INIT_STATE.isLazy,\n    shouldActivateOnFocus: INIT_STATE.shouldActivateOnFocus,\n};\n\n/**\n * This component provides a context in which steps can be defined and linked to their step panel.\n *\n * It does not produce any markup so you can wrap it around any React elements and then split the ProgressTracker and ProgressTrackerPanel\n * components in the react tree.\n *\n * This works exactly as TabProvider so it uses TabProviderContext and tabs state.\n *\n * @param  props React component props.\n * @return React element.\n */\nexport const ProgressTrackerProvider: React.FC<ProgressTrackerProviderProps> = (props) => {\n    const { children, onChange, ...propState } = props;\n    const [state, dispatch] = useReducer(reducer, INIT_STATE);\n\n    // On prop state change => dispatch update.\n    useEffect(\n        () => {\n            dispatch({\n                type: 'update',\n                payload: {\n                    ...propState,\n                    activeTabIndex: propState.activeStepIndex || INIT_STATE.activeTabIndex,\n                },\n            });\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [dispatch, ...Object.values(propState)],\n    );\n\n    // On active tab index state change => send update to the onChange.\n    useEffect(\n        () => {\n            if (state === INIT_STATE || !onChange || propState.activeStepIndex === state.activeTabIndex) {\n                return;\n            }\n            onChange(state.activeTabIndex);\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [onChange, state.activeTabIndex],\n    );\n\n    return <TabProviderContext.Provider value={[state, dispatch]}>{children}</TabProviderContext.Provider>;\n};\nProgressTrackerProvider.defaultProps = DEFAULT_PROPS;\n","import React, { forwardRef, ReactNode } from 'react';\n\nimport classNames from 'classnames';\n\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\nimport { mergeRefs } from '@lumx/react/utils/mergeRefs';\nimport { useRovingTabIndex } from '../../hooks/useRovingTabIndex';\nimport { useTabProviderContextState } from '../tabs/state';\n\n/**\n * Defines the props of the component.\n */\nexport interface ProgressTrackerProps extends GenericProps {\n    /** ARIA label (purpose of the set of steps). */\n    ['aria-label']: string;\n    /** Step list. */\n    children: ReactNode;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'ProgressTracker';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<ProgressTrackerProps> = {};\n\n/**\n * ProgressTracker component.\n *\n * Implements WAI-ARIA `tablist` role {@see https://www.w3.org/TR/wai-aria-practices-1.1/examples/tabs/tabs-1/tabs.html#rps_label}\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const ProgressTracker: Comp<ProgressTrackerProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const { 'aria-label': ariaLabel, children, className, ...forwardedProps } = props;\n    const stepListRef = React.useRef(null);\n    useRovingTabIndex({\n        parentRef: stepListRef,\n        elementSelector: '[role=\"tab\"]',\n        keepTabIndex: false,\n        extraDependencies: [children],\n    });\n\n    const state = useTabProviderContextState();\n    const numberOfSteps = state?.ids?.tab?.length || 0;\n    const backgroundPosition: number = numberOfSteps > 0 ? 100 / (numberOfSteps * 2) : 0;\n    const trackPosition: number =\n        numberOfSteps > 0 ? ((100 / (numberOfSteps - 1)) * (state?.activeTabIndex || 0)) / 100 : 0;\n\n    return (\n        <div\n            ref={mergeRefs(ref, stepListRef)}\n            {...forwardedProps}\n            className={classNames(className, handleBasicClasses({ prefix: CLASSNAME }))}\n        >\n            <div className={`${CLASSNAME}__steps`} role=\"tablist\" aria-label={ariaLabel}>\n                {children}\n            </div>\n\n            <div\n                className={`${CLASSNAME}__background-bar`}\n                style={{ left: `${backgroundPosition}%`, right: `${backgroundPosition}%` }}\n            />\n\n            <div\n                className={`${CLASSNAME}__foreground-bar`}\n                style={{\n                    left: `${backgroundPosition}%`,\n                    right: `${backgroundPosition}%`,\n                    transform: `scaleX(${trackPosition})`,\n                }}\n            />\n        </div>\n    );\n});\nProgressTracker.displayName = COMPONENT_NAME;\nProgressTracker.className = CLASSNAME;\nProgressTracker.defaultProps = DEFAULT_PROPS;\n","import React, { FocusEventHandler, forwardRef, KeyboardEventHandler, useCallback } from 'react';\n\nimport classNames from 'classnames';\n\nimport { Icon, InputHelper, InputLabel, Kind, Size } from '@lumx/react';\n\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\n\nimport { mdiAlertCircle, mdiCheckCircle, mdiRadioboxBlank, mdiRadioboxMarked } from '@lumx/icons';\nimport { useTabProviderContext } from '../tabs/state';\n\n/**\n * Defines the props of the component.\n */\nexport interface ProgressTrackerStepProps extends GenericProps {\n    /** Children are not supported. */\n    children?: never;\n    /** Whether the step should be in error state or not. */\n    hasError?: boolean;\n    /** Helper text. */\n    helper?: string | null;\n    /** Native id property. */\n    id?: string;\n    /** Whether the current step is active or not. */\n    isActive?: boolean;\n    /** Whether the current step is completed or not. */\n    isComplete?: boolean;\n    /** Whether the component is disabled or not. */\n    isDisabled?: boolean;\n    /** Label text. */\n    label?: string | null;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'ProgressTrackerStep';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<ProgressTrackerStepProps> = {};\n\n/**\n * ProgressTrackerStep component.\n *\n * Implements WAI-ARIA `tab` role {@see https://www.w3.org/TR/wai-aria-practices-1.1/examples/tabs/tabs-1/tabs.html#rps_label}\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const ProgressTrackerStep: Comp<ProgressTrackerStepProps, HTMLButtonElement> = forwardRef((props, ref) => {\n    const {\n        className,\n        disabled,\n        hasError,\n        helper,\n        id,\n        isActive: propIsActive,\n        isComplete,\n        isDisabled = disabled,\n        label,\n        onFocus,\n        onKeyPress,\n        tabIndex = -1,\n        ...forwardedProps\n    } = props;\n    const state = useTabProviderContext('tab', id);\n    const isActive = propIsActive || state?.isActive;\n\n    const changeToCurrentTab = useCallback(() => {\n        if (isDisabled) {\n            return;\n        }\n        state?.changeToTab();\n    }, [isDisabled, state]);\n\n    const handleFocus: FocusEventHandler = useCallback(\n        (event) => {\n            onFocus?.(event);\n            if (state?.shouldActivateOnFocus) {\n                changeToCurrentTab();\n            }\n        },\n        [changeToCurrentTab, onFocus, state?.shouldActivateOnFocus],\n    );\n\n    const handleKeyPress: KeyboardEventHandler = useCallback(\n        (event) => {\n            onKeyPress?.(event);\n            if (event.key !== 'Enter') {\n                return;\n            }\n            changeToCurrentTab();\n        },\n        [changeToCurrentTab, onKeyPress],\n    );\n\n    const getIcon = (): string => {\n        if (isComplete) {\n            return mdiCheckCircle;\n        }\n\n        if (isActive) {\n            return hasError ? mdiAlertCircle : mdiRadioboxMarked;\n        }\n\n        return mdiRadioboxBlank;\n    };\n\n    return (\n        <button\n            ref={ref}\n            {...forwardedProps}\n            type=\"button\"\n            id={state?.tabId}\n            className={classNames(\n                className,\n                handleBasicClasses({\n                    prefix: CLASSNAME,\n                    hasError,\n                    isActive,\n                    isClickable: state && !isDisabled,\n                    isComplete,\n                }),\n            )}\n            onClick={changeToCurrentTab}\n            onKeyPress={handleKeyPress}\n            onFocus={handleFocus}\n            role=\"tab\"\n            tabIndex={isActive ? 0 : tabIndex}\n            aria-disabled={isDisabled}\n            aria-selected={isActive}\n            aria-controls={state?.tabPanelId}\n        >\n            <Icon className={`${CLASSNAME}__state`} icon={getIcon()} size={Size.s} />\n\n            <InputLabel htmlFor={state?.tabId || ''} className={`${CLASSNAME}__label`}>\n                {label}\n            </InputLabel>\n\n            {helper && (\n                <InputHelper kind={hasError ? Kind.error : Kind.info} className={`${CLASSNAME}__helper`}>\n                    {helper}\n                </InputHelper>\n            )}\n        </button>\n    );\n});\nProgressTrackerStep.displayName = COMPONENT_NAME;\nProgressTrackerStep.className = CLASSNAME;\nProgressTrackerStep.defaultProps = DEFAULT_PROPS;\n","import { useTabProviderContext } from '@lumx/react/components/tabs/state';\nimport { CSS_PREFIX } from '@lumx/react/constants';\nimport { Comp, GenericProps, handleBasicClasses } from '@lumx/react/utils';\n\nimport classNames from 'classnames';\nimport React, { forwardRef } from 'react';\n\n/**\n * Defines the props of the component.\n */\nexport interface ProgressTrackerStepPanelProps extends GenericProps {\n    /** Native id property. */\n    id?: string;\n    /** Whether the step is active or not. */\n    isActive?: boolean;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'ProgressTrackerStepPanel';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = `${CSS_PREFIX}-step-panel`;\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<ProgressTrackerStepPanelProps> = {};\n\n/**\n * ProgressTrackerStepPanel component.\n *\n * Implements WAI-ARIA `tabpanel` role {@see https://www.w3.org/TR/wai-aria-practices-1.1/examples/tabs/tabs-1/tabs.html#rps_label}\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const ProgressTrackerStepPanel: Comp<ProgressTrackerStepPanelProps, HTMLDivElement> = forwardRef(\n    (props, ref) => {\n        const { children, id, className, isActive: propIsActive, ...forwardedProps } = props;\n\n        const state = useTabProviderContext('tabPanel', id);\n        const isActive = propIsActive || state?.isActive;\n\n        return (\n            <div\n                ref={ref}\n                {...forwardedProps}\n                id={state?.tabPanelId}\n                className={classNames(className, handleBasicClasses({ prefix: CLASSNAME, isActive }))}\n                role=\"tabpanel\"\n                tabIndex={0}\n                aria-labelledby={state?.tabId}\n            >\n                {(!state?.isLazy || isActive) && children}\n            </div>\n        );\n    },\n);\nProgressTrackerStepPanel.displayName = COMPONENT_NAME;\nProgressTrackerStepPanel.className = CLASSNAME;\nProgressTrackerStepPanel.defaultProps = DEFAULT_PROPS;\n"]},"metadata":{},"sourceType":"module"}