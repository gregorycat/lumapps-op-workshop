{"ast":null,"code":"import { Theme } from './components.js';\nimport { g as getRootClassName, a as _objectWithoutProperties, b as _extends, d as classnames, h as handleBasicClasses } from './getRootClassName.js';\nimport React, { forwardRef, useMemo } from 'react';\nimport { u as uid } from '../index2.js';\nimport { I as InputHelper } from './InputHelper.js';\nimport { I as InputLabel } from './InputLabel.js';\n/**\n * Defines the props of the component.\n */\n\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME = 'RadioButton';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME = getRootClassName(COMPONENT_NAME);\n/**\n * Component default props.\n */\n\nvar DEFAULT_PROPS = {\n  theme: Theme.light\n};\n/**\n * RadioButton component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar RadioButton = forwardRef(function (props, ref) {\n  var checked = props.checked,\n      className = props.className,\n      disabled = props.disabled,\n      helper = props.helper,\n      id = props.id,\n      _props$isChecked = props.isChecked,\n      isChecked = _props$isChecked === void 0 ? checked : _props$isChecked,\n      _props$isDisabled = props.isDisabled,\n      isDisabled = _props$isDisabled === void 0 ? disabled : _props$isDisabled,\n      label = props.label,\n      name = props.name,\n      onChange = props.onChange,\n      theme = props.theme,\n      value = props.value,\n      forwardedProps = _objectWithoutProperties(props, [\"checked\", \"className\", \"disabled\", \"helper\", \"id\", \"isChecked\", \"isDisabled\", \"label\", \"name\", \"onChange\", \"theme\", \"value\"]);\n\n  var radioButtonId = useMemo(function () {\n    return id || \"\".concat(CLASSNAME.toLowerCase(), \"-\").concat(uid());\n  }, [id]);\n\n  var handleChange = function handleChange(event) {\n    if (onChange) {\n      onChange(value, name, event);\n    }\n  };\n\n  return React.createElement(\"div\", _extends({\n    ref: ref\n  }, forwardedProps, {\n    className: classnames(className, handleBasicClasses({\n      isChecked: isChecked,\n      isDisabled: isDisabled,\n      isUnchecked: !isChecked,\n      prefix: CLASSNAME,\n      theme: theme\n    }))\n  }), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__input-wrapper\")\n  }, React.createElement(\"input\", {\n    className: \"\".concat(CLASSNAME, \"__input-native\"),\n    disabled: isDisabled,\n    id: radioButtonId,\n    tabIndex: isDisabled ? -1 : 0,\n    type: \"radio\",\n    name: name,\n    value: value,\n    checked: isChecked,\n    onChange: handleChange\n  }), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__input-placeholder\")\n  }, React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__input-background\")\n  }), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__input-indicator\")\n  }))), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__content\")\n  }, label && React.createElement(InputLabel, {\n    htmlFor: radioButtonId,\n    theme: theme,\n    className: \"\".concat(CLASSNAME, \"__label\")\n  }, label), helper && React.createElement(InputHelper, {\n    theme: theme,\n    className: \"\".concat(CLASSNAME, \"__helper\")\n  }, helper)));\n});\nRadioButton.displayName = COMPONENT_NAME;\nRadioButton.className = CLASSNAME;\nRadioButton.defaultProps = DEFAULT_PROPS;\n/**\n * Defines the props of the component.\n */\n\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME$1 = 'RadioGroup';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME$1 = getRootClassName(COMPONENT_NAME$1);\n/**\n * RadioGroup component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar RadioGroup = forwardRef(function (props, ref) {\n  var children = props.children,\n      className = props.className,\n      forwardedProps = _objectWithoutProperties(props, [\"children\", \"className\"]);\n\n  return React.createElement(\"div\", _extends({\n    ref: ref\n  }, forwardedProps, {\n    className: classnames(className, handleBasicClasses({\n      prefix: CLASSNAME$1\n    }))\n  }), children);\n});\nRadioGroup.displayName = COMPONENT_NAME$1;\nRadioGroup.className = CLASSNAME$1;\nexport { RadioButton as R, RadioGroup as a };","map":{"version":3,"sources":["../../../src/components/radio-button/RadioButton.tsx","../../../src/components/radio-button/RadioGroup.tsx"],"names":["COMPONENT_NAME","CLASSNAME","getRootClassName","DEFAULT_PROPS","theme","Theme","light","RadioButton","forwardRef","checked","className","disabled","helper","id","isChecked","isDisabled","label","name","onChange","value","forwardedProps","props","radioButtonId","useMemo","uid","handleChange","ref","classNames","handleBasicClasses","isUnchecked","prefix","RadioGroup","children"],"mappings":"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","sourcesContent":["import React, { useMemo, forwardRef, ReactNode, SyntheticEvent } from 'react';\n\nimport classNames from 'classnames';\nimport { uid } from 'uid';\n\nimport { InputHelper, InputLabel, Theme } from '@lumx/react';\n\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\n\n/**\n * Defines the props of the component.\n */\nexport interface RadioButtonProps extends GenericProps {\n    /** Helper text. */\n    helper?: string;\n    /** Native input id property. */\n    id?: string;\n    /** Whether it is checked or not. */\n    isChecked?: boolean;\n    /** Whether the component is disabled or not. */\n    isDisabled?: boolean;\n    /** Label content. */\n    label?: ReactNode;\n    /** Native input name property. */\n    name?: string;\n    /** Theme adapting the component to light or dark background. */\n    theme?: Theme;\n    /** Native input value property. */\n    value?: string;\n    /** On change callback. */\n    onChange?(value?: string, name?: string, event?: SyntheticEvent): void;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'RadioButton';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<RadioButtonProps> = {\n    theme: Theme.light,\n};\n\n/**\n * RadioButton component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const RadioButton: Comp<RadioButtonProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const {\n        checked,\n        className,\n        disabled,\n        helper,\n        id,\n        isChecked = checked,\n        isDisabled = disabled,\n        label,\n        name,\n        onChange,\n        theme,\n        value,\n        ...forwardedProps\n    } = props;\n    const radioButtonId = useMemo(() => id || `${CLASSNAME.toLowerCase()}-${uid()}`, [id]);\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (onChange) {\n            onChange(value, name, event);\n        }\n    };\n\n    return (\n        <div\n            ref={ref}\n            {...forwardedProps}\n            className={classNames(\n                className,\n                handleBasicClasses({\n                    isChecked,\n                    isDisabled,\n                    isUnchecked: !isChecked,\n                    prefix: CLASSNAME,\n                    theme,\n                }),\n            )}\n        >\n            <div className={`${CLASSNAME}__input-wrapper`}>\n                <input\n                    className={`${CLASSNAME}__input-native`}\n                    disabled={isDisabled}\n                    id={radioButtonId}\n                    tabIndex={isDisabled ? -1 : 0}\n                    type=\"radio\"\n                    name={name}\n                    value={value}\n                    checked={isChecked}\n                    onChange={handleChange}\n                />\n\n                <div className={`${CLASSNAME}__input-placeholder`}>\n                    <div className={`${CLASSNAME}__input-background`} />\n                    <div className={`${CLASSNAME}__input-indicator`} />\n                </div>\n            </div>\n\n            <div className={`${CLASSNAME}__content`}>\n                {label && (\n                    <InputLabel htmlFor={radioButtonId} theme={theme} className={`${CLASSNAME}__label`}>\n                        {label}\n                    </InputLabel>\n                )}\n                {helper && (\n                    <InputHelper theme={theme} className={`${CLASSNAME}__helper`}>\n                        {helper}\n                    </InputHelper>\n                )}\n            </div>\n        </div>\n    );\n});\nRadioButton.displayName = COMPONENT_NAME;\nRadioButton.className = CLASSNAME;\nRadioButton.defaultProps = DEFAULT_PROPS;\n","import React, { forwardRef, ReactNode } from 'react';\n\nimport classNames from 'classnames';\n\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\n\n/**\n * Defines the props of the component.\n */\nexport interface RadioGroupProps extends GenericProps {\n    /** RadioButton elements */\n    children: ReactNode;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'RadioGroup';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * RadioGroup component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const RadioGroup: Comp<RadioGroupProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const { children, className, ...forwardedProps } = props;\n\n    return (\n        <div\n            ref={ref}\n            {...forwardedProps}\n            className={classNames(\n                className,\n                handleBasicClasses({\n                    prefix: CLASSNAME,\n                }),\n            )}\n        >\n            {children}\n        </div>\n    );\n});\nRadioGroup.displayName = COMPONENT_NAME;\nRadioGroup.className = CLASSNAME;\n"]},"metadata":{},"sourceType":"module"}