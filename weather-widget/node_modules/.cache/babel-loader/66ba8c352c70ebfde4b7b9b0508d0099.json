{"ast":null,"code":"import { Theme } from './components.js';\nimport { g as getRootClassName, a as _objectWithoutProperties, b as _extends, d as classnames, h as handleBasicClasses } from './getRootClassName.js';\nimport React, { forwardRef, useMemo } from 'react';\nimport { e as mdiCheck } from './mdi.js';\nimport { u as uid } from '../index2.js';\nimport { I as Icon } from './Icon2.js';\nimport { I as InputHelper } from './InputHelper.js';\nimport { I as InputLabel } from './InputLabel.js';\n/**\n * Defines the props of the component.\n */\n\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME = 'Checkbox';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME = getRootClassName(COMPONENT_NAME);\n/**\n * Component default props.\n */\n\nvar DEFAULT_PROPS = {\n  theme: Theme.light\n};\n/**\n * Checkbox component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar Checkbox = forwardRef(function (props, ref) {\n  var checked = props.checked,\n      className = props.className,\n      disabled = props.disabled,\n      helper = props.helper,\n      id = props.id,\n      _props$isChecked = props.isChecked,\n      isChecked = _props$isChecked === void 0 ? checked : _props$isChecked,\n      _props$isDisabled = props.isDisabled,\n      isDisabled = _props$isDisabled === void 0 ? disabled : _props$isDisabled,\n      label = props.label,\n      name = props.name,\n      onChange = props.onChange,\n      theme = props.theme,\n      value = props.value,\n      forwardedProps = _objectWithoutProperties(props, [\"checked\", \"className\", \"disabled\", \"helper\", \"id\", \"isChecked\", \"isDisabled\", \"label\", \"name\", \"onChange\", \"theme\", \"value\"]);\n\n  var inputId = useMemo(function () {\n    return id || \"\".concat(CLASSNAME.toLowerCase(), \"-\").concat(uid());\n  }, [id]);\n\n  var handleChange = function handleChange(event) {\n    if (onChange) {\n      onChange(!isChecked, value, name, event);\n    }\n  };\n\n  return React.createElement(\"div\", _extends({\n    ref: ref\n  }, forwardedProps, {\n    className: classnames(className, handleBasicClasses({\n      isChecked: isChecked,\n      isDisabled: isDisabled,\n      isUnchecked: !isChecked,\n      prefix: CLASSNAME,\n      theme: theme\n    }))\n  }), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__input-wrapper\")\n  }, React.createElement(\"input\", {\n    type: \"checkbox\",\n    id: inputId,\n    className: \"\".concat(CLASSNAME, \"__input-native\"),\n    tabIndex: isDisabled ? -1 : 0,\n    name: name,\n    value: value,\n    checked: isChecked,\n    onChange: handleChange\n  }), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__input-placeholder\")\n  }, React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__input-background\")\n  }), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__input-indicator\")\n  }, React.createElement(Icon, {\n    icon: mdiCheck\n  })))), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__content\")\n  }, label && React.createElement(InputLabel, {\n    htmlFor: inputId,\n    className: \"\".concat(CLASSNAME, \"__label\"),\n    theme: theme\n  }, label), helper && React.createElement(InputHelper, {\n    className: \"\".concat(CLASSNAME, \"__helper\"),\n    theme: theme\n  }, helper)));\n});\nCheckbox.displayName = COMPONENT_NAME;\nCheckbox.className = CLASSNAME;\nCheckbox.defaultProps = DEFAULT_PROPS;\nexport { Checkbox as C };","map":{"version":3,"sources":["../../../src/components/checkbox/Checkbox.tsx"],"names":["COMPONENT_NAME","CLASSNAME","getRootClassName","DEFAULT_PROPS","theme","Theme","light","Checkbox","forwardRef","checked","className","disabled","helper","id","isChecked","isDisabled","label","name","onChange","value","forwardedProps","props","inputId","useMemo","uid","handleChange","ref","classNames","handleBasicClasses","isUnchecked","prefix","mdiCheck"],"mappings":"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","sourcesContent":["import React, { useMemo, forwardRef, ReactNode, SyntheticEvent } from 'react';\n\nimport classNames from 'classnames';\nimport { uid } from 'uid';\n\nimport { mdiCheck } from '@lumx/icons';\n\nimport { Icon, InputHelper, InputLabel, Theme } from '@lumx/react';\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\n\n/**\n * Defines the props of the component.\n */\nexport interface CheckboxProps extends GenericProps {\n    /** Helper text. */\n    helper?: string;\n    /** Native input id property. */\n    id?: string;\n    /** Whether it is checked or not. */\n    isChecked?: boolean;\n    /** Whether the component is disabled or not. */\n    isDisabled?: boolean;\n    /** Label text. */\n    label?: ReactNode;\n    /** Native input name property. */\n    name?: string;\n    /** Theme adapting the component to light or dark background. */\n    theme?: Theme;\n    /** Native input value property. */\n    value?: string;\n    /** On change callback. */\n    onChange?(isChecked: boolean, value?: string, name?: string, event?: SyntheticEvent): void;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'Checkbox';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<CheckboxProps> = {\n    theme: Theme.light,\n};\n\n/**\n * Checkbox component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const Checkbox: Comp<CheckboxProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const {\n        checked,\n        className,\n        disabled,\n        helper,\n        id,\n        isChecked = checked,\n        isDisabled = disabled,\n        label,\n        name,\n        onChange,\n        theme,\n        value,\n        ...forwardedProps\n    } = props;\n    const inputId = useMemo(() => id || `${CLASSNAME.toLowerCase()}-${uid()}`, [id]);\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (onChange) {\n            onChange(!isChecked, value, name, event);\n        }\n    };\n\n    return (\n        <div\n            ref={ref}\n            {...forwardedProps}\n            className={classNames(\n                className,\n                handleBasicClasses({\n                    isChecked,\n                    isDisabled,\n                    isUnchecked: !isChecked,\n                    prefix: CLASSNAME,\n                    theme,\n                }),\n            )}\n        >\n            <div className={`${CLASSNAME}__input-wrapper`}>\n                <input\n                    type=\"checkbox\"\n                    id={inputId}\n                    className={`${CLASSNAME}__input-native`}\n                    tabIndex={isDisabled ? -1 : 0}\n                    name={name}\n                    value={value}\n                    checked={isChecked}\n                    onChange={handleChange}\n                />\n\n                <div className={`${CLASSNAME}__input-placeholder`}>\n                    <div className={`${CLASSNAME}__input-background`} />\n\n                    <div className={`${CLASSNAME}__input-indicator`}>\n                        <Icon icon={mdiCheck} />\n                    </div>\n                </div>\n            </div>\n\n            <div className={`${CLASSNAME}__content`}>\n                {label && (\n                    <InputLabel htmlFor={inputId} className={`${CLASSNAME}__label`} theme={theme}>\n                        {label}\n                    </InputLabel>\n                )}\n                {helper && (\n                    <InputHelper className={`${CLASSNAME}__helper`} theme={theme}>\n                        {helper}\n                    </InputHelper>\n                )}\n            </div>\n        </div>\n    );\n});\nCheckbox.displayName = COMPONENT_NAME;\nCheckbox.className = CLASSNAME;\nCheckbox.defaultProps = DEFAULT_PROPS;\n"]},"metadata":{},"sourceType":"module"}