{"ast":null,"code":"import { Size, Theme } from './components.js';\nimport { g as getRootClassName, a as _objectWithoutProperties, b as _extends, d as classnames, h as handleBasicClasses } from './getRootClassName.js';\nimport React, { forwardRef, Children } from 'react';\nimport { A as Avatar } from './Avatar2.js';\nimport isFunction from 'lodash/isFunction';\n/**\n * Comment block variants.\n */\n\nvar CommentBlockVariant = {\n  indented: 'indented',\n  linear: 'linear'\n};\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME = 'CommentBlock';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME = getRootClassName(COMPONENT_NAME);\n/**\n * Component default props.\n */\n\nvar DEFAULT_PROPS = {\n  theme: Theme.light,\n  variant: CommentBlockVariant.indented\n};\n/**\n * CommentBlock component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar CommentBlock = forwardRef(function (props, ref) {\n  var actions = props.actions,\n      avatarProps = props.avatarProps,\n      children = props.children,\n      className = props.className,\n      date = props.date,\n      hasActions = props.hasActions,\n      headerActions = props.headerActions,\n      isOpen = props.isOpen,\n      isRelevant = props.isRelevant,\n      name = props.name,\n      onClick = props.onClick,\n      onMouseEnter = props.onMouseEnter,\n      onMouseLeave = props.onMouseLeave,\n      text = props.text,\n      theme = props.theme,\n      variant = props.variant,\n      forwardedProps = _objectWithoutProperties(props, [\"actions\", \"avatarProps\", \"children\", \"className\", \"date\", \"hasActions\", \"headerActions\", \"isOpen\", \"isRelevant\", \"name\", \"onClick\", \"onMouseEnter\", \"onMouseLeave\", \"text\", \"theme\", \"variant\"]);\n\n  var enterKeyPress = function enterKeyPress(evt) {\n    if (evt.key === 'Enter' && isFunction(onClick)) {\n      onClick();\n    }\n  };\n\n  var hasChildren = Children.count(children) > 0;\n  return React.createElement(\"div\", _extends({\n    ref: ref,\n    className: classnames(className, handleBasicClasses({\n      hasChildren: hasChildren && isOpen,\n      hasIndentedChildren: hasChildren && variant === CommentBlockVariant.indented,\n      hasLinearChildren: hasChildren && variant === CommentBlockVariant.linear,\n      isRelevant: isRelevant,\n      prefix: CLASSNAME,\n      theme: theme\n    }))\n  }, forwardedProps), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__wrapper\")\n  }, React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__avatar\")\n  }, React.createElement(Avatar, _extends({}, avatarProps, {\n    size: Size.m,\n    tabIndex: onClick ? 0 : -1,\n    onClick: onClick,\n    onKeyPress: enterKeyPress\n  }))), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__container\")\n  }, React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__content\")\n  }, React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__meta\")\n  }, React.createElement(\"span\", {\n    className: \"\".concat(CLASSNAME, \"__name\"),\n    onClick: onClick,\n    onKeyPress: enterKeyPress,\n    onMouseEnter: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    role: \"button\",\n    tabIndex: onClick ? 0 : -1\n  }, name), date && React.createElement(\"span\", {\n    className: \"\".concat(CLASSNAME, \"__date\")\n  }, date), headerActions && React.createElement(\"span\", {\n    className: \"\".concat(CLASSNAME, \"__header-actions\")\n  }, headerActions)), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__text\")\n  }, text)), hasActions && React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__actions\")\n  }, actions))), hasChildren && isOpen && React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__children\")\n  }, children));\n});\nCommentBlock.displayName = COMPONENT_NAME;\nCommentBlock.className = CLASSNAME;\nCommentBlock.defaultProps = DEFAULT_PROPS;\nexport { CommentBlockVariant as C, CommentBlock as a };","map":{"version":3,"sources":["../../../src/components/comment-block/CommentBlock.tsx"],"names":["CommentBlockVariant","indented","linear","COMPONENT_NAME","CLASSNAME","getRootClassName","DEFAULT_PROPS","theme","Theme","variant","CommentBlock","forwardRef","actions","avatarProps","children","className","date","hasActions","headerActions","isOpen","isRelevant","name","onClick","onMouseEnter","onMouseLeave","text","forwardedProps","props","enterKeyPress","evt","isFunction","hasChildren","Children","classNames","handleBasicClasses","hasIndentedChildren","hasLinearChildren","prefix","Size"],"mappings":"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","sourcesContent":["import React, { Children, forwardRef, KeyboardEvent, KeyboardEventHandler, ReactNode } from 'react';\n\nimport classNames from 'classnames';\n\nimport { Avatar, Size, Theme } from '@lumx/react';\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses, ValueOf } from '@lumx/react/utils';\n\nimport isFunction from 'lodash/isFunction';\nimport { AvatarProps } from '../avatar/Avatar';\n\n/**\n * Comment block variants.\n */\nexport const CommentBlockVariant = {\n    indented: 'indented',\n    linear: 'linear',\n} as const;\nexport type CommentBlockVariant = ValueOf<typeof CommentBlockVariant>;\n\n/**\n * Defines the props of the component.\n */\nexport interface CommentBlockProps extends GenericProps {\n    /** Action toolbar content. */\n    actions?: ReactNode;\n    /** Props to pass to the avatar. */\n    avatarProps: AvatarProps;\n    /** Comment block replies. */\n    children?: ReactNode;\n    /** Comment date. */\n    date: string;\n    /** Whether the component has actions to display or not. */\n    hasActions?: boolean;\n    /** Action toolbar header content. */\n    headerActions?: ReactNode;\n    /** Whether the component is open or not. */\n    isOpen?: boolean;\n    /** Whether the comment is relevant or not. */\n    isRelevant?: boolean;\n    /** Comment author name. */\n    name: string;\n    /** On click callback. */\n    onClick?(): void;\n    /** On mouse enter callback. */\n    onMouseEnter?(): void;\n    /** On mouse leave callback. */\n    onMouseLeave?(): void;\n    /** Comment content. */\n    text: ReactNode | string;\n    /** Theme adapting the component to light or dark background. */\n    theme?: Theme;\n    /** Comment variant. */\n    variant?: CommentBlockVariant;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'CommentBlock';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<CommentBlockProps> = {\n    theme: Theme.light,\n    variant: CommentBlockVariant.indented,\n};\n\n/**\n * CommentBlock component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const CommentBlock: Comp<CommentBlockProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const {\n        actions,\n        avatarProps,\n        children,\n        className,\n        date,\n        hasActions,\n        headerActions,\n        isOpen,\n        isRelevant,\n        name,\n        onClick,\n        onMouseEnter,\n        onMouseLeave,\n        text,\n        theme,\n        variant,\n        ...forwardedProps\n    } = props;\n    const enterKeyPress: KeyboardEventHandler<HTMLElement> = (evt: KeyboardEvent<HTMLElement>) => {\n        if (evt.key === 'Enter' && isFunction(onClick)) {\n            onClick();\n        }\n    };\n    const hasChildren = Children.count(children) > 0;\n\n    return (\n        <div\n            ref={ref}\n            className={classNames(\n                className,\n                handleBasicClasses({\n                    hasChildren: hasChildren && isOpen,\n                    hasIndentedChildren: hasChildren && variant === CommentBlockVariant.indented,\n                    hasLinearChildren: hasChildren && variant === CommentBlockVariant.linear,\n                    isRelevant,\n                    prefix: CLASSNAME,\n                    theme,\n                }),\n            )}\n            {...forwardedProps}\n        >\n            <div className={`${CLASSNAME}__wrapper`}>\n                <div className={`${CLASSNAME}__avatar`}>\n                    <Avatar\n                        {...avatarProps}\n                        size={Size.m}\n                        tabIndex={onClick ? 0 : -1}\n                        onClick={onClick}\n                        onKeyPress={enterKeyPress}\n                    />\n                </div>\n\n                <div className={`${CLASSNAME}__container`}>\n                    <div className={`${CLASSNAME}__content`}>\n                        <div className={`${CLASSNAME}__meta`}>\n                            <span\n                                className={`${CLASSNAME}__name`}\n                                onClick={onClick}\n                                onKeyPress={enterKeyPress}\n                                onMouseEnter={onMouseEnter}\n                                onMouseLeave={onMouseLeave}\n                                role=\"button\"\n                                tabIndex={onClick ? 0 : -1}\n                            >\n                                {name}\n                            </span>\n                            {date && <span className={`${CLASSNAME}__date`}>{date}</span>}\n                            {headerActions && <span className={`${CLASSNAME}__header-actions`}>{headerActions}</span>}\n                        </div>\n\n                        <div className={`${CLASSNAME}__text`}>{text}</div>\n                    </div>\n                    {hasActions && <div className={`${CLASSNAME}__actions`}>{actions}</div>}\n                </div>\n            </div>\n\n            {hasChildren && isOpen && <div className={`${CLASSNAME}__children`}>{children}</div>}\n        </div>\n    );\n});\nCommentBlock.displayName = COMPONENT_NAME;\nCommentBlock.className = CLASSNAME;\nCommentBlock.defaultProps = DEFAULT_PROPS;\n"]},"metadata":{},"sourceType":"module"}