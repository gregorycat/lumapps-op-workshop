{"ast":null,"code":"/**\n * Alignments.\n */\nvar Alignment = {\n  bottom: 'bottom',\n  center: 'center',\n  end: 'end',\n  left: 'left',\n  right: 'right',\n  spaceAround: 'space-around',\n  spaceBetween: 'space-between',\n  start: 'start',\n  top: 'top'\n};\n/**\n * See SCSS variable $lumx-color-palette\n */\n\nvar ColorPalette = {\n  primary: 'primary',\n  secondary: 'secondary',\n  blue: 'blue',\n  dark: 'dark',\n  green: 'green',\n  yellow: 'yellow',\n  red: 'red',\n  light: 'light',\n  grey: 'grey'\n};\n/**\n * See SCSS variable $lumx-color-variants\n */\n\nvar ColorVariant = {\n  D1: 'D1',\n  D2: 'D2',\n  L1: 'L1',\n  L2: 'L2',\n  L3: 'L3',\n  L4: 'L4',\n  L5: 'L5',\n  L6: 'L6',\n  N: 'N'\n};\nvar Theme = {\n  light: 'light',\n  dark: 'dark'\n};\nvar Size = {\n  xxs: 'xxs',\n  xs: 'xs',\n  s: 's',\n  m: 'm',\n  l: 'l',\n  xl: 'xl',\n  xxl: 'xxl',\n  tiny: 'tiny',\n  regular: 'regular',\n  big: 'big',\n  huge: 'huge'\n};\nvar Orientation = {\n  horizontal: 'horizontal',\n  vertical: 'vertical'\n};\nvar Emphasis = {\n  low: 'low',\n  medium: 'medium',\n  high: 'high'\n};\n/**\n * List of typographies.\n */\n\nvar Typography = {\n  overline: 'overline',\n  caption: 'caption',\n  body1: 'body1',\n  body2: 'body2',\n  subtitle1: 'subtitle1',\n  subtitle2: 'subtitle2',\n  title: 'title',\n  headline: 'headline',\n  display1: 'display1'\n};\n/**\n * All available aspect ratios.\n */\n\nvar AspectRatio = {\n  /** Intrinsic content ratio. */\n  original: 'original',\n\n  /** Ratio 16:9 */\n  wide: 'wide',\n\n  /** Ratio 3:2 */\n  horizontal: 'horizontal',\n\n  /** Ratio 3:2 */\n  vertical: 'vertical',\n\n  /** Ratio 1:1 */\n  square: 'square',\n\n  /** Ratio constrained by the parent. */\n  free: 'free'\n};\n/**\n * Semantic info about the purpose of the component\n */\n\nvar Kind = {\n  info: 'info',\n  success: 'success',\n  warning: 'warning',\n  error: 'error'\n};\nexport { Alignment, AspectRatio, ColorPalette, ColorVariant, Emphasis, Kind, Orientation, Size, Theme, Typography };","map":{"version":3,"sources":["../../../src/components/index.ts"],"names":["Alignment","bottom","center","end","left","right","spaceAround","spaceBetween","start","top","ColorPalette","primary","secondary","blue","dark","green","yellow","red","light","grey","ColorVariant","D1","D2","L1","L2","L3","L4","L5","L6","N","Theme","Size","xxs","xs","s","m","l","xl","xxl","tiny","regular","big","huge","Orientation","horizontal","vertical","Emphasis","low","medium","high","Typography","overline","caption","body1","body2","subtitle1","subtitle2","title","headline","display1","AspectRatio","original","wide","square","free","Kind","info","success","warning","error"],"mappings":"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","sourcesContent":["import { ValueOf } from '@lumx/react/utils';\n\n/**\n * Alignments.\n */\nexport const Alignment = {\n    bottom: 'bottom',\n    center: 'center',\n    end: 'end',\n    left: 'left',\n    right: 'right',\n    spaceAround: 'space-around',\n    spaceBetween: 'space-between',\n    start: 'start',\n    top: 'top',\n} as const;\nexport type Alignment = ValueOf<typeof Alignment>;\nexport type VerticalAlignment = Extract<Alignment, 'top' | 'center' | 'bottom'>;\nexport type HorizontalAlignment = Extract<Alignment, 'right' | 'center' | 'left'>;\n\n/**\n * See SCSS variable $lumx-color-palette\n */\nexport const ColorPalette = {\n    primary: 'primary',\n    secondary: 'secondary',\n    blue: 'blue',\n    dark: 'dark',\n    green: 'green',\n    yellow: 'yellow',\n    red: 'red',\n    light: 'light',\n    grey: 'grey',\n} as const;\nexport type ColorPalette = ValueOf<typeof ColorPalette>;\nexport type Color = ColorPalette | string;\n\n/**\n * See SCSS variable $lumx-color-variants\n */\nexport const ColorVariant = {\n    D1: 'D1',\n    D2: 'D2',\n    L1: 'L1',\n    L2: 'L2',\n    L3: 'L3',\n    L4: 'L4',\n    L5: 'L5',\n    L6: 'L6',\n    N: 'N',\n} as const;\nexport type ColorVariant = ValueOf<typeof ColorVariant>;\n\nexport const Theme = {\n    light: 'light',\n    dark: 'dark',\n} as const;\nexport type Theme = ValueOf<typeof Theme>;\n\nexport const Size = {\n    xxs: 'xxs',\n    xs: 'xs',\n    s: 's',\n    m: 'm',\n    l: 'l',\n    xl: 'xl',\n    xxl: 'xxl',\n    tiny: 'tiny',\n    regular: 'regular',\n    big: 'big',\n    huge: 'huge',\n} as const;\nexport type Size = ValueOf<typeof Size>;\nexport type GlobalSize = Extract<Size, 'xxs' | 'xs' | 's' | 'm' | 'l' | 'xl' | 'xxl'>;\n\nexport const Orientation = {\n    horizontal: 'horizontal',\n    vertical: 'vertical',\n} as const;\nexport type Orientation = ValueOf<typeof Orientation>;\n\nexport const Emphasis = {\n    low: 'low',\n    medium: 'medium',\n    high: 'high',\n} as const;\nexport type Emphasis = ValueOf<typeof Emphasis>;\n\n/**\n * List of typographies.\n */\nexport const Typography = {\n    overline: 'overline',\n    caption: 'caption',\n    body1: 'body1',\n    body2: 'body2',\n    subtitle1: 'subtitle1',\n    subtitle2: 'subtitle2',\n    title: 'title',\n    headline: 'headline',\n    display1: 'display1',\n} as const;\nexport type Typography = ValueOf<typeof Typography>;\n\n/**\n * All available aspect ratios.\n */\nexport const AspectRatio = {\n    /** Intrinsic content ratio. */\n    original: 'original',\n    /** Ratio 16:9 */\n    wide: 'wide',\n    /** Ratio 3:2 */\n    horizontal: 'horizontal',\n    /** Ratio 3:2 */\n    vertical: 'vertical',\n    /** Ratio 1:1 */\n    square: 'square',\n    /** Ratio constrained by the parent. */\n    free: 'free',\n} as const;\nexport type AspectRatio = ValueOf<typeof AspectRatio>;\n\n/**\n * Semantic info about the purpose of the component\n */\nexport const Kind = {\n    info: 'info',\n    success: 'success',\n    warning: 'warning',\n    error: 'error',\n} as const;\nexport type Kind = ValueOf<typeof Kind>;\n"]},"metadata":{},"sourceType":"module"}