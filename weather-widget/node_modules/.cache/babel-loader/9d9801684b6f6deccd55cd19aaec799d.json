{"ast":null,"code":"import { Size, Typography } from './components.js';\nimport { g as getRootClassName, a as _objectWithoutProperties, d as classnames, _ as _defineProperty, b as _extends, h as handleBasicClasses, c as _objectSpread2 } from './getRootClassName.js';\nimport React, { forwardRef, useMemo } from 'react';\nimport isEmpty from 'lodash/isEmpty';\nimport { r as renderLink } from './renderLink.js';\nimport { I as Icon } from './Icon2.js';\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME = 'Link';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME = getRootClassName(COMPONENT_NAME);\n\nvar getIconSize = function getIconSize(typography) {\n  switch (typography) {\n    case Typography.display1:\n      return Size.m;\n\n    case Typography.headline:\n    case Typography.title:\n    case Typography.body2:\n    case Typography.subtitle2:\n      return Size.s;\n\n    case Typography.body1:\n    case Typography.subtitle1:\n      return Size.xs;\n\n    case Typography.caption:\n    case Typography.overline:\n      return Size.xxs;\n\n    default:\n      return Size.s;\n  }\n};\n/**\n * Link component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\n\nvar Link = forwardRef(function (props, ref) {\n  var children = props.children,\n      className = props.className,\n      color = props.color,\n      colorVariant = props.colorVariant,\n      disabled = props.disabled,\n      _props$isDisabled = props.isDisabled,\n      isDisabled = _props$isDisabled === void 0 ? disabled : _props$isDisabled,\n      href = props.href,\n      leftIcon = props.leftIcon,\n      linkAs = props.linkAs,\n      rightIcon = props.rightIcon,\n      target = props.target,\n      typography = props.typography,\n      forwardedProps = _objectWithoutProperties(props, [\"children\", \"className\", \"color\", \"colorVariant\", \"disabled\", \"isDisabled\", \"href\", \"leftIcon\", \"linkAs\", \"rightIcon\", \"target\", \"typography\"]);\n\n  var renderedChildren = useMemo(function () {\n    return React.createElement(React.Fragment, null, leftIcon && !isEmpty(leftIcon) && React.createElement(Icon, {\n      icon: leftIcon,\n      className: \"\".concat(CLASSNAME, \"__left-icon\"),\n      size: getIconSize(typography)\n    }), children && React.createElement(\"span\", {\n      className: classnames(\"\".concat(CLASSNAME, \"__content\"), _defineProperty({}, \"lumx-typography-\".concat(typography), typography))\n    }, children), rightIcon && !isEmpty(rightIcon) && React.createElement(Icon, {\n      icon: rightIcon,\n      className: \"\".concat(CLASSNAME, \"__right-icon\"),\n      size: getIconSize(typography)\n    }));\n  }, [leftIcon, typography, children, rightIcon]);\n  /**\n   * If there is no linkAs prop and no href, we returned a <button> instead of a <a>.\n   * If the component is disabled, we also returned a <button> since disabled is not compatible with <a>.\n   */\n\n  if (!linkAs && isEmpty(href) || isDisabled) {\n    return React.createElement(\"button\", _extends({\n      type: \"button\"\n    }, forwardedProps, {\n      ref: ref,\n      disabled: isDisabled,\n      className: classnames(className, handleBasicClasses({\n        prefix: CLASSNAME,\n        color: color,\n        colorVariant: colorVariant\n      }))\n    }), renderedChildren);\n  }\n\n  return renderLink(_objectSpread2({\n    linkAs: linkAs\n  }, forwardedProps, {\n    href: href,\n    target: target,\n    className: classnames(className, handleBasicClasses({\n      prefix: CLASSNAME,\n      color: color,\n      colorVariant: colorVariant\n    })),\n    ref: ref\n  }), renderedChildren);\n});\nLink.displayName = COMPONENT_NAME;\nLink.className = CLASSNAME;\nexport { Link as L };","map":{"version":3,"sources":["../../../src/components/link/Link.tsx"],"names":["COMPONENT_NAME","CLASSNAME","getRootClassName","getIconSize","Typography","Size","Link","forwardRef","children","className","color","colorVariant","disabled","isDisabled","href","leftIcon","linkAs","rightIcon","target","typography","forwardedProps","props","renderedChildren","useMemo","isEmpty","classNames","handleBasicClasses","prefix","renderLink","ref"],"mappings":"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","sourcesContent":["import React, { forwardRef, RefObject, useMemo } from 'react';\n\nimport isEmpty from 'lodash/isEmpty';\n\nimport classNames from 'classnames';\n\nimport { Color, ColorVariant, Icon, Size, Typography } from '@lumx/react';\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\nimport { renderLink } from '@lumx/react/utils/renderLink';\n\ntype HTMLAnchorProps = React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;\n\n/**\n * Defines the props of the component.\n */\nexport interface LinkProps extends GenericProps {\n    /** Color variant. */\n    color?: Color;\n    /** Lightened or darkened variant of the selected icon color. */\n    colorVariant?: ColorVariant;\n    /** Link href. */\n    href?: HTMLAnchorProps['href'];\n    /** Whether the component is disabled or not. */\n    isDisabled?: boolean;\n    /** Left icon (SVG path). */\n    leftIcon?: string;\n    /** Custom react component for the link (can be used to inject react router Link). */\n    linkAs?: 'a' | any;\n    /** Right icon (SVG path). */\n    rightIcon?: string;\n    /** Link target. */\n    target?: HTMLAnchorProps['target'];\n    /** Typography variant. */\n    typography?: Typography;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'Link';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\nconst getIconSize = (typography?: Typography) => {\n    switch (typography) {\n        case Typography.display1:\n            return Size.m;\n\n        case Typography.headline:\n        case Typography.title:\n        case Typography.body2:\n        case Typography.subtitle2:\n            return Size.s;\n\n        case Typography.body1:\n        case Typography.subtitle1:\n            return Size.xs;\n\n        case Typography.caption:\n        case Typography.overline:\n            return Size.xxs;\n\n        default:\n            return Size.s;\n    }\n};\n\n/**\n * Link component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const Link: Comp<LinkProps, HTMLAnchorElement | HTMLButtonElement> = forwardRef((props, ref) => {\n    const {\n        children,\n        className,\n        color,\n        colorVariant,\n        disabled,\n        isDisabled = disabled,\n        href,\n        leftIcon,\n        linkAs,\n        rightIcon,\n        target,\n        typography,\n        ...forwardedProps\n    } = props;\n    const renderedChildren = useMemo(\n        () => (\n            <>\n                {leftIcon && !isEmpty(leftIcon) && (\n                    <Icon icon={leftIcon} className={`${CLASSNAME}__left-icon`} size={getIconSize(typography)} />\n                )}\n\n                {children && (\n                    <span\n                        className={classNames(`${CLASSNAME}__content`, {\n                            [`lumx-typography-${typography}`]: typography,\n                        })}\n                    >\n                        {children}\n                    </span>\n                )}\n\n                {rightIcon && !isEmpty(rightIcon) && (\n                    <Icon icon={rightIcon} className={`${CLASSNAME}__right-icon`} size={getIconSize(typography)} />\n                )}\n            </>\n        ),\n        [leftIcon, typography, children, rightIcon],\n    );\n\n    /**\n     * If there is no linkAs prop and no href, we returned a <button> instead of a <a>.\n     * If the component is disabled, we also returned a <button> since disabled is not compatible with <a>.\n     */\n    if ((!linkAs && isEmpty(href)) || isDisabled) {\n        return (\n            <button\n                type=\"button\"\n                {...forwardedProps}\n                ref={ref as RefObject<HTMLButtonElement>}\n                disabled={isDisabled}\n                className={classNames(className, handleBasicClasses({ prefix: CLASSNAME, color, colorVariant }))}\n            >\n                {renderedChildren}\n            </button>\n        );\n    }\n    return renderLink(\n        {\n            linkAs,\n            ...forwardedProps,\n            href,\n            target,\n            className: classNames(className, handleBasicClasses({ prefix: CLASSNAME, color, colorVariant })),\n            ref: ref as RefObject<HTMLAnchorElement>,\n        },\n        renderedChildren,\n    );\n});\nLink.displayName = COMPONENT_NAME;\nLink.className = CLASSNAME;\n"]},"metadata":{},"sourceType":"module"}