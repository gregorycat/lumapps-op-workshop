{"ast":null,"code":"import { Theme } from './components.js';\nimport { g as getRootClassName, a as _objectWithoutProperties, b as _extends, d as classnames, h as handleBasicClasses } from './getRootClassName.js';\nimport React, { forwardRef, useMemo, useRef } from 'react';\nimport { u as uid } from '../index2.js';\nimport { I as InputHelper } from './InputHelper.js';\nimport { I as InputLabel } from './InputLabel.js';\nimport { c as clamp } from './clamp.js';\nvar useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n/**\n * https://github.com/facebook/react/issues/14099#issuecomment-440013892\n *\n * @param fn A function to run\n * @return A React callback\n */\n\nfunction useEventCallback(fn) {\n  var ref = React.useRef(fn);\n  useEnhancedEffect(function () {\n    ref.current = fn;\n  });\n  return React.useCallback(function (event) {\n    return ref.current(event);\n  }, []);\n}\n/**\n * Defines the props of the component.\n */\n\n/**\n * Component display name.\n */\n\n\nvar COMPONENT_NAME = 'Slider';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME = getRootClassName(COMPONENT_NAME);\n/**\n * Component default props.\n */\n\nvar DEFAULT_PROPS = {\n  precision: 0,\n  steps: 0,\n  theme: Theme.light\n};\n/**\n * Convert a percent value to a value in range min - max.\n *\n * @param percent   Value to convert.\n * @param min       Minimum value.\n * @param max       Maximum value.\n * @param precision Precision.\n * @return Value in range min - max\n */\n\nvar computeValueFromPercent = function computeValueFromPercent(percent, min, max) {\n  var precision = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  return Number((min + percent * (max - min)).toFixed(precision));\n};\n/**\n * Convert a value in range min - max to a percent value.\n *\n * @param value Value to convert.\n * @param min   Minimum value.\n * @param max   Maximum value.\n * @return Value in percent\n */\n\n\nvar computePercentFromValue = function computePercentFromValue(value, min, max) {\n  return Number((value - min) / (max - min));\n};\n/**\n * Slider component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\n\nvar Slider = forwardRef(function (props, ref) {\n  var className = props.className,\n      disabled = props.disabled,\n      helper = props.helper,\n      hideMinMaxLabel = props.hideMinMaxLabel,\n      id = props.id,\n      _props$isDisabled = props.isDisabled,\n      isDisabled = _props$isDisabled === void 0 ? disabled : _props$isDisabled,\n      label = props.label,\n      max = props.max,\n      min = props.min,\n      name = props.name,\n      onChange = props.onChange,\n      onMouseDown = props.onMouseDown,\n      precision = props.precision,\n      steps = props.steps,\n      theme = props.theme,\n      value = props.value,\n      forwardedProps = _objectWithoutProperties(props, [\"className\", \"disabled\", \"helper\", \"hideMinMaxLabel\", \"id\", \"isDisabled\", \"label\", \"max\", \"min\", \"name\", \"onChange\", \"onMouseDown\", \"precision\", \"steps\", \"theme\", \"value\"]);\n\n  var sliderId = useMemo(function () {\n    return id || \"slider-\".concat(uid());\n  }, [id]);\n  var sliderLabelId = useMemo(function () {\n    return \"label-\".concat(sliderId);\n  }, [sliderId]);\n  var sliderRef = useRef(null); // build a lookup array for the steps.\n\n  var availableSteps = useMemo(function () {\n    if (!steps) return [];\n    var available = [0];\n    var percentStep = 1 / ((max - min) / steps);\n    var ptr = 0;\n\n    while (ptr + percentStep < 1) {\n      ptr += percentStep;\n      available.push(ptr);\n    }\n\n    return available;\n  }, [steps, min, max]);\n  /**\n   * Try to find the closest step to the current slider position.\n   *\n   * @param percentValue Reference value\n   * @return The closest step value\n   */\n\n  var findClosestStep = function findClosestStep(percentValue) {\n    var closest = availableSteps.reduce(function (acc, step) {\n      var aDst = Math.abs(percentValue - step);\n\n      if (aDst < acc.dst) {\n        return {\n          dst: aDst,\n          val: step\n        };\n      }\n\n      return acc;\n    }, {\n      dst: Infinity,\n      val: -1\n    });\n    return closest.val;\n  };\n  /**\n   * Convert slider's handle position to percent.\n   *\n   * @param event The interaction event\n   * @param slider the slider element\n   * @return The computed percent value\n   */\n\n\n  var getPercentValue = function getPercentValue(event, slider) {\n    var _slider$getBoundingCl = slider.getBoundingClientRect(),\n        width = _slider$getBoundingCl.width,\n        left = _slider$getBoundingCl.left;\n\n    var percent = (event.pageX - left - window.pageXOffset) / width;\n    percent = clamp(percent, 0, 1);\n\n    if (steps) {\n      percent = findClosestStep(percent);\n    }\n\n    return percent;\n  };\n  /**\n   * Register a handler for the mouse move event.\n   */\n\n\n  var handleMove = useEventCallback(function (event) {\n    var slider = sliderRef.current;\n    if (!slider || !onChange) return;\n    var newValue = getPercentValue(event, slider);\n    onChange(computeValueFromPercent(newValue, min, max, precision), name, event);\n  });\n  /**\n   * Register a handler for the mouse up event.\n   * Clean a all listeners.\n   */\n\n  var handleEnd = useEventCallback(function () {\n    document.body.removeEventListener('mousemove', handleMove);\n    document.body.removeEventListener('mouseup', handleEnd);\n    document.body.removeEventListener('touchmove', handleMove);\n    document.body.removeEventListener('touchend', handleEnd);\n  });\n  /**\n   * Move to the next or previous value (i.e. + or - 10%) or next step\n   * @param previous Should seek the previous value.\n   */\n\n  var hopToValue = function hopToValue() {\n    var previous = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var oldPercent = computePercentFromValue(value, min, max);\n    var percent = clamp(oldPercent + (previous ? -0.1 : 0.1), 0, 1);\n\n    if (steps) {\n      percent = oldPercent + availableSteps[1] * (previous ? -1 : 1);\n      percent = findClosestStep(percent);\n    }\n\n    if (onChange) {\n      onChange(computeValueFromPercent(percent, min, max, precision), name);\n    }\n  };\n  /**\n   * Register a handler for keyboard interactions\n   */\n\n\n  var handleKeyDown = useEventCallback(function (event) {\n    if (event.key === 'ArrowRight') {\n      hopToValue();\n    } else if (event.key === 'ArrowLeft') {\n      hopToValue(true);\n    }\n  });\n  /**\n   * Register a handler for the mouseDown event.\n   */\n\n  var handleMouseDown = useEventCallback(function (event) {\n    onMouseDown === null || onMouseDown === void 0 ? void 0 : onMouseDown(event);\n    var slider = sliderRef.current;\n    if (isDisabled || !slider) return;\n    var newValue = getPercentValue(event, slider);\n\n    if (onChange) {\n      onChange(computeValueFromPercent(newValue, min, max, precision), name, event);\n    }\n\n    document.body.addEventListener('mousemove', handleMove);\n    document.body.addEventListener('mouseup', handleEnd);\n  });\n  var percentString = \"\".concat(computePercentFromValue(value, min, max) * 100, \"%\");\n  return React.createElement(\"div\", _extends({\n    ref: ref\n  }, forwardedProps, {\n    className: classnames(className, handleBasicClasses({\n      prefix: CLASSNAME,\n      theme: theme,\n      hasLabel: Boolean(label)\n    })),\n    onMouseDown: handleMouseDown,\n    \"aria-disabled\": isDisabled\n  }), label && React.createElement(InputLabel, {\n    id: sliderLabelId,\n    htmlFor: sliderId,\n    className: \"\".concat(CLASSNAME, \"__label\"),\n    theme: theme\n  }, label), helper && React.createElement(InputHelper, {\n    className: \"\".concat(CLASSNAME, \"__helper\"),\n    theme: theme\n  }, helper), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__ui-wrapper\")\n  }, !hideMinMaxLabel && React.createElement(\"span\", {\n    className: \"\".concat(CLASSNAME, \"__value-label \").concat(CLASSNAME, \"__value-label--min\")\n  }, min), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__wrapper\"),\n    ref: sliderRef\n  }, React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__track \").concat(CLASSNAME, \"__track--background\")\n  }), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__track \").concat(CLASSNAME, \"__track--active\"),\n    style: {\n      width: percentString\n    }\n  }), steps ? React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__ticks\")\n  }, availableSteps.map(function (step, idx) {\n    return React.createElement(\"div\", {\n      key: \"tick_\".concat(idx),\n      className: \"\".concat(CLASSNAME, \"__tick\"),\n      style: {\n        left: \"\".concat(step * 100, \"%\")\n      }\n    });\n  })) : null, React.createElement(\"button\", {\n    type: \"button\",\n    \"aria-labelledby\": sliderLabelId,\n    name: name,\n    id: sliderId,\n    className: \"\".concat(CLASSNAME, \"__handle\"),\n    style: {\n      left: percentString\n    },\n    onKeyDown: handleKeyDown,\n    disabled: isDisabled\n  })), !hideMinMaxLabel && React.createElement(\"span\", {\n    className: \"\".concat(CLASSNAME, \"__value-label \").concat(CLASSNAME, \"__value-label--max\")\n  }, max)));\n});\nSlider.displayName = COMPONENT_NAME;\nSlider.className = CLASSNAME;\nSlider.defaultProps = DEFAULT_PROPS;\nexport { Slider as S };","map":{"version":3,"sources":["../../../src/hooks/useEventCallback.tsx","../../../src/components/slider/Slider.tsx"],"names":["useEnhancedEffect","React","ref","COMPONENT_NAME","CLASSNAME","getRootClassName","DEFAULT_PROPS","precision","steps","theme","Theme","light","computeValueFromPercent","Number","min","percent","max","computePercentFromValue","value","Slider","forwardRef","className","disabled","helper","hideMinMaxLabel","id","isDisabled","label","name","onChange","onMouseDown","forwardedProps","props","sliderId","useMemo","uid","sliderLabelId","sliderRef","useRef","availableSteps","available","percentStep","ptr","findClosestStep","closest","aDst","Math","percentValue","acc","dst","val","step","getPercentValue","width","left","slider","event","window","clamp","handleMove","useEventCallback","newValue","handleEnd","document","hopToValue","previous","oldPercent","handleKeyDown","handleMouseDown","percentString","classNames","handleBasicClasses","prefix","hasLabel","Boolean"],"mappings":"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","sourcesContent":["import React from 'react';\n\nconst useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n\n/**\n * https://github.com/facebook/react/issues/14099#issuecomment-440013892\n *\n * @param fn A function to run\n * @return A React callback\n */\nexport default function useEventCallback(fn: (...args: any[]) => any): (event: any) => any {\n    const ref = React.useRef(fn);\n    useEnhancedEffect(() => {\n        ref.current = fn;\n    });\n    return React.useCallback((event: any) => ref.current(event), []);\n}\n","/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport React, { forwardRef, SyntheticEvent, useMemo, useRef } from 'react';\n\nimport classNames from 'classnames';\n\nimport { InputHelper, InputLabel, Theme } from '@lumx/react';\n\nimport useEventCallback from '@lumx/react/hooks/useEventCallback';\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\n\nimport { uid } from 'uid';\nimport { clamp } from '@lumx/react/utils/clamp';\n\n/**\n * Defines the props of the component.\n */\nexport interface SliderProps extends GenericProps {\n    /** Helper text. */\n    helper?: string;\n    /** Whether the min and max labels should be hidden or not. */\n    hideMinMaxLabel?: boolean;\n    /** Whether the component is disabled or not. */\n    isDisabled?: boolean;\n    /** Label text. */\n    label?: string;\n    /** Maximum value on the range. */\n    max: number;\n    /** Minimum value of the range. */\n    min: number;\n    /** Native input name property. */\n    name?: string;\n    /** Number of digits in the fractional part of the selected value. */\n    precision?: number;\n    /** Range step value. */\n    steps?: number;\n    /** Theme adapting the component to light or dark background. */\n    theme?: Theme;\n    /** Selected ranged value. */\n    value: number;\n    /** On change callback. */\n    onChange(value: number, name?: string, event?: SyntheticEvent): void;\n    /** On click callback. */\n    onMouseDown?(event: React.SyntheticEvent): void;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'Slider';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<SliderProps> = {\n    precision: 0,\n    steps: 0,\n    theme: Theme.light,\n};\n\n/**\n * Convert a percent value to a value in range min - max.\n *\n * @param percent   Value to convert.\n * @param min       Minimum value.\n * @param max       Maximum value.\n * @param precision Precision.\n * @return Value in range min - max\n */\nconst computeValueFromPercent = (percent: number, min: number, max: number, precision = 0): number =>\n    Number((min + percent * (max - min)).toFixed(precision));\n\n/**\n * Convert a value in range min - max to a percent value.\n *\n * @param value Value to convert.\n * @param min   Minimum value.\n * @param max   Maximum value.\n * @return Value in percent\n */\nconst computePercentFromValue = (value: number, min: number, max: number): number =>\n    Number((value - min) / (max - min));\n\n/**\n * Slider component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const Slider: Comp<SliderProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const {\n        className,\n        disabled,\n        helper,\n        hideMinMaxLabel,\n        id,\n        isDisabled = disabled,\n        label,\n        max,\n        min,\n        name,\n        onChange,\n        onMouseDown,\n        precision,\n        steps,\n        theme,\n        value,\n        ...forwardedProps\n    } = props;\n    const sliderId = useMemo(() => id || `slider-${uid()}`, [id]);\n    const sliderLabelId = useMemo(() => `label-${sliderId}`, [sliderId]);\n    const sliderRef = useRef<HTMLDivElement>(null);\n\n    // build a lookup array for the steps.\n    const availableSteps = useMemo((): number[] => {\n        if (!steps) return [];\n\n        const available = [0];\n        const percentStep = 1 / ((max - min) / steps);\n        let ptr = 0;\n        while (ptr + percentStep < 1) {\n            ptr += percentStep;\n            available.push(ptr);\n        }\n        return available;\n    }, [steps, min, max]);\n\n    /**\n     * Try to find the closest step to the current slider position.\n     *\n     * @param percentValue Reference value\n     * @return The closest step value\n     */\n    const findClosestStep = (percentValue: number): number => {\n        const closest = availableSteps.reduce(\n            (acc, step) => {\n                const aDst = Math.abs(percentValue - step);\n                if (aDst < acc.dst) {\n                    return { dst: aDst, val: step };\n                }\n                return acc;\n            },\n            { dst: Infinity, val: -1 },\n        );\n        return closest.val;\n    };\n\n    /**\n     * Convert slider's handle position to percent.\n     *\n     * @param event The interaction event\n     * @param slider the slider element\n     * @return The computed percent value\n     */\n    const getPercentValue = (event: React.MouseEvent, slider: HTMLDivElement): number => {\n        const { width, left } = slider.getBoundingClientRect();\n        let percent = (event.pageX - left - window.pageXOffset) / width;\n        percent = clamp(percent, 0, 1);\n        if (steps) {\n            percent = findClosestStep(percent);\n        }\n        return percent;\n    };\n\n    /**\n     * Register a handler for the mouse move event.\n     */\n    const handleMove = useEventCallback((event: React.MouseEvent) => {\n        const { current: slider } = sliderRef;\n        if (!slider || !onChange) return;\n        const newValue = getPercentValue(event, slider);\n        onChange(computeValueFromPercent(newValue, min, max, precision), name, event);\n    });\n\n    /**\n     * Register a handler for the mouse up event.\n     * Clean a all listeners.\n     */\n    const handleEnd = useEventCallback(() => {\n        document.body.removeEventListener('mousemove', handleMove);\n        document.body.removeEventListener('mouseup', handleEnd);\n        document.body.removeEventListener('touchmove', handleMove);\n        document.body.removeEventListener('touchend', handleEnd);\n    });\n\n    /**\n     * Move to the next or previous value (i.e. + or - 10%) or next step\n     * @param previous Should seek the previous value.\n     */\n    const hopToValue = (previous = false) => {\n        const oldPercent = computePercentFromValue(value, min, max);\n        let percent = clamp(oldPercent + (previous ? -0.1 : 0.1), 0, 1);\n        if (steps) {\n            percent = oldPercent + availableSteps[1] * (previous ? -1 : 1);\n            percent = findClosestStep(percent);\n        }\n        if (onChange) {\n            onChange(computeValueFromPercent(percent, min, max, precision), name);\n        }\n    };\n\n    /**\n     * Register a handler for keyboard interactions\n     */\n    const handleKeyDown = useEventCallback((event: React.KeyboardEvent) => {\n        if (event.key === 'ArrowRight') {\n            hopToValue();\n        } else if (event.key === 'ArrowLeft') {\n            hopToValue(true);\n        }\n    });\n\n    /**\n     * Register a handler for the mouseDown event.\n     */\n    const handleMouseDown = useEventCallback((event: React.MouseEvent) => {\n        onMouseDown?.(event);\n\n        const { current: slider } = sliderRef;\n        if (isDisabled || !slider) return;\n        const newValue = getPercentValue(event, slider);\n        if (onChange) {\n            onChange(computeValueFromPercent(newValue, min, max, precision), name, event);\n        }\n\n        document.body.addEventListener('mousemove', handleMove);\n        document.body.addEventListener('mouseup', handleEnd);\n    });\n\n    const percentString = `${computePercentFromValue(value, min, max) * 100}%`;\n    return (\n        <div\n            ref={ref}\n            {...forwardedProps}\n            className={classNames(\n                className,\n                handleBasicClasses({ prefix: CLASSNAME, theme, hasLabel: Boolean(label) }),\n            )}\n            onMouseDown={handleMouseDown}\n            aria-disabled={isDisabled}\n        >\n            {label && (\n                <InputLabel id={sliderLabelId} htmlFor={sliderId} className={`${CLASSNAME}__label`} theme={theme}>\n                    {label}\n                </InputLabel>\n            )}\n\n            {helper && (\n                <InputHelper className={`${CLASSNAME}__helper`} theme={theme}>\n                    {helper}\n                </InputHelper>\n            )}\n\n            <div className={`${CLASSNAME}__ui-wrapper`}>\n                {!hideMinMaxLabel && (\n                    <span className={`${CLASSNAME}__value-label ${CLASSNAME}__value-label--min`}>{min}</span>\n                )}\n                <div className={`${CLASSNAME}__wrapper`} ref={sliderRef}>\n                    <div className={`${CLASSNAME}__track ${CLASSNAME}__track--background`} />\n                    <div\n                        className={`${CLASSNAME}__track ${CLASSNAME}__track--active`}\n                        style={{ width: percentString }}\n                    />\n                    {steps ? (\n                        <div className={`${CLASSNAME}__ticks`}>\n                            {availableSteps.map((step, idx) => (\n                                <div\n                                    key={`tick_${idx}`}\n                                    className={`${CLASSNAME}__tick`}\n                                    style={{ left: `${step * 100}%` }}\n                                />\n                            ))}\n                        </div>\n                    ) : null}\n                    <button\n                        type=\"button\"\n                        aria-labelledby={sliderLabelId}\n                        name={name}\n                        id={sliderId}\n                        className={`${CLASSNAME}__handle`}\n                        style={{ left: percentString }}\n                        onKeyDown={handleKeyDown}\n                        disabled={isDisabled}\n                    />\n                </div>\n                {!hideMinMaxLabel && (\n                    <span className={`${CLASSNAME}__value-label ${CLASSNAME}__value-label--max`}>{max}</span>\n                )}\n            </div>\n        </div>\n    );\n});\nSlider.displayName = COMPONENT_NAME;\nSlider.className = CLASSNAME;\nSlider.defaultProps = DEFAULT_PROPS;\n"]},"metadata":{},"sourceType":"module"}