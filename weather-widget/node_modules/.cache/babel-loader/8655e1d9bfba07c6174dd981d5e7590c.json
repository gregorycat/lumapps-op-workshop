{"ast":null,"code":"import { Size, ColorPalette, Kind } from './components.js';\nimport { g as getRootClassName, _ as _defineProperty, a as _objectWithoutProperties, b as _extends, d as classnames, h as handleBasicClasses } from './getRootClassName.js';\nimport React, { forwardRef } from 'react';\nimport { m as mdiAlert, a as mdiInformation, b as mdiCheckCircle, c as mdiAlertCircle } from './mdi.js';\nimport { I as Icon } from './Icon2.js';\n\nvar _CONFIG;\n/**\n * Defines the props of the component.\n */\n\n/**\n * Component display name.\n */\n\n\nvar COMPONENT_NAME = 'Message';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME = getRootClassName(COMPONENT_NAME);\n/**\n * Associative map from message kind to color and icon.\n */\n\nvar CONFIG = (_CONFIG = {}, _defineProperty(_CONFIG, Kind.error, {\n  color: ColorPalette.red,\n  icon: mdiAlert\n}), _defineProperty(_CONFIG, Kind.info, {\n  color: ColorPalette.dark,\n  icon: mdiInformation\n}), _defineProperty(_CONFIG, Kind.success, {\n  color: ColorPalette.green,\n  icon: mdiCheckCircle\n}), _defineProperty(_CONFIG, Kind.warning, {\n  color: ColorPalette.yellow,\n  icon: mdiAlertCircle\n}), _CONFIG);\n/**\n * Message component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar Message = forwardRef(function (props, ref) {\n  var children = props.children,\n      className = props.className,\n      hasBackground = props.hasBackground,\n      kind = props.kind,\n      customIcon = props.icon,\n      forwardedProps = _objectWithoutProperties(props, [\"children\", \"className\", \"hasBackground\", \"kind\", \"icon\"]);\n\n  var _ref = CONFIG[kind] || {},\n      color = _ref.color,\n      icon = _ref.icon;\n\n  return React.createElement(\"div\", _extends({\n    ref: ref,\n    className: classnames(className, handleBasicClasses({\n      color: color,\n      hasBackground: hasBackground,\n      prefix: CLASSNAME\n    }))\n  }, forwardedProps), (customIcon || icon) && React.createElement(Icon, {\n    className: \"lumx-message__icon\",\n    icon: customIcon || icon,\n    size: Size.xs\n  }), React.createElement(\"div\", {\n    className: \"lumx-message__text\"\n  }, children));\n});\nMessage.displayName = COMPONENT_NAME;\nMessage.className = CLASSNAME;\nexport { Message as M };","map":{"version":3,"sources":["../../../src/components/message/Message.tsx"],"names":["COMPONENT_NAME","CLASSNAME","getRootClassName","CONFIG","Kind","color","ColorPalette","icon","mdiAlert","mdiInformation","mdiCheckCircle","mdiAlertCircle","Message","forwardRef","children","className","hasBackground","kind","customIcon","forwardedProps","props","classNames","handleBasicClasses","prefix","Size","xs"],"mappings":";;;;;;;AAMA;;;;AAcA;;;;;AAGA,IAAMA,cAAc,GAApB,SAAA;AAEA;;;;AAGA,IAAMC,SAAS,GAAGC,gBAAgB,CAAlC,cAAkC,CAAlC;AAEA;;;;AAGA,IAAMC,MAAM,IAAA,OAAA,GAAA,EAAA,EAAA,eAAA,CAAA,OAAA,EACPC,IAAI,CADG,KAAA,EACM;AAAEC,EAAAA,KAAK,EAAEC,YAAY,CAArB,GAAA;AAA2BC,EAAAA,IAAI,EAAEC;AAAjC,CADN,CAAA,EAAA,eAAA,CAAA,OAAA,EAEPJ,IAAI,CAFG,IAAA,EAEK;AAAEC,EAAAA,KAAK,EAAEC,YAAY,CAArB,IAAA;AAA4BC,EAAAA,IAAI,EAAEE;AAAlC,CAFL,CAAA,EAAA,eAAA,CAAA,OAAA,EAGPL,IAAI,CAHG,OAAA,EAGQ;AAAEC,EAAAA,KAAK,EAAEC,YAAY,CAArB,KAAA;AAA6BC,EAAAA,IAAI,EAAEG;AAAnC,CAHR,CAAA,EAAA,eAAA,CAAA,OAAA,EAIPN,IAAI,CAJG,OAAA,EAIQ;AAAEC,EAAAA,KAAK,EAAEC,YAAY,CAArB,MAAA;AAA8BC,EAAAA,IAAI,EAAEI;AAApC,CAJR,CAAA,EAAZ,OAAY,CAAZ;AAOA;;;;;;;;IAOaC,OAA2C,GAAGC,UAAU,CAAC,UAAA,KAAA,EAAA,GAAA,EAAgB;AAAA,MAC1EC,QAD0E,GACQM,KADR,CAAA,QAAA;AAAA,MAChEL,SADgE,GACQK,KADR,CAAA,SAAA;AAAA,MACrDJ,aADqD,GACQI,KADR,CAAA,aAAA;AAAA,MACtCH,IADsC,GACQG,KADR,CAAA,IAAA;AAAA,MAC1BF,UAD0B,GACQE,KADR,CAAA,IAAA;AAAA,MACXD,cADW,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,UAAA,EAAA,WAAA,EAAA,eAAA,EAAA,MAAA,EAAA,MAAA,CAAA,CAAA;;AAAA,MAAA,IAAA,GAE1DhB,MAAM,CAANA,IAAM,CAANA,IAF0D,EAAA;AAAA,MAE1EE,KAF0E,GAAA,IAAA,CAAA,KAAA;AAAA,MAEnEE,IAFmE,GAAA,IAAA,CAAA,IAAA;;AAIlF,SACI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA;AACI,IAAA,GAAG,EADP,GAAA;AAEI,IAAA,SAAS,EAAEc,UAAU,CAAA,SAAA,EAEjBC,kBAAkB,CAAC;AACfjB,MAAAA,KAAK,EADU,KAAA;AAEfW,MAAAA,aAAa,EAFE,aAAA;AAGfO,MAAAA,MAAM,EAAEtB;AAHO,KAAD,CAFD;AAFzB,GAAA,EAAA,cAAA,CAAA,EAYK,CAACiB,UAAU,IAAX,IAAA,KAAwB,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,SAAS,EAAf,oBAAA;AAAqC,IAAA,IAAI,EAAEA,UAAU,IAArD,IAAA;AAA+D,IAAA,IAAI,EAAEM,IAAI,CAACC;AAA1E,GAAA,CAZ7B,EAaI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAC;AAAf,GAAA,EAdR,QAcQ,CAbJ,CADJ;AAJiE,CAAA,C;AAsBrEb,OAAO,CAAPA,WAAAA,GAAAA,cAAAA;AACAA,OAAO,CAAPA,SAAAA,GAAAA,SAAAA","sourcesContent":["import { mdiAlert, mdiAlertCircle, mdiCheckCircle, mdiInformation } from '@lumx/icons';\nimport { ColorPalette, Icon, Kind, Size } from '@lumx/react';\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\nimport classNames from 'classnames';\nimport React, { forwardRef, ReactNode } from 'react';\n\n/**\n * Defines the props of the component.\n */\nexport interface MessageProps extends GenericProps {\n    /** Content. */\n    children?: ReactNode;\n    /** Whether the message has a background or not. */\n    hasBackground?: boolean;\n    /** Message variant. */\n    kind?: Kind;\n    /** Message custom icon SVG path. */\n    icon?: string;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'Message';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * Associative map from message kind to color and icon.\n */\nconst CONFIG = {\n    [Kind.error]: { color: ColorPalette.red, icon: mdiAlert },\n    [Kind.info]: { color: ColorPalette.dark, icon: mdiInformation },\n    [Kind.success]: { color: ColorPalette.green, icon: mdiCheckCircle },\n    [Kind.warning]: { color: ColorPalette.yellow, icon: mdiAlertCircle },\n};\n\n/**\n * Message component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const Message: Comp<MessageProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const { children, className, hasBackground, kind, icon: customIcon, ...forwardedProps } = props;\n    const { color, icon } = CONFIG[kind as Kind] || {};\n\n    return (\n        <div\n            ref={ref}\n            className={classNames(\n                className,\n                handleBasicClasses({\n                    color,\n                    hasBackground,\n                    prefix: CLASSNAME,\n                }),\n            )}\n            {...forwardedProps}\n        >\n            {(customIcon || icon) && <Icon className=\"lumx-message__icon\" icon={customIcon || icon} size={Size.xs} />}\n            <div className=\"lumx-message__text\">{children}</div>\n        </div>\n    );\n});\nMessage.displayName = COMPONENT_NAME;\nMessage.className = CLASSNAME;\n"]},"metadata":{},"sourceType":"module"}