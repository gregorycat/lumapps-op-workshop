{"ast":null,"code":"import concat from 'lodash/concat';\nimport dropRight from 'lodash/dropRight';\nimport last from 'lodash/last';\nimport partition from 'lodash/partition';\nimport reduce from 'lodash/reduce';\n/**\n * Similar to lodash `partition` function but working with multiple predicates.\n *\n * @example\n * const isString = (s) => typeof s === 'string'\n * const isNumber = (s) => typeof s === 'number'\n * const [strings, numbers, others] = partitionMulti(['a', 1, 'b', false], [isString, isNumber])\n * //=> [['a', 'b'], [1], [false]]\n *\n * @param  elements array of elements\n * @param  predicates array of predicates to apply on elements\n * @return partitioned elements by the given predicates\n */\n\nfunction partitionMulti(elements, predicates) {\n  return reduce(predicates, function (partitioned, predicate) {\n    return concat(dropRight(partitioned), partition(last(partitioned), predicate));\n  }, [elements]);\n}\n\nexport { partitionMulti as p };","map":{"version":3,"sources":["../../../src/utils/partitionMulti.ts"],"names":["reduce","concat","dropRight","partition","last"],"mappings":";;;;;AAOA;;;;;;;;;;;;;;AAaO,SAAA,cAAA,CAAA,QAAA,EAAA,UAAA,EAAkF;AACrF,SAAOA,MAAM,CAAA,UAAA,EAET,UAAA,WAAA,EAAA,SAAA,EAAA;AAAA,WACIC,MAAM,CAACC,SAAS,CAAV,WAAU,CAAV,EAAyBC,SAAS,CAACC,IAAI,CAAL,WAAK,CAAL,EAD5C,SAC4C,CAAlC,CADV;AAFS,GAAA,EAIT,CAJJ,QAII,CAJS,CAAb;AAMH","sourcesContent":["import concat from 'lodash/concat';\nimport dropRight from 'lodash/dropRight';\nimport last from 'lodash/last';\nimport partition from 'lodash/partition';\nimport reduce from 'lodash/reduce';\nimport { Predicate } from './type';\n\n/**\n * Similar to lodash `partition` function but working with multiple predicates.\n *\n * @example\n * const isString = (s) => typeof s === 'string'\n * const isNumber = (s) => typeof s === 'number'\n * const [strings, numbers, others] = partitionMulti(['a', 1, 'b', false], [isString, isNumber])\n * //=> [['a', 'b'], [1], [false]]\n *\n * @param  elements array of elements\n * @param  predicates array of predicates to apply on elements\n * @return partitioned elements by the given predicates\n */\nexport function partitionMulti<T>(elements: T[], predicates: Array<Predicate<T>>): T[][] {\n    return reduce(\n        predicates,\n        (partitioned: T[][], predicate: Predicate<T>) =>\n            concat(dropRight(partitioned), partition(last(partitioned), predicate)),\n        [elements],\n    );\n}\n"]},"metadata":{},"sourceType":"module"}