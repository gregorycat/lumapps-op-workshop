{"ast":null,"code":"import { Alignment } from './components.js';\nimport { f as _slicedToArray, g as getRootClassName, a as _objectWithoutProperties, h as handleBasicClasses, b as _extends, d as classnames } from './getRootClassName.js';\nimport React, { useState, forwardRef } from 'react';\nvar INITIAL_STATE_ACTIVE_CHIP = -1;\n/**\n * Hook that provides the necessary information to manage chips navigation.\n * @param chips             List of chips selected.\n * @param onChipDeleted     Callback executed when a chip must be eliminated.\n * @param initialActiveChip Initial active chip index.\n *\n * @return chip navigation tools.\n */\n\nvar useChipGroupNavigation = function useChipGroupNavigation(chips, onChipDeleted) {\n  var initialActiveChip = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : INITIAL_STATE_ACTIVE_CHIP;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      wasBackspacePressed = _useState2[0],\n      setWasBackspacePressed = _useState2[1];\n\n  var _useState3 = useState(initialActiveChip),\n      _useState4 = _slicedToArray(_useState3, 2),\n      activeChip = _useState4[0],\n      setActiveChip = _useState4[1];\n  /**\n   * Resets the active index and backspace control to their initial state\n   */\n\n\n  var resetChipNavigation = function resetChipNavigation() {\n    setWasBackspacePressed(false);\n    setActiveChip(initialActiveChip);\n  };\n  /**\n   * Callback to be executed when the backspace was pressed. If there are no chips\n   * selected, it will return immediately. If there are it will check if the\n   * backspace was already pressed. if it was, it means that the user wants to eliminate\n   * the chip, so we execute the `onChipDeleted` function and reset internal state.\n   *\n   * If it was not pressed before, we set the `wasBackspacePressed` flag to true and\n   * highlight the last chip.\n   */\n\n\n  var onBackspacePressed = function onBackspacePressed() {\n    if (chips.length === 0) {\n      return;\n    }\n\n    if (wasBackspacePressed) {\n      var chipDeleted = chips[chips.length - 1];\n      onChipDeleted(chipDeleted);\n      resetChipNavigation();\n    } else {\n      setActiveChip(chips.length - 1);\n      setWasBackspacePressed(true);\n    }\n  };\n\n  return {\n    activeChip: activeChip,\n    onBackspacePressed: onBackspacePressed,\n    resetChipNavigation: resetChipNavigation\n  };\n};\n/**\n * Defines the props of the component.\n */\n\n/**\n * Component default props.\n */\n\n\nvar DEFAULT_PROPS = {\n  align: Alignment.left\n};\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME = 'ChipGroup';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME = getRootClassName(COMPONENT_NAME);\n/**\n * ChipGroup component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar InternalChipGroup = forwardRef(function (props, ref) {\n  var align = props.align,\n      children = props.children,\n      className = props.className,\n      forwardedProps = _objectWithoutProperties(props, [\"align\", \"children\", \"className\"]);\n\n  var chipGroupClassName = handleBasicClasses({\n    align: align,\n    prefix: CLASSNAME\n  });\n  return React.createElement(\"div\", _extends({\n    ref: ref\n  }, forwardedProps, {\n    className: classnames(className, chipGroupClassName)\n  }), children);\n});\nInternalChipGroup.displayName = COMPONENT_NAME;\nInternalChipGroup.className = CLASSNAME;\nInternalChipGroup.defaultProps = DEFAULT_PROPS;\nvar ChipGroup = Object.assign(InternalChipGroup, {\n  useChipGroupNavigation: useChipGroupNavigation\n});\nexport { ChipGroup as C };","map":{"version":3,"sources":["../../../src/hooks/useChipGroupNavigation.tsx","../../../src/components/chip/ChipGroup.tsx"],"names":["INITIAL_STATE_ACTIVE_CHIP","useChipGroupNavigation","initialActiveChip","wasBackspacePressed","setWasBackspacePressed","useState","activeChip","setActiveChip","resetChipNavigation","onBackspacePressed","chips","chipDeleted","onChipDeleted","DEFAULT_PROPS","align","Alignment","left","COMPONENT_NAME","CLASSNAME","getRootClassName","InternalChipGroup","forwardRef","children","className","forwardedProps","props","chipGroupClassName","handleBasicClasses","prefix","ref","classNames","ChipGroup"],"mappings":"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","sourcesContent":["import { useState } from 'react';\n\ninterface UseChipGroupNavigation {\n    /** the current active chip index */\n    activeChip: number;\n\n    /** callback to be executed when the backspace was pressed */\n    onBackspacePressed(): void;\n\n    /** function that allows to reset the navigation */\n    resetChipNavigation(): void;\n}\n\nexport type useChipGroupNavigationType<C = any> = (\n    chips: C[],\n    onChipDeleted: (chip: C) => void,\n    initialActiveChip?: number,\n) => UseChipGroupNavigation;\n\nconst INITIAL_STATE_ACTIVE_CHIP = -1;\n\n/**\n * Hook that provides the necessary information to manage chips navigation.\n * @param chips             List of chips selected.\n * @param onChipDeleted     Callback executed when a chip must be eliminated.\n * @param initialActiveChip Initial active chip index.\n *\n * @return chip navigation tools.\n */\nexport const useChipGroupNavigation: useChipGroupNavigationType = (\n    chips,\n    onChipDeleted,\n    initialActiveChip = INITIAL_STATE_ACTIVE_CHIP,\n) => {\n    const [wasBackspacePressed, setWasBackspacePressed] = useState(false);\n    const [activeChip, setActiveChip] = useState(initialActiveChip);\n\n    /**\n     * Resets the active index and backspace control to their initial state\n     */\n    const resetChipNavigation = () => {\n        setWasBackspacePressed(false);\n        setActiveChip(initialActiveChip);\n    };\n\n    /**\n     * Callback to be executed when the backspace was pressed. If there are no chips\n     * selected, it will return immediately. If there are it will check if the\n     * backspace was already pressed. if it was, it means that the user wants to eliminate\n     * the chip, so we execute the `onChipDeleted` function and reset internal state.\n     *\n     * If it was not pressed before, we set the `wasBackspacePressed` flag to true and\n     * highlight the last chip.\n     */\n    const onBackspacePressed = () => {\n        if (chips.length === 0) {\n            return;\n        }\n\n        if (wasBackspacePressed) {\n            const chipDeleted: any = chips[chips.length - 1];\n            onChipDeleted(chipDeleted);\n            resetChipNavigation();\n        } else {\n            setActiveChip(chips.length - 1);\n            setWasBackspacePressed(true);\n        }\n    };\n\n    return {\n        activeChip,\n        onBackspacePressed,\n        resetChipNavigation,\n    };\n};\n","import { Alignment, HorizontalAlignment } from '@lumx/react/components';\nimport React, { forwardRef, ReactNode } from 'react';\n\nimport classNames from 'classnames';\n\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\n\nimport { useChipGroupNavigation } from '@lumx/react/hooks/useChipGroupNavigation';\n\n/**\n * Defines the props of the component.\n */\nexport interface ChipGroupProps extends GenericProps {\n    /** Chip horizontal alignment. */\n    align?: HorizontalAlignment;\n    /** List of Chip. */\n    children: ReactNode;\n}\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<ChipGroupProps> = {\n    align: Alignment.left,\n};\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'ChipGroup';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * ChipGroup component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nconst InternalChipGroup: Comp<ChipGroupProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const { align, children, className, ...forwardedProps } = props;\n    const chipGroupClassName = handleBasicClasses({\n        align,\n        prefix: CLASSNAME,\n    });\n\n    return (\n        <div ref={ref} {...forwardedProps} className={classNames(className, chipGroupClassName)}>\n            {children}\n        </div>\n    );\n});\nInternalChipGroup.displayName = COMPONENT_NAME;\nInternalChipGroup.className = CLASSNAME;\nInternalChipGroup.defaultProps = DEFAULT_PROPS;\n\nexport const ChipGroup = Object.assign(InternalChipGroup, { useChipGroupNavigation });\n"]},"metadata":{},"sourceType":"module"}