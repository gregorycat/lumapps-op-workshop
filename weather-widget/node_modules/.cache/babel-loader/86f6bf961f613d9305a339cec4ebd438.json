{"ast":null,"code":"import { Size, Emphasis, ColorPalette, Kind } from './components.js';\nimport { _ as _defineProperty, g as getRootClassName, a as _objectWithoutProperties, b as _extends, c as _objectSpread2, d as classnames, h as handleBasicClasses } from './getRootClassName.js';\nimport React, { forwardRef } from 'react';\nimport { m as mdiAlert, a as mdiInformation, b as mdiCheckCircle, c as mdiAlertCircle } from './mdi.js';\nimport { u as uid } from '../index2.js';\nimport { a as Button } from './Button2.js';\nimport { D as Dialog } from './Dialog2.js';\nimport { I as Icon } from './Icon2.js';\nimport { T as Toolbar } from './Toolbar2.js';\n\nvar _CONFIG;\n/**\n * Associative map from message kind to color and icon.\n */\n\n\nvar CONFIG = (_CONFIG = {}, _defineProperty(_CONFIG, Kind.error, {\n  color: ColorPalette.red,\n  icon: mdiAlert\n}), _defineProperty(_CONFIG, Kind.info, {\n  color: ColorPalette.blue,\n  icon: mdiInformation\n}), _defineProperty(_CONFIG, Kind.success, {\n  color: ColorPalette.green,\n  icon: mdiCheckCircle\n}), _defineProperty(_CONFIG, Kind.warning, {\n  color: ColorPalette.yellow,\n  icon: mdiAlertCircle\n}), _CONFIG);\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME = 'AlertDialog';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME = getRootClassName(COMPONENT_NAME);\n/**\n * Component default props.\n */\n\nvar DEFAULT_PROPS = {\n  size: Size.tiny,\n  kind: Kind.info\n};\n/**\n * AlertDialog component.\n *\n * An alert dialog is a modal dialog that interrupts the user's workflow to\n * communicate an important message and acquire a response.\n *\n * It should not have a complex content.\n * Children of this component should only be strings, paragraphs or links.\n */\n\nvar AlertDialog = forwardRef(function (props, ref) {\n  var id = props.id,\n      title = props.title,\n      className = props.className,\n      cancelProps = props.cancelProps,\n      confirmProps = props.confirmProps,\n      kind = props.kind,\n      size = props.size,\n      dialogProps = props.dialogProps,\n      children = props.children,\n      forwardedProps = _objectWithoutProperties(props, [\"id\", \"title\", \"className\", \"cancelProps\", \"confirmProps\", \"kind\", \"size\", \"dialogProps\", \"children\"]);\n\n  var cancelButtonRef = React.useRef(null);\n  var confirmationButtonRef = React.useRef(null);\n\n  var _ref = CONFIG[kind] || {},\n      color = _ref.color,\n      icon = _ref.icon; // Define a unique ID to target title and description for aria attributes.\n\n\n  var uniqueId = React.useMemo(function () {\n    return id || uid();\n  }, [id]);\n  var titleId = \"\".concat(uniqueId, \"-title\");\n  var descriptionId = \"\".concat(uniqueId, \"-description\"); // If content is a string, set in a paragraph.\n\n  var DescriptionElement = typeof children === 'string' ? 'p' : 'div';\n\n  var confirmLabel = confirmProps.label,\n      confirmOnClick = confirmProps.onClick,\n      forwardedConfirmProps = _objectWithoutProperties(confirmProps, [\"label\", \"onClick\"]);\n\n  var _ref2 = cancelProps || {},\n      cancelLabel = _ref2.label,\n      cancelOnClick = _ref2.onClick,\n      forwardedCancelProps = _objectWithoutProperties(_ref2, [\"label\", \"onClick\"]);\n\n  return React.createElement(Dialog, _extends({\n    ref: ref,\n    focusElement: cancelProps ? cancelButtonRef : confirmationButtonRef,\n    size: size,\n    dialogProps: _objectSpread2({\n      id: uniqueId,\n      role: 'alertdialog',\n      'aria-labelledby': titleId,\n      'aria-describedby': descriptionId\n    }, dialogProps),\n    className: classnames(className, handleBasicClasses({\n      kind: kind,\n      prefix: CLASSNAME\n    }))\n  }, forwardedProps), React.createElement(\"header\", null, React.createElement(Toolbar, {\n    className: \"lumx-spacing-margin-horizontal\",\n    before: React.createElement(Icon, {\n      icon: icon,\n      size: Size.s,\n      color: color\n    }),\n    label: React.createElement(\"h2\", {\n      id: titleId,\n      className: \"lumx-typography-title\"\n    }, title)\n  })), children && React.createElement(DescriptionElement, {\n    id: descriptionId,\n    className: \"lumx-typography-body2 lumx-spacing-padding-vertical-big lumx-spacing-padding-horizontal-huge\"\n  }, children), React.createElement(\"footer\", null, React.createElement(Toolbar, {\n    className: \"lumx-spacing-margin-horizontal\",\n    after: React.createElement(React.Fragment, null, cancelProps && React.createElement(Button, _extends({}, forwardedCancelProps, {\n      ref: cancelButtonRef,\n      emphasis: Emphasis.medium,\n      onClick: cancelOnClick\n    }), cancelLabel), React.createElement(Button, _extends({}, forwardedConfirmProps, {\n      ref: confirmationButtonRef,\n      color: color,\n      className: \"lumx-spacing-margin-left-regular\",\n      onClick: confirmOnClick\n    }), confirmLabel))\n  })));\n});\nAlertDialog.displayName = COMPONENT_NAME;\nAlertDialog.className = CLASSNAME;\nAlertDialog.defaultProps = DEFAULT_PROPS;\nexport { AlertDialog as A };","map":{"version":3,"sources":["../../../src/components/alert-dialog/AlertDialog.tsx"],"names":["CONFIG","Kind","color","ColorPalette","icon","mdiAlert","mdiInformation","mdiCheckCircle","mdiAlertCircle","COMPONENT_NAME","CLASSNAME","getRootClassName","DEFAULT_PROPS","size","Size","kind","info","AlertDialog","forwardRef","id","title","className","cancelProps","confirmProps","dialogProps","children","forwardedProps","props","cancelButtonRef","React","confirmationButtonRef","uniqueId","uid","titleId","descriptionId","DescriptionElement","confirmLabel","confirmOnClick","forwardedConfirmProps","cancelLabel","cancelOnClick","forwardedCancelProps","role","classNames","handleBasicClasses","prefix","Emphasis"],"mappings":"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","sourcesContent":["import React, { forwardRef } from 'react';\n\nimport classNames from 'classnames';\n\nimport {\n    DialogProps,\n    Dialog,\n    Button,\n    Emphasis,\n    ColorPalette,\n    Icon,\n    Size,\n    Kind,\n    Toolbar,\n    ButtonProps,\n} from '@lumx/react';\n\nimport { mdiAlert, mdiAlertCircle, mdiCheckCircle, mdiInformation } from '@lumx/icons/';\nimport { uid } from 'uid';\nimport { Comp, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\n\nexport interface AlertDialogProps extends Omit<DialogProps, 'header' | 'footer'> {\n    /** Message variant. */\n    kind?: Kind;\n    /** Dialog title. */\n    title?: string;\n    /** Props forwarded to the confirm button */\n    confirmProps: ButtonProps & {\n        onClick(): void;\n        label: string;\n    };\n    /**\n     * Props forwarded to the cancel button.\n     * Will not render a cancel button if undefined.\n     */\n    cancelProps?: ButtonProps & {\n        onClick(): void;\n        label: string;\n    };\n}\n\n/**\n * Associative map from message kind to color and icon.\n */\nconst CONFIG = {\n    [Kind.error]: { color: ColorPalette.red, icon: mdiAlert },\n    [Kind.info]: { color: ColorPalette.blue, icon: mdiInformation },\n    [Kind.success]: { color: ColorPalette.green, icon: mdiCheckCircle },\n    [Kind.warning]: { color: ColorPalette.yellow, icon: mdiAlertCircle },\n};\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'AlertDialog';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<DialogProps> = {\n    size: Size.tiny,\n    kind: Kind.info,\n};\n\n/**\n * AlertDialog component.\n *\n * An alert dialog is a modal dialog that interrupts the user's workflow to\n * communicate an important message and acquire a response.\n *\n * It should not have a complex content.\n * Children of this component should only be strings, paragraphs or links.\n */\nexport const AlertDialog: Comp<AlertDialogProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const {\n        id,\n        title,\n        className,\n        cancelProps,\n        confirmProps,\n        kind,\n        size,\n        dialogProps,\n        children,\n        ...forwardedProps\n    } = props;\n\n    const cancelButtonRef = React.useRef(null);\n    const confirmationButtonRef = React.useRef(null);\n    const { color, icon } = CONFIG[kind as Kind] || {};\n\n    // Define a unique ID to target title and description for aria attributes.\n    const uniqueId = React.useMemo(() => id || uid(), [id]);\n    const titleId = `${uniqueId}-title`;\n    const descriptionId = `${uniqueId}-description`;\n\n    // If content is a string, set in a paragraph.\n    const DescriptionElement = typeof children === 'string' ? 'p' : 'div';\n\n    const { label: confirmLabel, onClick: confirmOnClick, ...forwardedConfirmProps } = confirmProps;\n    const { label: cancelLabel, onClick: cancelOnClick, ...forwardedCancelProps } = cancelProps || {};\n\n    return (\n        <Dialog\n            ref={ref}\n            focusElement={cancelProps ? cancelButtonRef : confirmationButtonRef}\n            size={size}\n            dialogProps={{\n                id: uniqueId,\n                role: 'alertdialog',\n                'aria-labelledby': titleId,\n                'aria-describedby': descriptionId,\n                ...dialogProps,\n            }}\n            className={classNames(\n                className,\n                handleBasicClasses({\n                    kind,\n                    prefix: CLASSNAME,\n                }),\n            )}\n            {...forwardedProps}\n        >\n            <header>\n                <Toolbar\n                    className=\"lumx-spacing-margin-horizontal\"\n                    before={<Icon icon={icon} size={Size.s} color={color} />}\n                    label={\n                        <h2 id={titleId} className=\"lumx-typography-title\">\n                            {title}\n                        </h2>\n                    }\n                />\n            </header>\n\n            {children && (\n                <DescriptionElement\n                    id={descriptionId}\n                    className=\"lumx-typography-body2 lumx-spacing-padding-vertical-big lumx-spacing-padding-horizontal-huge\"\n                >\n                    {children}\n                </DescriptionElement>\n            )}\n\n            <footer>\n                <Toolbar\n                    className=\"lumx-spacing-margin-horizontal\"\n                    after={\n                        <>\n                            {cancelProps && (\n                                <Button\n                                    {...forwardedCancelProps}\n                                    ref={cancelButtonRef}\n                                    emphasis={Emphasis.medium}\n                                    onClick={cancelOnClick}\n                                >\n                                    {cancelLabel}\n                                </Button>\n                            )}\n                            <Button\n                                {...forwardedConfirmProps}\n                                ref={confirmationButtonRef}\n                                color={color}\n                                className=\"lumx-spacing-margin-left-regular\"\n                                onClick={confirmOnClick}\n                            >\n                                {confirmLabel}\n                            </Button>\n                        </>\n                    }\n                />\n            </footer>\n        </Dialog>\n    );\n});\n\nAlertDialog.displayName = COMPONENT_NAME;\nAlertDialog.className = CLASSNAME;\nAlertDialog.defaultProps = DEFAULT_PROPS;\n"]},"metadata":{},"sourceType":"module"}