{"ast":null,"code":"import { Emphasis, Size, Theme } from './components.js';\nimport { g as getRootClassName, a as _objectWithoutProperties, d as classnames, e as getBasicClass, b as _extends, c as _objectSpread2 } from './getRootClassName.js';\nimport React, { forwardRef } from 'react';\nimport isEmpty from 'lodash/isEmpty';\nimport { B as ButtonRoot } from './ButtonRoot.js';\nimport { I as Icon } from './Icon2.js';\n/**\n * Button emphasis definition.\n * @deprecated Use Emphasis instead.\n */\n\nvar ButtonEmphasis = Emphasis;\n/**\n * Defines the props of the component.\n */\n\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME = 'Button';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME = getRootClassName(COMPONENT_NAME);\n/**\n * Component default props.\n */\n\nvar DEFAULT_PROPS = {\n  emphasis: Emphasis.high,\n  size: Size.m,\n  theme: Theme.light\n};\n/**\n * Button component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar Button = forwardRef(function (props, ref) {\n  var children = props.children,\n      className = props.className,\n      emphasis = props.emphasis,\n      leftIcon = props.leftIcon,\n      rightIcon = props.rightIcon,\n      size = props.size,\n      theme = props.theme,\n      forwardedProps = _objectWithoutProperties(props, [\"children\", \"className\", \"emphasis\", \"leftIcon\", \"rightIcon\", \"size\", \"theme\"]);\n\n  var buttonClassName = classnames(className, getBasicClass({\n    prefix: CLASSNAME,\n    type: 'hasLeftIcon',\n    value: !isEmpty(leftIcon)\n  }), getBasicClass({\n    prefix: CLASSNAME,\n    type: 'hasRightIcon',\n    value: !isEmpty(rightIcon)\n  }));\n  return React.createElement(ButtonRoot, _extends({\n    ref: ref\n  }, _objectSpread2({\n    emphasis: emphasis,\n    size: size,\n    theme: theme\n  }, forwardedProps), {\n    className: buttonClassName,\n    variant: \"button\"\n  }), leftIcon && !isEmpty(leftIcon) && React.createElement(Icon, {\n    icon: leftIcon\n  }), children && React.createElement(\"span\", null, children), rightIcon && !isEmpty(rightIcon) && React.createElement(Icon, {\n    icon: rightIcon\n  }));\n});\nButton.displayName = COMPONENT_NAME;\nButton.className = CLASSNAME;\nButton.defaultProps = DEFAULT_PROPS;\nexport { ButtonEmphasis as B, Button as a };","map":{"version":3,"sources":["../../../src/components/button/Button.tsx"],"names":["ButtonEmphasis","Emphasis","COMPONENT_NAME","CLASSNAME","getRootClassName","DEFAULT_PROPS","emphasis","size","Size","theme","Theme","light","Button","forwardRef","children","className","leftIcon","rightIcon","forwardedProps","props","buttonClassName","classNames","getBasicClass","prefix","type","value","isEmpty","ref"],"mappings":";;;;;;AASA;;;;;IAIaA,cAAc,GAAGC,Q;AAE9B;;;;AAYA;;;;AAGA,IAAMC,cAAc,GAApB,QAAA;AAEA;;;;AAGA,IAAMC,SAAS,GAAGC,gBAAgB,CAAlC,cAAkC,CAAlC;AAEA;;;;AAGA,IAAMC,aAAmC,GAAG;AACxCC,EAAAA,QAAQ,EAAEL,QAAQ,CADsB,IAAA;AAExCM,EAAAA,IAAI,EAAEC,IAAI,CAF8B,CAAA;AAGxCC,EAAAA,KAAK,EAAEC,KAAK,CAACC;AAH2B,CAA5C;AAMA;;;;;;;;IAOaC,MAAgE,GAAGC,UAAU,CAAC,UAAA,KAAA,EAAA,GAAA,EAAgB;AAAA,MAC/FC,QAD+F,GACRK,KADQ,CAAA,QAAA;AAAA,MACrFJ,SADqF,GACRI,KADQ,CAAA,SAAA;AAAA,MAC1Eb,QAD0E,GACRa,KADQ,CAAA,QAAA;AAAA,MAChEH,QADgE,GACRG,KADQ,CAAA,QAAA;AAAA,MACtDF,SADsD,GACRE,KADQ,CAAA,SAAA;AAAA,MAC3CZ,IAD2C,GACRY,KADQ,CAAA,IAAA;AAAA,MACrCV,KADqC,GACRU,KADQ,CAAA,KAAA;AAAA,MAC3BD,cAD2B,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,UAAA,EAAA,WAAA,EAAA,UAAA,EAAA,UAAA,EAAA,WAAA,EAAA,MAAA,EAAA,OAAA,CAAA,CAAA;;AAGvG,MAAME,eAAe,GAAGC,UAAU,CAAA,SAAA,EAE9BC,aAAa,CAAC;AAAEC,IAAAA,MAAM,EAAR,SAAA;AAAqBC,IAAAA,IAAI,EAAzB,aAAA;AAA0CC,IAAAA,KAAK,EAAE,CAACC,OAAO,CAAA,QAAA;AAAzD,GAAD,CAFiB,EAG9BJ,aAAa,CAAC;AAAEC,IAAAA,MAAM,EAAR,SAAA;AAAqBC,IAAAA,IAAI,EAAzB,cAAA;AAA2CC,IAAAA,KAAK,EAAE,CAACC,OAAO,CAAA,SAAA;AAA1D,GAAD,CAHiB,CAAlC;AAMA,SACI,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,QAAA,CAAA;AACI,IAAA,GAAG,EAAEC;AADT,GAAA,EAAA,cAAA,CAAA;AAEUrB,IAAAA,QAAQ,EAFlB,QAAA;AAEoBC,IAAAA,IAAI,EAFxB,IAAA;AAE0BE,IAAAA,KAAK,EAALA;AAF1B,GAAA,EAAA,cAAA,CAAA,EAAA;AAGI,IAAA,SAAS,EAHb,eAAA;AAII,IAAA,OAAO,EAAC;AAJZ,GAAA,CAAA,EAMKO,QAAQ,IAAI,CAACU,OAAO,CAApBV,QAAoB,CAApBA,IAAkC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,IAAI,EAAEA;AAAZ,GAAA,CANvC,EAOKF,QAAQ,IAAI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,IAAA,EAPjB,QAOiB,CAPjB,EAQKG,SAAS,IAAI,CAACS,OAAO,CAArBT,SAAqB,CAArBA,IAAoC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,IAAI,EAAEA;AAAZ,GAAA,CARzC,CADJ;AATsF,CAAA,C;AAsB1FL,MAAM,CAANA,WAAAA,GAAAA,cAAAA;AACAA,MAAM,CAANA,SAAAA,GAAAA,SAAAA;AACAA,MAAM,CAANA,YAAAA,GAAAA,aAAAA","sourcesContent":["import React, { forwardRef, ReactNode } from 'react';\n\nimport classNames from 'classnames';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { Emphasis, Icon, Size, Theme } from '@lumx/react';\nimport { Comp, getBasicClass, getRootClassName } from '@lumx/react/utils';\nimport { BaseButtonProps, ButtonRoot } from './ButtonRoot';\n\n/**\n * Button emphasis definition.\n * @deprecated Use Emphasis instead.\n */\nexport const ButtonEmphasis = Emphasis;\n\n/**\n * Defines the props of the component.\n */\nexport interface ButtonProps extends BaseButtonProps {\n    /** Button content. */\n    children?: ReactNode;\n    /** Left icon (SVG path). */\n    leftIcon?: string;\n    /** Right icon (SVG path). */\n    rightIcon?: string;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'Button';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<ButtonProps> = {\n    emphasis: Emphasis.high,\n    size: Size.m,\n    theme: Theme.light,\n};\n\n/**\n * Button component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const Button: Comp<ButtonProps, HTMLButtonElement | HTMLAnchorElement> = forwardRef((props, ref) => {\n    const { children, className, emphasis, leftIcon, rightIcon, size, theme, ...forwardedProps } = props;\n\n    const buttonClassName = classNames(\n        className,\n        getBasicClass({ prefix: CLASSNAME, type: 'hasLeftIcon', value: !isEmpty(leftIcon) }),\n        getBasicClass({ prefix: CLASSNAME, type: 'hasRightIcon', value: !isEmpty(rightIcon) }),\n    );\n\n    return (\n        <ButtonRoot\n            ref={ref}\n            {...{ emphasis, size, theme, ...forwardedProps }}\n            className={buttonClassName}\n            variant=\"button\"\n        >\n            {leftIcon && !isEmpty(leftIcon) && <Icon icon={leftIcon} />}\n            {children && <span>{children}</span>}\n            {rightIcon && !isEmpty(rightIcon) && <Icon icon={rightIcon} />}\n        </ButtonRoot>\n    );\n});\nButton.displayName = COMPONENT_NAME;\nButton.className = CLASSNAME;\nButton.defaultProps = DEFAULT_PROPS;\n"]},"metadata":{},"sourceType":"module"}