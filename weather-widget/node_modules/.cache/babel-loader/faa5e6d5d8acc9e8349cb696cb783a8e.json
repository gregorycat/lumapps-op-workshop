{"ast":null,"code":"var _jsxFileName = \"/home/grej/extensions/lumapps-op-workshop/weather-widget/src/widget/WidgetSettings.tsx\";\n\n/* eslint-disable react/require-default-props */\nimport React, { useEffect, useState } from 'react';\nimport { TextField, Select, List, ListItem, Size, Switch } from '@lumx/react';\nimport { FormattedMessage, IntlProvider } from 'react-intl';\nimport { PredefinedErrorBoundary, useDebounce, useExportProps } from '@lumapps-extensions-playground/common';\nimport messagesEn from '../translations/en.json';\nimport messagesFr from '../translations/fr.json';\nconst UNITS = [{\n  label: '°C',\n  type: 'metric'\n}, {\n  label: '°F',\n  type: 'imperial'\n}];\nconst COLORS = [{\n  code: '6E49F5',\n  label: 'Majorell Blue'\n}, {\n  code: '011638',\n  label: 'Oxford Blue'\n}, {\n  code: 'ED6A5A',\n  label: 'Terra Cotta'\n}, {\n  code: '004F2D',\n  label: 'Forest Green Traditional Cotta'\n}, {\n  code: '9FA2B2',\n  label: 'Manatee'\n}, {\n  code: '310D20',\n  label: 'Dark Purple'\n}, {\n  code: '03B5AA',\n  label: 'Light Sea Green'\n}];\n\nconst WithIntlSettings = ({\n  properties = {},\n  exportProp\n}) => {\n  const [cityName, setCityName] = useState('');\n  const [isUnitOpen, setUnitOpen] = useState(false);\n  const [isColorOpen, setColorOpen] = useState(false);\n  const [isCurrentUser, setCurentuser] = useState(false);\n  const [isDisplayForecast, setDisplayForecast] = useState(false);\n  const [unit, setUnit] = React.useState(UNITS[0]);\n  const [color, setColor] = React.useState(COLORS[0]);\n  const debouncedCityName = useDebounce(cityName, 800);\n  useExportProps(debouncedCityName, 'cityName', properties, exportProp);\n  useExportProps(unit, 'unit', properties, exportProp);\n  useExportProps(color, 'color', properties, exportProp);\n  useExportProps(isCurrentUser, 'isCurrentUser', properties, exportProp);\n  useExportProps(isDisplayForecast, 'isDisplayForecast', properties, exportProp);\n\n  const closeUnitSelect = () => setUnitOpen(false);\n\n  const toggleUnitSelect = () => setUnitOpen(!isUnitOpen);\n\n  const selectUnit = item => () => {\n    setUnit(item);\n    closeUnitSelect();\n  };\n\n  const closeColorSelect = () => setColorOpen(false);\n\n  const toggleColorSelect = () => setColorOpen(!isUnitOpen);\n\n  const selectColor = item => () => {\n    setColor(item);\n    closeColorSelect();\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Switch, {\n    isChecked: isCurrentUser,\n    onChange: setCurentuser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"settings.user_switch\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  })), !isCurrentUser && /*#__PURE__*/React.createElement(TextField, {\n    className: \"mt0 ml lumx-spacing-margin-vertical-big\",\n    label: /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"settings.city_name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 29\n      }\n    }),\n    value: cityName,\n    onChange: setCityName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: 12,\n      marginBottom: 12\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    style: {\n      width: '100%'\n    },\n    isOpen: isUnitOpen,\n    value: unit.label,\n    label: /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"settings.unit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 29\n      }\n    }),\n    onInputClick: toggleUnitSelect,\n    onDropdownClose: closeUnitSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }\n  }, UNITS.length > 0 ? UNITS.map(choice => /*#__PURE__*/React.createElement(ListItem, {\n    isSelected: unit.type === choice.type,\n    key: choice.type,\n    onItemSelected: selectUnit(choice),\n    size: Size.tiny,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 35\n    }\n  }, choice.label)) : [/*#__PURE__*/React.createElement(ListItem, {\n    key: 0,\n    size: Size.tiny,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 35\n    }\n  }, \"No data\")]))), /*#__PURE__*/React.createElement(Switch, {\n    isChecked: isDisplayForecast,\n    onChange: setDisplayForecast,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"settings.display_forecast\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: 12,\n      marginBottom: 12\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    style: {\n      width: '100%'\n    },\n    isOpen: isColorOpen,\n    value: color.label,\n    label: /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"settings.color\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 29\n      }\n    }),\n    onInputClick: toggleColorSelect,\n    onDropdownClose: closeColorSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 21\n    }\n  }, COLORS.length > 0 ? COLORS.map(choice => /*#__PURE__*/React.createElement(ListItem, {\n    isSelected: color.code === choice.code,\n    key: choice.code,\n    onItemSelected: selectColor(choice),\n    size: Size.tiny,\n    before: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: 24,\n        height: 24,\n        backgroundColor: `#${choice.code}`,\n        borderWidth: 2,\n        borderStyle: 'solid',\n        borderColor: '#FFFFFF',\n        borderRadius: '50%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 43\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 35\n    }\n  }, choice.label)) : [/*#__PURE__*/React.createElement(ListItem, {\n    key: 0,\n    size: Size.tiny,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 35\n    }\n  }, \"No data\")]))));\n};\n\nexport const WidgetSettings = ({\n  properties = {},\n  exportProp = undefined\n}) => {\n  const messages = {\n    en: messagesEn,\n    fr: messagesFr\n  };\n  const [lang, setLang] = useState('en');\n  const displayLanguage = 'en';\n  useEffect(() => {\n    const getContext = async () => {\n      const isLangInTrad = Object.keys(messages).includes(displayLanguage);\n      setLang(isLangInTrad ? displayLanguage : 'en');\n    };\n\n    getContext();\n  }, [displayLanguage, messages]);\n  return /*#__PURE__*/React.createElement(PredefinedErrorBoundary, {\n    lang: lang,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(IntlProvider, {\n    locale: lang,\n    messages: messages[lang],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(WithIntlSettings, {\n    properties: properties,\n    exportProp: exportProp,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 17\n    }\n  })));\n};","map":{"version":3,"sources":["/home/grej/extensions/lumapps-op-workshop/weather-widget/src/widget/WidgetSettings.tsx"],"names":["React","useEffect","useState","TextField","Select","List","ListItem","Size","Switch","FormattedMessage","IntlProvider","PredefinedErrorBoundary","useDebounce","useExportProps","messagesEn","messagesFr","UNITS","label","type","COLORS","code","WithIntlSettings","properties","exportProp","cityName","setCityName","isUnitOpen","setUnitOpen","isColorOpen","setColorOpen","isCurrentUser","setCurentuser","isDisplayForecast","setDisplayForecast","unit","setUnit","color","setColor","debouncedCityName","closeUnitSelect","toggleUnitSelect","selectUnit","item","closeColorSelect","toggleColorSelect","selectColor","marginTop","marginBottom","width","length","map","choice","tiny","height","backgroundColor","borderWidth","borderStyle","borderColor","borderRadius","WidgetSettings","undefined","messages","en","fr","lang","setLang","displayLanguage","getContext","isLangInTrad","Object","keys","includes"],"mappings":"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","sourcesContent":["/* eslint-disable react/require-default-props */\nimport React, { useEffect, useState } from 'react';\nimport { TextField, Select, List, ListItem, Size, Switch } from '@lumx/react';\n\nimport { FormattedMessage, IntlProvider } from 'react-intl';\nimport { PredefinedErrorBoundary, useDebounce, useExportProps } from '@lumapps-extensions-playground/common';\n\nimport messagesEn from '../translations/en.json';\nimport messagesFr from '../translations/fr.json';\n\ninterface WithIntlSettingsProps {\n    properties?: any;\n    exportProp: any;\n}\n\nconst UNITS = [\n    {\n        label: '°C',\n        type: 'metric',\n    },\n    {\n        label: '°F',\n        type: 'imperial',\n    },\n];\n\nconst COLORS = [\n    {\n        code: '6E49F5',\n        label: 'Majorell Blue',\n    },\n    {\n        code: '011638',\n        label: 'Oxford Blue',\n    },\n    {\n        code: 'ED6A5A',\n        label: 'Terra Cotta',\n    },\n    {\n        code: '004F2D',\n        label: 'Forest Green Traditional Cotta',\n    },\n    {\n        code: '9FA2B2',\n        label: 'Manatee',\n    },\n    {\n        code: '310D20',\n        label: 'Dark Purple',\n    },\n    {\n        code: '03B5AA',\n        label: 'Light Sea Green',\n    },\n];\n\nconst WithIntlSettings: React.FC<WithIntlSettingsProps> = ({ properties = {}, exportProp }) => {\n    const [cityName, setCityName] = useState('');\n    const [isUnitOpen, setUnitOpen] = useState(false);\n    const [isColorOpen, setColorOpen] = useState(false);\n    const [isCurrentUser, setCurentuser] = useState(false);\n    const [isDisplayForecast, setDisplayForecast] = useState(false);\n    const [unit, setUnit] = React.useState(UNITS[0]);\n    const [color, setColor] = React.useState(COLORS[0]);\n\n    const debouncedCityName = useDebounce(cityName, 800);\n    useExportProps(debouncedCityName, 'cityName', properties, exportProp);\n    useExportProps(unit, 'unit', properties, exportProp);\n    useExportProps(color, 'color', properties, exportProp);\n    useExportProps(isCurrentUser, 'isCurrentUser', properties, exportProp);\n    useExportProps(isDisplayForecast, 'isDisplayForecast', properties, exportProp);\n\n    const closeUnitSelect = () => setUnitOpen(false);\n    const toggleUnitSelect = () => setUnitOpen(!isUnitOpen);\n    const selectUnit = (item: any) => () => {\n        setUnit(item);\n        closeUnitSelect();\n    };\n\n    const closeColorSelect = () => setColorOpen(false);\n    const toggleColorSelect = () => setColorOpen(!isUnitOpen);\n    const selectColor = (item: any) => () => {\n        setColor(item);\n        closeColorSelect();\n    };\n\n    return (\n        <>\n            <Switch isChecked={isCurrentUser} onChange={setCurentuser}>\n                <FormattedMessage id=\"settings.user_switch\" />\n            </Switch>\n            {!isCurrentUser && (\n                <TextField\n                    className=\"mt0 ml lumx-spacing-margin-vertical-big\"\n                    label={(<FormattedMessage id=\"settings.city_name\" />) as any}\n                    value={cityName}\n                    onChange={setCityName}\n                />\n            )}\n            <div style={{ marginTop: 12, marginBottom: 12 }}>\n                <Select\n                    style={{ width: '100%' }}\n                    isOpen={isUnitOpen}\n                    value={unit.label}\n                    label={(<FormattedMessage id=\"settings.unit\" />) as any}\n                    onInputClick={toggleUnitSelect}\n                    onDropdownClose={closeUnitSelect}\n                >\n                    <List>\n                        {UNITS.length > 0\n                            ? UNITS.map((choice) => (\n                                  <ListItem\n                                      isSelected={unit.type === choice.type}\n                                      key={choice.type}\n                                      onItemSelected={selectUnit(choice)}\n                                      size={Size.tiny}\n                                  >\n                                      {choice.label}\n                                  </ListItem>\n                              ))\n                            : [\n                                  <ListItem key={0} size={Size.tiny}>\n                                      No data\n                                  </ListItem>,\n                              ]}\n                    </List>\n                </Select>\n            </div>\n\n            <Switch isChecked={isDisplayForecast} onChange={setDisplayForecast}>\n                <FormattedMessage id=\"settings.display_forecast\" />\n            </Switch>\n\n            <div style={{ marginTop: 12, marginBottom: 12 }}>\n                <Select\n                    style={{ width: '100%' }}\n                    isOpen={isColorOpen}\n                    value={color.label}\n                    label={(<FormattedMessage id=\"settings.color\" />) as any}\n                    onInputClick={toggleColorSelect}\n                    onDropdownClose={closeColorSelect}\n                >\n                    <List>\n                        {COLORS.length > 0\n                            ? COLORS.map((choice) => (\n                                  <ListItem\n                                      isSelected={color.code === choice.code}\n                                      key={choice.code}\n                                      onItemSelected={selectColor(choice)}\n                                      size={Size.tiny}\n                                      before={\n                                          <div\n                                              style={{\n                                                  width: 24,\n                                                  height: 24,\n                                                  backgroundColor: `#${choice.code}`,\n                                                  borderWidth: 2,\n                                                  borderStyle: 'solid',\n                                                  borderColor: '#FFFFFF',\n                                                  borderRadius: '50%',\n                                              }}\n                                          />\n                                      }\n                                  >\n                                      {choice.label}\n                                  </ListItem>\n                              ))\n                            : [\n                                  <ListItem key={0} size={Size.tiny}>\n                                      No data\n                                  </ListItem>,\n                              ]}\n                    </List>\n                </Select>\n            </div>\n        </>\n    );\n};\n\nexport const WidgetSettings: React.FC<any> = ({ properties = {}, exportProp = undefined }) => {\n    const messages: any = {\n        en: messagesEn,\n        fr: messagesFr,\n    };\n\n    const [lang, setLang] = useState<string>('en');\n    const displayLanguage = 'en';\n\n    useEffect(() => {\n        const getContext = async () => {\n            const isLangInTrad = Object.keys(messages).includes(displayLanguage);\n\n            setLang(isLangInTrad ? displayLanguage : 'en');\n        };\n        getContext();\n    }, [displayLanguage, messages]);\n\n    return (\n        <PredefinedErrorBoundary lang={lang}>\n            <IntlProvider locale={lang} messages={messages[lang]}>\n                <WithIntlSettings properties={properties} exportProp={exportProp} />\n            </IntlProvider>\n        </PredefinedErrorBoundary>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}