{"ast":null,"code":"import { Theme } from './components.js';\nimport { g as getRootClassName, a as _objectWithoutProperties, b as _extends, d as classnames, h as handleBasicClasses, c as _objectSpread2 } from './getRootClassName.js';\nimport React, { forwardRef } from 'react';\n/**\n * Defines the props of the component.\n */\n\nvar DEFAULT_PROPS = {\n  theme: Theme.light\n};\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME = 'SkeletonCircle';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME = getRootClassName(COMPONENT_NAME);\n/**\n * SkeletonCircle component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar SkeletonCircle = forwardRef(function (props, ref) {\n  var className = props.className,\n      size = props.size,\n      theme = props.theme,\n      forwardedProps = _objectWithoutProperties(props, [\"className\", \"size\", \"theme\"]);\n\n  return React.createElement(\"div\", _extends({\n    ref: ref\n  }, forwardedProps, {\n    className: classnames(className, handleBasicClasses({\n      prefix: CLASSNAME,\n      size: size,\n      theme: theme\n    }))\n  }));\n});\nSkeletonCircle.displayName = COMPONENT_NAME;\nSkeletonCircle.defaultProps = DEFAULT_PROPS;\nSkeletonCircle.className = CLASSNAME;\n/**\n * Skeleton variants.\n */\n\nvar SkeletonRectangleVariant = {\n  squared: 'squared',\n  rounded: 'rounded',\n  pill: 'pill'\n};\nvar DEFAULT_PROPS$1 = {\n  theme: Theme.light,\n  variant: SkeletonRectangleVariant.squared\n};\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME$1 = 'SkeletonRectangle';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME$1 = getRootClassName(COMPONENT_NAME$1);\n/**\n * SkeletonRectangle component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar SkeletonRectangle = forwardRef(function (props, ref) {\n  var aspectRatio = props.aspectRatio,\n      className = props.className,\n      height = props.height,\n      theme = props.theme,\n      variant = props.variant,\n      width = props.width,\n      forwardedProps = _objectWithoutProperties(props, [\"aspectRatio\", \"className\", \"height\", \"theme\", \"variant\", \"width\"]);\n\n  return React.createElement(\"div\", _extends({\n    ref: ref\n  }, forwardedProps, {\n    className: classnames(className, handleBasicClasses({\n      prefix: CLASSNAME$1,\n      aspectRatio: aspectRatio,\n      height: aspectRatio ? undefined : height,\n      theme: theme,\n      variant: variant,\n      width: width\n    }))\n  }), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME$1, \"__inner\")\n  }));\n});\nSkeletonRectangle.displayName = COMPONENT_NAME$1;\nSkeletonRectangle.className = CLASSNAME$1;\nSkeletonRectangle.defaultProps = DEFAULT_PROPS$1;\n/**\n * Defines the props of the component.\n */\n\nvar DEFAULT_PROPS$2 = {\n  theme: Theme.light\n};\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME$2 = 'SkeletonTypography';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME$2 = getRootClassName(COMPONENT_NAME$2);\n/**\n * SkeletonTypography component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar SkeletonTypography = forwardRef(function (props, ref) {\n  var className = props.className,\n      theme = props.theme,\n      typography = props.typography,\n      width = props.width,\n      forwardedProps = _objectWithoutProperties(props, [\"className\", \"theme\", \"typography\", \"width\"]);\n\n  return React.createElement(\"div\", _extends({\n    ref: ref\n  }, forwardedProps, {\n    className: classnames(className, handleBasicClasses({\n      prefix: CLASSNAME$2,\n      theme: theme,\n      typography: typography\n    })),\n    style: _objectSpread2({}, forwardedProps.style, {\n      width: width\n    })\n  }), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME$2, \"__inner\")\n  }));\n});\nSkeletonTypography.displayName = COMPONENT_NAME$2;\nSkeletonTypography.defaultProps = DEFAULT_PROPS$2;\nSkeletonTypography.className = CLASSNAME$2;\nexport { SkeletonCircle as S, SkeletonRectangleVariant as a, SkeletonRectangle as b, SkeletonTypography as c };","map":{"version":3,"sources":["../../../src/components/skeleton/SkeletonCircle.tsx","../../../src/components/skeleton/SkeletonRectangle.tsx","../../../src/components/skeleton/SkeletonTypography.tsx"],"names":["DEFAULT_PROPS","theme","Theme","light","COMPONENT_NAME","CLASSNAME","getRootClassName","SkeletonCircle","forwardRef","className","size","forwardedProps","props","ref","classNames","handleBasicClasses","prefix","SkeletonRectangleVariant","squared","rounded","pill","variant","SkeletonRectangle","aspectRatio","height","width","SkeletonTypography","typography"],"mappings":"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","sourcesContent":["import classNames from 'classnames';\nimport React, { forwardRef } from 'react';\n\nimport { GlobalSize, Theme } from '@lumx/react';\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\n\n/**\n * Defines the props of the component.\n */\nexport interface SkeletonCircleProps extends GenericProps {\n    /** Size variant. */\n    size: GlobalSize;\n    /** Theme. */\n    theme?: Theme;\n}\n\nconst DEFAULT_PROPS: Partial<SkeletonCircleProps> = {\n    theme: Theme.light,\n};\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'SkeletonCircle';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * SkeletonCircle component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const SkeletonCircle: Comp<SkeletonCircleProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const { className, size, theme, ...forwardedProps } = props;\n\n    return (\n        <div\n            ref={ref}\n            {...forwardedProps}\n            className={classNames(className, handleBasicClasses({ prefix: CLASSNAME, size, theme }))}\n        />\n    );\n});\nSkeletonCircle.displayName = COMPONENT_NAME;\nSkeletonCircle.defaultProps = DEFAULT_PROPS;\nSkeletonCircle.className = CLASSNAME;\n","import classNames from 'classnames';\nimport React, { forwardRef } from 'react';\n\nimport { AspectRatio, GlobalSize, Theme } from '@lumx/react';\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses, ValueOf } from '@lumx/react/utils';\n\n/**\n * Skeleton variants.\n */\nexport const SkeletonRectangleVariant = { squared: 'squared', rounded: 'rounded', pill: 'pill' } as const;\nexport type SkeletonRectangleVariant = ValueOf<typeof SkeletonRectangleVariant>;\n\n/**\n * Defines the props of the component.\n */\nexport interface SkeletonRectangleProps extends GenericProps {\n    /** Aspect ratio (use with width and not height). */\n    aspectRatio?: Extract<AspectRatio, 'square' | 'horizontal' | 'vertical' | 'wide'>;\n    /** Height size. */\n    height?: GlobalSize;\n    /** Theme adapting the component to light or dark background. */\n    theme?: Theme;\n    /** Border variant. */\n    variant?: SkeletonRectangleVariant;\n    /** Width size. */\n    width?: GlobalSize;\n}\n\nconst DEFAULT_PROPS: Partial<SkeletonRectangleProps> = {\n    theme: Theme.light,\n    variant: SkeletonRectangleVariant.squared,\n};\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'SkeletonRectangle';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * SkeletonRectangle component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const SkeletonRectangle: Comp<SkeletonRectangleProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const { aspectRatio, className, height, theme, variant, width, ...forwardedProps } = props;\n\n    return (\n        <div\n            ref={ref}\n            {...forwardedProps}\n            className={classNames(\n                className,\n                handleBasicClasses({\n                    prefix: CLASSNAME,\n                    aspectRatio,\n                    height: aspectRatio ? undefined : height,\n                    theme,\n                    variant,\n                    width,\n                }),\n            )}\n        >\n            <div className={`${CLASSNAME}__inner`} />\n        </div>\n    );\n});\nSkeletonRectangle.displayName = COMPONENT_NAME;\nSkeletonRectangle.className = CLASSNAME;\nSkeletonRectangle.defaultProps = DEFAULT_PROPS;\n","import classNames from 'classnames';\nimport React, { CSSProperties, forwardRef } from 'react';\n\nimport { Theme, Typography } from '@lumx/react';\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\n\n/**\n * Defines the props of the component.\n */\nexport interface SkeletonTypographyProps extends GenericProps {\n    /** Theme adapting the component to light or dark background. */\n    theme?: Theme;\n    /** Typography variant. */\n    typography: Typography;\n    /** Width CSS property. */\n    width?: CSSProperties['width'];\n}\n\nconst DEFAULT_PROPS: Partial<SkeletonTypographyProps> = {\n    theme: Theme.light,\n};\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'SkeletonTypography';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * SkeletonTypography component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const SkeletonTypography: Comp<SkeletonTypographyProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const { className, theme, typography, width, ...forwardedProps } = props;\n\n    return (\n        <div\n            ref={ref}\n            {...forwardedProps}\n            className={classNames(className, handleBasicClasses({ prefix: CLASSNAME, theme, typography }))}\n            style={{ ...forwardedProps.style, width }}\n        >\n            <div className={`${CLASSNAME}__inner`} />\n        </div>\n    );\n});\nSkeletonTypography.displayName = COMPONENT_NAME;\nSkeletonTypography.defaultProps = DEFAULT_PROPS;\nSkeletonTypography.className = CLASSNAME;\n"]},"metadata":{},"sourceType":"module"}