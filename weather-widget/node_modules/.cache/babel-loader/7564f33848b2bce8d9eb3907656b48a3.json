{"ast":null,"code":"import { Emphasis, Size, Theme } from './components.js';\nimport { g as getRootClassName, a as _objectWithoutProperties, b as _extends, c as _objectSpread2 } from './getRootClassName.js';\nimport React, { forwardRef } from 'react';\nimport 'lodash/isBoolean';\nimport 'lodash/isEmpty';\nimport 'lodash/kebabCase';\nimport 'lodash/noop';\nimport { B as ButtonRoot } from './ButtonRoot.js';\nimport { I as Icon } from './Icon2.js';\nimport { T as Tooltip } from './Tooltip2.js';\n/**\n * Defines the props of the component.\n */\n\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME = 'IconButton';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME = getRootClassName(COMPONENT_NAME);\n/**\n * Component default props.\n */\n\nvar DEFAULT_PROPS = {\n  emphasis: Emphasis.high,\n  size: Size.m,\n  theme: Theme.light\n};\n/**\n * IconButton component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar IconButton = forwardRef(function (props, ref) {\n  var emphasis = props.emphasis,\n      icon = props.icon,\n      label = props.label,\n      size = props.size,\n      theme = props.theme,\n      tooltipProps = props.tooltipProps,\n      hideTooltip = props.hideTooltip,\n      forwardedProps = _objectWithoutProperties(props, [\"emphasis\", \"icon\", \"label\", \"size\", \"theme\", \"tooltipProps\", \"hideTooltip\"]);\n\n  return React.createElement(Tooltip, _extends({\n    label: hideTooltip ? '' : label\n  }, tooltipProps), React.createElement(ButtonRoot, _extends({\n    ref: ref\n  }, _objectSpread2({\n    emphasis: emphasis,\n    size: size,\n    theme: theme\n  }, forwardedProps), {\n    \"aria-label\": label,\n    variant: \"icon\"\n  }), React.createElement(Icon, {\n    icon: icon\n  })));\n});\nIconButton.displayName = COMPONENT_NAME;\nIconButton.className = CLASSNAME;\nIconButton.defaultProps = DEFAULT_PROPS;\nexport { IconButton as I };","map":{"version":3,"sources":["../../../src/components/button/IconButton.tsx"],"names":["COMPONENT_NAME","CLASSNAME","getRootClassName","DEFAULT_PROPS","emphasis","Emphasis","size","Size","theme","Theme","light","IconButton","forwardRef","icon","label","tooltipProps","hideTooltip","forwardedProps","props","ref"],"mappings":";;;;;;;;;;AAMA;;;;AAoBA;;;;AAGA,IAAMA,cAAc,GAApB,YAAA;AAEA;;;;AAGA,IAAMC,SAAS,GAAGC,gBAAgB,CAAlC,cAAkC,CAAlC;AAEA;;;;AAGA,IAAMC,aAAuC,GAAG;AAC5CC,EAAAA,QAAQ,EAAEC,QAAQ,CAD0B,IAAA;AAE5CC,EAAAA,IAAI,EAAEC,IAAI,CAFkC,CAAA;AAG5CC,EAAAA,KAAK,EAAEC,KAAK,CAACC;AAH+B,CAAhD;AAMA;;;;;;;;IAOaC,UAAoD,GAAGC,UAAU,CAAC,UAAA,KAAA,EAAA,GAAA,EAAgB;AAAA,MACnFR,QADmF,GACEc,KADF,CAAA,QAAA;AAAA,MACzEL,IADyE,GACEK,KADF,CAAA,IAAA;AAAA,MACnEJ,KADmE,GACEI,KADF,CAAA,KAAA;AAAA,MAC5DZ,IAD4D,GACEY,KADF,CAAA,IAAA;AAAA,MACtDV,KADsD,GACEU,KADF,CAAA,KAAA;AAAA,MAC/CH,YAD+C,GACEG,KADF,CAAA,YAAA;AAAA,MACjCF,WADiC,GACEE,KADF,CAAA,WAAA;AAAA,MACjBD,cADiB,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,UAAA,EAAA,MAAA,EAAA,OAAA,EAAA,MAAA,EAAA,OAAA,EAAA,cAAA,EAAA,aAAA,CAAA,CAAA;;AAG3F,SACI,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,QAAA,CAAA;AAAS,IAAA,KAAK,EAAED,WAAW,GAAA,EAAA,GAAQF;AAAnC,GAAA,EAAA,YAAA,CAAA,EACI,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,QAAA,CAAA;AAAY,IAAA,GAAG,EAAEK;AAAjB,GAAA,EAAA,cAAA,CAAA;AAA4Bf,IAAAA,QAAQ,EAApC,QAAA;AAAsCE,IAAAA,IAAI,EAA1C,IAAA;AAA4CE,IAAAA,KAAK,EAALA;AAA5C,GAAA,EAAA,cAAA,CAAA,EAAA;AAAwE,kBAAxE,KAAA;AAA2F,IAAA,OAAO,EAAC;AAAnG,GAAA,CAAA,EACI,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,IAAI,EAAEK;AAAZ,GAAA,CADJ,CADJ,CADJ;AAH0E,CAAA,C;AAW9EF,UAAU,CAAVA,WAAAA,GAAAA,cAAAA;AACAA,UAAU,CAAVA,SAAAA,GAAAA,SAAAA;AACAA,UAAU,CAAVA,YAAAA,GAAAA,aAAAA","sourcesContent":["import React, { forwardRef } from 'react';\n\nimport { Emphasis, Icon, Size, Theme, Tooltip, TooltipProps } from '@lumx/react';\nimport { BaseButtonProps, ButtonRoot } from '@lumx/react/components/button/ButtonRoot';\nimport { Comp, getRootClassName } from '@lumx/react/utils';\n\n/**\n * Defines the props of the component.\n */\nexport interface IconButtonProps extends BaseButtonProps {\n    /** Icon (SVG path). */\n    icon: string;\n    /**\n     * Label text (required for a11y purpose).\n     * If you really don't want an aria-label, you can set an empty label (this is not recommended).\n     */\n    label: string;\n    /**\n     * Props to pass to the tooltip.\n     * If undefined or if tooltipProps.label is undefined, the label prop will be used as tooltip label.\n     * */\n    tooltipProps?: Partial<TooltipProps>;\n    /** Whether the tooltip should be hidden or not. */\n    hideTooltip?: boolean;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'IconButton';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<IconButtonProps> = {\n    emphasis: Emphasis.high,\n    size: Size.m,\n    theme: Theme.light,\n};\n\n/**\n * IconButton component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const IconButton: Comp<IconButtonProps, HTMLButtonElement> = forwardRef((props, ref) => {\n    const { emphasis, icon, label, size, theme, tooltipProps, hideTooltip, ...forwardedProps } = props;\n\n    return (\n        <Tooltip label={hideTooltip ? '' : label} {...tooltipProps}>\n            <ButtonRoot ref={ref} {...{ emphasis, size, theme, ...forwardedProps }} aria-label={label} variant=\"icon\">\n                <Icon icon={icon} />\n            </ButtonRoot>\n        </Tooltip>\n    );\n});\nIconButton.displayName = COMPONENT_NAME;\nIconButton.className = CLASSNAME;\nIconButton.defaultProps = DEFAULT_PROPS;\n"]},"metadata":{},"sourceType":"module"}