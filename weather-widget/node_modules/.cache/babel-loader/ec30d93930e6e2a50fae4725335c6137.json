{"ast":null,"code":"import { Alignment, Theme } from './components.js';\nimport { g as getRootClassName, a as _objectWithoutProperties, b as _extends, d as classnames, h as handleBasicClasses } from './getRootClassName.js';\nimport React, { forwardRef, useMemo, Children } from 'react';\nimport { u as uid } from '../index2.js';\nimport isEmpty from 'lodash/isEmpty';\nimport { I as InputHelper } from './InputHelper.js';\nimport { I as InputLabel } from './InputLabel.js';\n/**\n * Defines the props of the component.\n */\n\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME = 'Switch';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME = getRootClassName(COMPONENT_NAME);\n/**\n * Component default props.\n */\n\nvar DEFAULT_PROPS = {\n  position: Alignment.left,\n  theme: Theme.light\n};\n/**\n * Switch component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar Switch = forwardRef(function (props, ref) {\n  var checked = props.checked,\n      children = props.children,\n      className = props.className,\n      disabled = props.disabled,\n      helper = props.helper,\n      id = props.id,\n      _props$isChecked = props.isChecked,\n      isChecked = _props$isChecked === void 0 ? checked : _props$isChecked,\n      _props$isDisabled = props.isDisabled,\n      isDisabled = _props$isDisabled === void 0 ? disabled : _props$isDisabled,\n      name = props.name,\n      onChange = props.onChange,\n      position = props.position,\n      theme = props.theme,\n      value = props.value,\n      forwardedProps = _objectWithoutProperties(props, [\"checked\", \"children\", \"className\", \"disabled\", \"helper\", \"id\", \"isChecked\", \"isDisabled\", \"name\", \"onChange\", \"position\", \"theme\", \"value\"]);\n\n  var switchId = useMemo(function () {\n    return id || \"switch-\".concat(uid());\n  }, [id]);\n\n  var handleChange = function handleChange(event) {\n    if (onChange) {\n      onChange(!isChecked, value, name, event);\n    }\n  };\n\n  return React.createElement(\"div\", _extends({\n    ref: ref\n  }, forwardedProps, {\n    className: classnames(className, handleBasicClasses({\n      prefix: CLASSNAME,\n      isChecked: isChecked,\n      isDisabled: isDisabled,\n      position: position,\n      theme: theme,\n      isUnchecked: !isChecked\n    })),\n    \"aria-disabled\": isDisabled\n  }), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__input-wrapper\")\n  }, React.createElement(\"input\", {\n    type: \"checkbox\",\n    role: \"switch\",\n    id: switchId,\n    className: \"\".concat(CLASSNAME, \"__input-native\"),\n    name: name,\n    value: value,\n    disabled: isDisabled,\n    checked: isChecked,\n    \"aria-checked\": Boolean(isChecked),\n    onChange: handleChange\n  }), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__input-placeholder\")\n  }, React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__input-background\")\n  }), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__input-indicator\")\n  }))), Children.count(children) > 0 && React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__content\")\n  }, React.createElement(InputLabel, {\n    htmlFor: switchId,\n    theme: theme,\n    className: \"\".concat(CLASSNAME, \"__label\")\n  }, children), !isEmpty(helper) && React.createElement(InputHelper, {\n    theme: theme,\n    className: \"\".concat(CLASSNAME, \"__helper\")\n  }, helper)));\n});\nSwitch.displayName = COMPONENT_NAME;\nSwitch.className = CLASSNAME;\nSwitch.defaultProps = DEFAULT_PROPS;\nexport { Switch as S };","map":{"version":3,"sources":["../../../src/components/switch/Switch.tsx"],"names":["COMPONENT_NAME","CLASSNAME","getRootClassName","DEFAULT_PROPS","position","Alignment","theme","Theme","light","Switch","forwardRef","checked","children","className","disabled","helper","id","isChecked","isDisabled","name","onChange","value","forwardedProps","props","switchId","useMemo","uid","handleChange","ref","classNames","handleBasicClasses","prefix","isUnchecked","Boolean","Children","isEmpty"],"mappings":"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","sourcesContent":["import React, { Children, forwardRef, SyntheticEvent, useMemo } from 'react';\n\nimport classNames from 'classnames';\nimport { uid } from 'uid';\n\nimport isEmpty from 'lodash/isEmpty';\n\nimport { Alignment, InputHelper, InputLabel, Theme } from '@lumx/react';\n\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\n\n/**\n * Defines the props of the component.\n */\nexport interface SwitchProps extends GenericProps {\n    /** Helper text. */\n    helper?: string;\n    /** Whether it is checked or not. */\n    isChecked?: boolean;\n    /** Whether the component is disabled or not. */\n    isDisabled?: boolean;\n    /** Native input name property. */\n    name?: string;\n    /** Position of the switch relative to the label. */\n    position?: Extract<Alignment, 'right' | 'left'>;\n    /** Theme adapting the component to light or dark background. */\n    theme?: Theme;\n    /** Native input value property. */\n    value?: string;\n    /** On change callback. */\n    onChange?(isChecked: boolean, value?: string, name?: string, event?: SyntheticEvent): void;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'Switch';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<SwitchProps> = {\n    position: Alignment.left,\n    theme: Theme.light,\n};\n\n/**\n * Switch component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const Switch: Comp<SwitchProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const {\n        checked,\n        children,\n        className,\n        disabled,\n        helper,\n        id,\n        isChecked = checked,\n        isDisabled = disabled,\n        name,\n        onChange,\n        position,\n        theme,\n        value,\n        ...forwardedProps\n    } = props;\n    const switchId = useMemo(() => id || `switch-${uid()}`, [id]);\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (onChange) {\n            onChange(!isChecked, value, name, event);\n        }\n    };\n\n    return (\n        <div\n            ref={ref}\n            {...forwardedProps}\n            className={classNames(\n                className,\n                handleBasicClasses({\n                    prefix: CLASSNAME,\n                    isChecked,\n                    isDisabled,\n                    position,\n                    theme,\n                    isUnchecked: !isChecked,\n                }),\n            )}\n            aria-disabled={isDisabled}\n        >\n            <div className={`${CLASSNAME}__input-wrapper`}>\n                <input\n                    type=\"checkbox\"\n                    role=\"switch\"\n                    id={switchId}\n                    className={`${CLASSNAME}__input-native`}\n                    name={name}\n                    value={value}\n                    disabled={isDisabled}\n                    checked={isChecked}\n                    aria-checked={Boolean(isChecked)}\n                    onChange={handleChange}\n                />\n\n                <div className={`${CLASSNAME}__input-placeholder`}>\n                    <div className={`${CLASSNAME}__input-background`} />\n                    <div className={`${CLASSNAME}__input-indicator`} />\n                </div>\n            </div>\n\n            {Children.count(children) > 0 && (\n                <div className={`${CLASSNAME}__content`}>\n                    <InputLabel htmlFor={switchId} theme={theme} className={`${CLASSNAME}__label`}>\n                        {children}\n                    </InputLabel>\n                    {!isEmpty(helper) && (\n                        <InputHelper theme={theme} className={`${CLASSNAME}__helper`}>\n                            {helper}\n                        </InputHelper>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n});\nSwitch.displayName = COMPONENT_NAME;\nSwitch.className = CLASSNAME;\nSwitch.defaultProps = DEFAULT_PROPS;\n"]},"metadata":{},"sourceType":"module"}