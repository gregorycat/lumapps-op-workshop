{"ast":null,"code":"import { Emphasis } from './components.js';\nimport { g as getRootClassName, b as _extends, d as classnames, _ as _defineProperty, a as _objectWithoutProperties, f as _slicedToArray } from './getRootClassName.js';\nimport React, { forwardRef, useState, useRef, useCallback } from 'react';\nimport { f as mdiChevronRight, g as mdiChevronLeft } from './mdi.js';\nimport 'lodash/isBoolean';\nimport 'lodash/isEmpty';\nimport 'lodash/kebabCase';\nimport 'lodash/noop';\nimport { u as useFocus, a as Popover, P as Placement } from './Popover2.js';\nimport { I as IconButton } from './IconButton.js';\nimport moment$1 from 'moment';\nimport range from 'lodash/range';\nimport { extendMoment } from 'moment-range';\nimport { u as useFocusTrap } from './useFocusTrap.js';\nimport { T as TextField } from './TextField.js';\nimport { T as Toolbar } from './Toolbar2.js';\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME = 'DatePicker';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME = getRootClassName(COMPONENT_NAME);\nvar moment = extendMoment(moment$1);\nvar DAYS_PER_WEEK = 7;\n/**\n * Get the list of days in a week based on locale.\n *\n * @param  locale The locale using to generate the order of days in a week.\n * @return The list of days in a week based on locale.\n */\n\nfunction getWeekDays(locale) {\n  return range(DAYS_PER_WEEK).map(function (_, i) {\n    return moment().locale(locale).weekday(i);\n  });\n}\n/**\n * Get month calendar based on locale and start date.\n *\n * @param  locale        The locale using to generate the order of days in a week.\n * @param  selectedMonth The selected month.\n * @return The list of days in a week based on locale.\n */\n\n\nfunction getMonthCalendar(locale, selectedMonth) {\n  var firstDayOfMonth = moment(selectedMonth).startOf('month');\n  var endDayOfMonth = moment(selectedMonth).endOf('month'); // The first day of the week depends on the locale used. In FR the first day is a monday but in EN the first day is sunday\n\n  var firstDay = firstDayOfMonth.locale(locale).startOf('week');\n  var monthRange = moment.range(firstDay.toDate(), endDayOfMonth.toDate());\n  return Array.from(monthRange.by('day'));\n}\n/**\n * Get month calendar based on locale and start date.\n * Each day is annotated to know if they are displayed and/or clickable.\n *\n * @param  locale        The locale using to generate the order of days in a week.\n * @param  minDate       The first selectable date.\n * @param  maxDate       The last selectable date.\n * @param  selectedMonth The selected month.\n * @return The list of days in a week based on locale.\n */\n\n\nfunction getAnnotatedMonthCalendar(locale, minDate, maxDate, selectedMonth) {\n  var month = moment(selectedMonth).locale(locale).month();\n  var clickableRange = moment.range(minDate, maxDate);\n  return getMonthCalendar(locale, selectedMonth).map(function (date) {\n    return {\n      date: date,\n      isClickable: clickableRange.contains(date),\n      isDisplayed: date.month() === month,\n      isToday: date.isSame(moment(), 'day')\n    };\n  });\n}\n/**\n * Defines the props of the component.\n */\n\n/**\n * Component display name.\n */\n\n\nvar COMPONENT_NAME$1 = 'DatePickerControlled';\n/**\n * DatePickerControlled component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar DatePickerControlled = forwardRef(function (props, ref) {\n  var locale = props.locale,\n      maxDate = props.maxDate,\n      minDate = props.minDate,\n      nextButtonProps = props.nextButtonProps,\n      onChange = props.onChange,\n      onNextMonthChange = props.onNextMonthChange,\n      onPrevMonthChange = props.onPrevMonthChange,\n      previousButtonProps = props.previousButtonProps,\n      selectedMonth = props.selectedMonth,\n      todayOrSelectedDateRef = props.todayOrSelectedDateRef,\n      value = props.value;\n  var days = React.useMemo(function () {\n    return getAnnotatedMonthCalendar(locale, minDate, maxDate, moment$1(selectedMonth));\n  }, [locale, minDate, maxDate, selectedMonth]);\n  var weekDays = React.useMemo(function () {\n    return getWeekDays(locale);\n  }, [locale]);\n  return React.createElement(\"div\", {\n    ref: ref,\n    className: \"\".concat(CLASSNAME)\n  }, React.createElement(Toolbar, {\n    className: \"\".concat(CLASSNAME, \"__toolbar\"),\n    after: React.createElement(IconButton, _extends({}, nextButtonProps, {\n      emphasis: Emphasis.low,\n      icon: mdiChevronRight,\n      onClick: onNextMonthChange\n    })),\n    before: React.createElement(IconButton, _extends({}, previousButtonProps, {\n      emphasis: Emphasis.low,\n      icon: mdiChevronLeft,\n      onClick: onPrevMonthChange\n    })),\n    label: React.createElement(\"span\", {\n      className: \"\".concat(CLASSNAME, \"__month\")\n    }, moment$1(selectedMonth).locale(locale).format('MMMM YYYY'))\n  }), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__calendar\")\n  }, React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__week-days \").concat(CLASSNAME, \"__days-wrapper\")\n  }, weekDays.map(function (weekDay) {\n    return React.createElement(\"div\", {\n      key: weekDay.unix(),\n      className: \"\".concat(CLASSNAME, \"__day-wrapper\")\n    }, React.createElement(\"span\", {\n      className: \"\".concat(CLASSNAME, \"__week-day\")\n    }, weekDay.format('dddd').slice(0, 1).toLocaleUpperCase()));\n  })), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__month-days \").concat(CLASSNAME, \"__days-wrapper\")\n  }, days.map(function (annotatedDate) {\n    if (annotatedDate.isDisplayed) {\n      var _classNames;\n\n      return React.createElement(\"div\", {\n        key: annotatedDate.date.unix(),\n        className: \"\".concat(CLASSNAME, \"__day-wrapper\")\n      }, React.createElement(\"button\", {\n        ref: value && annotatedDate.date.isSame(value, 'day') || !value && annotatedDate.isToday ? todayOrSelectedDateRef : null,\n        className: classnames(\"\".concat(CLASSNAME, \"__month-day\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(CLASSNAME, \"__month-day--is-selected\"), value && annotatedDate.date.isSame(value, 'day')), _defineProperty(_classNames, \"\".concat(CLASSNAME, \"__month-day--is-today\"), annotatedDate.isClickable && annotatedDate.isToday), _classNames)),\n        disabled: !annotatedDate.isClickable,\n        type: \"button\",\n        onClick: function onClick() {\n          return onChange(moment$1(annotatedDate.date).toDate());\n        }\n      }, React.createElement(\"span\", null, annotatedDate.date.format('DD'))));\n    }\n\n    return React.createElement(\"div\", {\n      key: annotatedDate.date.unix(),\n      className: \"\".concat(CLASSNAME, \"__day-wrapper\")\n    });\n  }))));\n});\nDatePickerControlled.displayName = COMPONENT_NAME$1;\nDatePickerControlled.className = CLASSNAME;\n/**\n * DatePicker component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar DatePicker = forwardRef(function (props, ref) {\n  var defaultMonth = props.defaultMonth,\n      locale = props.locale,\n      value = props.value,\n      onChange = props.onChange,\n      forwardedProps = _objectWithoutProperties(props, [\"defaultMonth\", \"locale\", \"value\", \"onChange\"]);\n\n  var castedValue;\n\n  if (value) {\n    castedValue = moment$1(value);\n  } else if (defaultMonth) {\n    castedValue = moment$1(defaultMonth);\n  }\n\n  if (castedValue && !castedValue.isValid()) {\n    // eslint-disable-next-line no-console\n    console.warn(\"[@lumx/react/DatePicker] Invalid date provided \".concat(castedValue));\n  }\n\n  var selectedDay = castedValue && castedValue.isValid() ? castedValue : moment$1();\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      monthOffset = _useState2[0],\n      setMonthOffset = _useState2[1];\n\n  var setPrevMonth = function setPrevMonth() {\n    return setMonthOffset(monthOffset - 1);\n  };\n\n  var setNextMonth = function setNextMonth() {\n    return setMonthOffset(monthOffset + 1);\n  };\n\n  var onDatePickerChange = function onDatePickerChange(newDate) {\n    onChange(newDate);\n    setMonthOffset(0);\n  };\n\n  var selectedMonth = moment$1(selectedDay).locale(locale).add(monthOffset, 'months').toDate();\n  return React.createElement(DatePickerControlled, _extends({\n    ref: ref\n  }, forwardedProps, {\n    defaultMonth: defaultMonth,\n    locale: locale,\n    value: value,\n    onPrevMonthChange: setPrevMonth,\n    onNextMonthChange: setNextMonth,\n    selectedMonth: selectedMonth,\n    onChange: onDatePickerChange\n  }));\n});\nDatePicker.displayName = COMPONENT_NAME;\nDatePicker.className = CLASSNAME;\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME$2 = 'DatePickerField';\n/**\n * DatePickerField component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar DatePickerField = forwardRef(function (props, ref) {\n  var defaultMonth = props.defaultMonth,\n      disabled = props.disabled,\n      _props$isDisabled = props.isDisabled,\n      isDisabled = _props$isDisabled === void 0 ? disabled : _props$isDisabled,\n      locale = props.locale,\n      maxDate = props.maxDate,\n      minDate = props.minDate,\n      name = props.name,\n      nextButtonProps = props.nextButtonProps,\n      onChange = props.onChange,\n      previousButtonProps = props.previousButtonProps,\n      value = props.value,\n      forwardedProps = _objectWithoutProperties(props, [\"defaultMonth\", \"disabled\", \"isDisabled\", \"locale\", \"maxDate\", \"minDate\", \"name\", \"nextButtonProps\", \"onChange\", \"previousButtonProps\", \"value\"]);\n\n  var wrapperRef = useRef(null);\n  var anchorRef = useRef(null);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isOpen = _useState2[0],\n      setIsOpen = _useState2[1];\n\n  var toggleSimpleMenu = function toggleSimpleMenu() {\n    setIsOpen(!isOpen);\n  };\n\n  var onClose = useCallback(function () {\n    setIsOpen(false);\n  }, []);\n  useFocus(anchorRef.current, isOpen);\n\n  var handleKeyboardNav = function handleKeyboardNav(evt) {\n    if ((evt.key === 'Enter' || evt.key === ' ') && toggleSimpleMenu) {\n      toggleSimpleMenu();\n    }\n  }; // Handle focus trap.\n\n\n  var todayOrSelectedDateRef = useRef(null);\n  useFocusTrap(todayOrSelectedDateRef.current && wrapperRef.current, todayOrSelectedDateRef.current);\n\n  var onTextFieldChange = function onTextFieldChange(textFieldValue, textFieldName, event) {\n    if (!textFieldValue) {\n      onChange(undefined, textFieldName, event);\n    }\n  };\n\n  var onDatePickerChange = function onDatePickerChange(newDate) {\n    onChange(newDate, name);\n    onClose();\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(TextField, _extends({\n    ref: ref\n  }, forwardedProps, {\n    name: name,\n    forceFocusStyle: isOpen,\n    textFieldRef: anchorRef,\n    value: value ? moment$1(value).locale(locale).format('LL') : '',\n    onClick: toggleSimpleMenu,\n    onChange: onTextFieldChange,\n    onKeyPress: handleKeyboardNav,\n    isDisabled: isDisabled,\n    readOnly: true\n  })), isOpen ? React.createElement(Popover, {\n    anchorRef: anchorRef,\n    placement: Placement.BOTTOM_START,\n    isOpen: isOpen,\n    onClose: onClose,\n    closeOnClickAway: true,\n    closeOnEscape: true\n  }, React.createElement(\"div\", {\n    ref: wrapperRef\n  }, React.createElement(DatePicker, {\n    locale: locale,\n    maxDate: maxDate,\n    minDate: minDate,\n    value: value,\n    onChange: onDatePickerChange,\n    todayOrSelectedDateRef: todayOrSelectedDateRef,\n    defaultMonth: defaultMonth,\n    nextButtonProps: nextButtonProps,\n    previousButtonProps: previousButtonProps\n  }))) : null);\n});\nDatePickerField.displayName = COMPONENT_NAME$2;\nexport { DatePicker as D, DatePickerControlled as a, DatePickerField as b };","map":{"version":3,"sources":["../../../src/components/date-picker/constants.ts","../../../../lumx-core/src/js/date-picker.ts","../../../src/components/date-picker/DatePickerControlled.tsx","../../../src/components/date-picker/DatePicker.tsx","../../../src/components/date-picker/DatePickerField.tsx"],"names":["COMPONENT_NAME","CLASSNAME","getRootClassName","moment","extendMoment","DAYS_PER_WEEK","firstDayOfMonth","endDayOfMonth","firstDay","monthRange","Array","month","clickableRange","date","isClickable","isDisplayed","isToday","DatePickerControlled","forwardRef","locale","maxDate","minDate","nextButtonProps","onChange","onNextMonthChange","onPrevMonthChange","previousButtonProps","selectedMonth","todayOrSelectedDateRef","value","props","days","getAnnotatedMonthCalendar","weekDays","getWeekDays","Emphasis","weekDay","annotatedDate","classNames","DatePicker","defaultMonth","forwardedProps","castedValue","console","selectedDay","monthOffset","setMonthOffset","useState","setPrevMonth","setNextMonth","onDatePickerChange","ref","DatePickerField","disabled","isDisabled","name","wrapperRef","useRef","anchorRef","isOpen","setIsOpen","toggleSimpleMenu","onClose","useCallback","useFocus","handleKeyboardNav","evt","useFocusTrap","onTextFieldChange","Placement"],"mappings":"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","sourcesContent":["import { getRootClassName } from '@lumx/react/utils';\n\n/**\n * Component display name.\n */\nexport const COMPONENT_NAME = 'DatePicker';\n\n/**\n * Component default class name and class prefix.\n */\nexport const CLASSNAME = getRootClassName(COMPONENT_NAME);\n","import range from 'lodash/range';\nimport mMoment, { Moment } from 'moment';\nimport { extendMoment } from 'moment-range';\n\nconst moment = extendMoment(mMoment as any);\n\nconst DAYS_PER_WEEK = 7;\n\ninterface AnnotatedDate {\n    date: Moment;\n    isDisplayed: boolean;\n    isClickable: boolean;\n    isToday: boolean;\n}\n\n/**\n * Get the list of days in a week based on locale.\n *\n * @param  locale The locale using to generate the order of days in a week.\n * @return The list of days in a week based on locale.\n */\nexport function getWeekDays(locale: string): Moment[] {\n    return range(DAYS_PER_WEEK).map((_, i) => moment().locale(locale).weekday(i));\n}\n\n/**\n * Get month calendar based on locale and start date.\n *\n * @param  locale        The locale using to generate the order of days in a week.\n * @param  selectedMonth The selected month.\n * @return The list of days in a week based on locale.\n */\nexport function getMonthCalendar(locale: string, selectedMonth?: Moment): Moment[] {\n    const firstDayOfMonth = moment(selectedMonth).startOf('month');\n    const endDayOfMonth = moment(selectedMonth).endOf('month');\n    // The first day of the week depends on the locale used. In FR the first day is a monday but in EN the first day is sunday\n    const firstDay = firstDayOfMonth.locale(locale).startOf('week');\n    const monthRange = moment.range(firstDay.toDate(), endDayOfMonth.toDate());\n\n    return Array.from(monthRange.by('day'));\n}\n\n/**\n * Get month calendar based on locale and start date.\n * Each day is annotated to know if they are displayed and/or clickable.\n *\n * @param  locale        The locale using to generate the order of days in a week.\n * @param  minDate       The first selectable date.\n * @param  maxDate       The last selectable date.\n * @param  selectedMonth The selected month.\n * @return The list of days in a week based on locale.\n */\nexport function getAnnotatedMonthCalendar(\n    locale: string,\n    minDate?: Date,\n    maxDate?: Date,\n    selectedMonth?: Moment,\n): AnnotatedDate[] {\n    const month = moment(selectedMonth).locale(locale).month();\n\n    const clickableRange = moment.range(minDate!, maxDate!);\n\n    return getMonthCalendar(locale, selectedMonth).map((date) => {\n        return {\n            date,\n            isClickable: clickableRange.contains(date),\n            isDisplayed: date.month() === month,\n            isToday: date.isSame(moment(), 'day'),\n        };\n    });\n}\n","import React, { forwardRef } from 'react';\nimport moment from 'moment';\nimport classNames from 'classnames';\nimport { DatePickerProps, Emphasis, IconButton, Toolbar } from '@lumx/react';\nimport { mdiChevronLeft, mdiChevronRight } from '@lumx/icons';\nimport { getAnnotatedMonthCalendar, getWeekDays } from '@lumx/core/js/date-picker';\nimport { Comp } from '@lumx/react/utils';\nimport { CLASSNAME } from './constants';\n\n/**\n * Defines the props of the component.\n */\nexport interface DatePickerControlledProps extends DatePickerProps {\n    /** Selected month to display. */\n    selectedMonth: Date;\n    /** On previous month change callback. */\n    onPrevMonthChange(): void;\n    /** On next month change callback. */\n    onNextMonthChange(): void;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'DatePickerControlled';\n\n/**\n * DatePickerControlled component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const DatePickerControlled: Comp<DatePickerControlledProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const {\n        locale,\n        maxDate,\n        minDate,\n        nextButtonProps,\n        onChange,\n        onNextMonthChange,\n        onPrevMonthChange,\n        previousButtonProps,\n        selectedMonth,\n        todayOrSelectedDateRef,\n        value,\n    } = props;\n    const days = React.useMemo(() => {\n        return getAnnotatedMonthCalendar(locale, minDate, maxDate, moment(selectedMonth));\n    }, [locale, minDate, maxDate, selectedMonth]);\n\n    const weekDays = React.useMemo(() => {\n        return getWeekDays(locale);\n    }, [locale]);\n\n    return (\n        <div ref={ref} className={`${CLASSNAME}`}>\n            <Toolbar\n                className={`${CLASSNAME}__toolbar`}\n                after={\n                    <IconButton\n                        {...nextButtonProps}\n                        emphasis={Emphasis.low}\n                        icon={mdiChevronRight}\n                        onClick={onNextMonthChange}\n                    />\n                }\n                before={\n                    <IconButton\n                        {...previousButtonProps}\n                        emphasis={Emphasis.low}\n                        icon={mdiChevronLeft}\n                        onClick={onPrevMonthChange}\n                    />\n                }\n                label={\n                    <span className={`${CLASSNAME}__month`}>\n                        {moment(selectedMonth).locale(locale).format('MMMM YYYY')}\n                    </span>\n                }\n            />\n            <div className={`${CLASSNAME}__calendar`}>\n                <div className={`${CLASSNAME}__week-days ${CLASSNAME}__days-wrapper`}>\n                    {weekDays.map((weekDay) => (\n                        <div key={weekDay.unix()} className={`${CLASSNAME}__day-wrapper`}>\n                            <span className={`${CLASSNAME}__week-day`}>\n                                {weekDay.format('dddd').slice(0, 1).toLocaleUpperCase()}\n                            </span>\n                        </div>\n                    ))}\n                </div>\n\n                <div className={`${CLASSNAME}__month-days ${CLASSNAME}__days-wrapper`}>\n                    {days.map((annotatedDate) => {\n                        if (annotatedDate.isDisplayed) {\n                            return (\n                                <div key={annotatedDate.date.unix()} className={`${CLASSNAME}__day-wrapper`}>\n                                    <button\n                                        ref={\n                                            (value && annotatedDate.date.isSame(value, 'day')) ||\n                                            (!value && annotatedDate.isToday)\n                                                ? todayOrSelectedDateRef\n                                                : null\n                                        }\n                                        className={classNames(`${CLASSNAME}__month-day`, {\n                                            [`${CLASSNAME}__month-day--is-selected`]:\n                                                value && annotatedDate.date.isSame(value, 'day'),\n                                            [`${CLASSNAME}__month-day--is-today`]:\n                                                annotatedDate.isClickable && annotatedDate.isToday,\n                                        })}\n                                        disabled={!annotatedDate.isClickable}\n                                        type=\"button\"\n                                        onClick={() => onChange(moment(annotatedDate.date).toDate())}\n                                    >\n                                        <span>{annotatedDate.date.format('DD')}</span>\n                                    </button>\n                                </div>\n                            );\n                        }\n                        return <div key={annotatedDate.date.unix()} className={`${CLASSNAME}__day-wrapper`} />;\n                    })}\n                </div>\n            </div>\n        </div>\n    );\n});\nDatePickerControlled.displayName = COMPONENT_NAME;\nDatePickerControlled.className = CLASSNAME;\n","import moment from 'moment';\nimport React, { forwardRef, useState } from 'react';\nimport { Comp } from '@lumx/react/utils';\nimport { CLASSNAME, COMPONENT_NAME } from './constants';\nimport { DatePickerControlled } from './DatePickerControlled';\nimport { DatePickerProps } from './types';\n\n/**\n * DatePicker component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const DatePicker: Comp<DatePickerProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const { defaultMonth, locale, value, onChange, ...forwardedProps } = props;\n    let castedValue;\n    if (value) {\n        castedValue = moment(value);\n    } else if (defaultMonth) {\n        castedValue = moment(defaultMonth);\n    }\n    if (castedValue && !castedValue.isValid()) {\n        // eslint-disable-next-line no-console\n        console.warn(`[@lumx/react/DatePicker] Invalid date provided ${castedValue}`);\n    }\n    const selectedDay = castedValue && castedValue.isValid() ? castedValue : moment();\n\n    const [monthOffset, setMonthOffset] = useState(0);\n\n    const setPrevMonth = () => setMonthOffset(monthOffset - 1);\n    const setNextMonth = () => setMonthOffset(monthOffset + 1);\n\n    const onDatePickerChange = (newDate?: Date) => {\n        onChange(newDate);\n        setMonthOffset(0);\n    };\n\n    const selectedMonth = moment(selectedDay).locale(locale).add(monthOffset, 'months').toDate();\n\n    return (\n        <DatePickerControlled\n            ref={ref}\n            {...forwardedProps}\n            defaultMonth={defaultMonth}\n            locale={locale}\n            value={value}\n            onPrevMonthChange={setPrevMonth}\n            onNextMonthChange={setNextMonth}\n            selectedMonth={selectedMonth}\n            onChange={onDatePickerChange}\n        />\n    );\n});\nDatePicker.displayName = COMPONENT_NAME;\nDatePicker.className = CLASSNAME;\n","import { DatePicker, Placement, Popover, TextField, IconButtonProps } from '@lumx/react';\nimport { useFocusTrap } from '@lumx/react/hooks/useFocusTrap';\n\nimport moment from 'moment';\n\nimport React, { forwardRef, SyntheticEvent, useCallback, useRef, useState } from 'react';\n\nimport { useFocus } from '@lumx/react/hooks/useFocus';\nimport { Comp, GenericProps } from '@lumx/react/utils';\n\n/**\n * Defines the props of the component.\n */\nexport interface DatePickerFieldProps extends GenericProps {\n    /** Default month. */\n    defaultMonth?: Date;\n    /** Whether the component is disabled or not. */\n    isDisabled?: boolean;\n    /** Locale (language or region) to use. */\n    locale: string;\n    /** Date after which dates can't be selected. */\n    maxDate?: Date;\n    /** Date before which dates can't be selected. */\n    minDate?: Date;\n    /** Native input name property. */\n    name?: string;\n    /** Props to pass to the next month button (minus those already set by the DatePickerControlled props). */\n    nextButtonProps: Pick<IconButtonProps, 'label'> & Omit<IconButtonProps, 'label' | 'onClick' | 'icon' | 'emphasis'>;\n    /** Props to pass to the previous month button (minus those already set by the DatePickerControlled props). */\n    previousButtonProps: Pick<IconButtonProps, 'label'> &\n        Omit<IconButtonProps, 'label' | 'onClick' | 'icon' | 'emphasis'>;\n    /** Currently selected date. */\n    value: Date | undefined;\n    /** On change callback. */\n    onChange(value: Date | undefined, name?: string, event?: SyntheticEvent): void;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'DatePickerField';\n\n/**\n * DatePickerField component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const DatePickerField: Comp<DatePickerFieldProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const {\n        defaultMonth,\n        disabled,\n        isDisabled = disabled,\n        locale,\n        maxDate,\n        minDate,\n        name,\n        nextButtonProps,\n        onChange,\n        previousButtonProps,\n        value,\n        ...forwardedProps\n    } = props;\n    const wrapperRef = useRef(null);\n    const anchorRef = useRef(null);\n\n    const [isOpen, setIsOpen] = useState(false);\n\n    const toggleSimpleMenu = () => {\n        setIsOpen(!isOpen);\n    };\n\n    const onClose = useCallback(() => {\n        setIsOpen(false);\n    }, []);\n\n    useFocus(anchorRef.current, isOpen);\n    const handleKeyboardNav = (evt: React.KeyboardEvent) => {\n        if ((evt.key === 'Enter' || evt.key === ' ') && toggleSimpleMenu) {\n            toggleSimpleMenu();\n        }\n    };\n\n    // Handle focus trap.\n    const todayOrSelectedDateRef = useRef<HTMLButtonElement>(null);\n    useFocusTrap(todayOrSelectedDateRef.current && wrapperRef.current, todayOrSelectedDateRef.current);\n\n    const onTextFieldChange = (textFieldValue: string, textFieldName?: string, event?: SyntheticEvent) => {\n        if (!textFieldValue) {\n            onChange(undefined, textFieldName, event);\n        }\n    };\n\n    const onDatePickerChange = (newDate?: Date) => {\n        onChange(newDate, name);\n        onClose();\n    };\n\n    return (\n        <>\n            <TextField\n                ref={ref}\n                {...forwardedProps}\n                name={name}\n                forceFocusStyle={isOpen}\n                textFieldRef={anchorRef}\n                value={value ? moment(value).locale(locale).format('LL') : ''}\n                onClick={toggleSimpleMenu}\n                onChange={onTextFieldChange}\n                onKeyPress={handleKeyboardNav}\n                isDisabled={isDisabled}\n                readOnly\n            />\n            {isOpen ? (\n                <Popover\n                    anchorRef={anchorRef}\n                    placement={Placement.BOTTOM_START}\n                    isOpen={isOpen}\n                    onClose={onClose}\n                    closeOnClickAway\n                    closeOnEscape\n                >\n                    <div ref={wrapperRef}>\n                        <DatePicker\n                            locale={locale}\n                            maxDate={maxDate}\n                            minDate={minDate}\n                            value={value}\n                            onChange={onDatePickerChange}\n                            todayOrSelectedDateRef={todayOrSelectedDateRef}\n                            defaultMonth={defaultMonth}\n                            nextButtonProps={nextButtonProps}\n                            previousButtonProps={previousButtonProps}\n                        />\n                    </div>\n                </Popover>\n            ) : null}\n        </>\n    );\n});\nDatePickerField.displayName = COMPONENT_NAME;\n"]},"metadata":{},"sourceType":"module"}