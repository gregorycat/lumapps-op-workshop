{"ast":null,"code":"import { Kind, Theme, Size, Emphasis } from './components.js';\nimport { f as _slicedToArray, d as classnames, h as handleBasicClasses, b as _extends, g as getRootClassName, a as _objectWithoutProperties, c as _objectSpread2 } from './getRootClassName.js';\nimport React, { useState, useEffect, useMemo, useRef, useCallback, forwardRef } from 'react';\nimport { b as mdiCheckCircle, c as mdiAlertCircle, n as mdiCloseCircle, o as mdiMenuDown, d as mdiClose } from './mdi.js';\nimport { u as uid } from '../index2.js';\nimport isEmpty from 'lodash/isEmpty';\nimport { P as Placement } from './Popover2.js';\nimport { m as mergeRefs } from './mergeRefs.js';\nimport { I as IconButton } from './IconButton.js';\nimport { C as Chip } from './Chip2.js';\nimport { D as Dropdown } from './Dropdown2.js';\nimport { I as Icon } from './Icon2.js';\nimport { I as InputHelper } from './InputHelper.js';\nimport { I as InputLabel } from './InputLabel.js';\n/**\n * Listen on element focus to store the focus status.\n */\n\nfunction useListenFocus(ref) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isFocus = _useState2[0],\n      setFocus = _useState2[1];\n\n  useEffect(function () {\n    var element = ref.current;\n\n    if (!element) {\n      return undefined;\n    }\n\n    var onFocus = function onFocus() {\n      return setFocus(true);\n    };\n\n    var onBlur = function onBlur() {\n      return setFocus(false);\n    };\n\n    element.addEventListener('focus', onFocus);\n    element.addEventListener('blur', onBlur);\n    return function () {\n      element.removeEventListener('focus', onFocus);\n      element.removeEventListener('blur', onBlur);\n    };\n  }, [ref, setFocus]);\n  return isFocus;\n}\n/**\n * Select variants.\n */\n\n\nvar SelectVariant = {\n  input: 'input',\n  chip: 'chip'\n};\n/** The display name of the component. */\n\nvar COMPONENT_NAME = 'Select';\n/** The default class name and classes prefix for this component. */\n\nvar CLASSNAME = getRootClassName(COMPONENT_NAME);\n/** The default value of props. */\n\nvar DEFAULT_PROPS = {\n  theme: Theme.light,\n  variant: SelectVariant.input\n};\n\nvar WithSelectContext = function WithSelectContext(SelectElement, _ref, ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      isMultiple = _ref.isMultiple,\n      _ref$closeOnClick = _ref.closeOnClick,\n      closeOnClick = _ref$closeOnClick === void 0 ? !isMultiple : _ref$closeOnClick,\n      disabled = _ref.disabled,\n      error = _ref.error,\n      hasError = _ref.hasError,\n      helper = _ref.helper,\n      id = _ref.id,\n      _ref$isDisabled = _ref.isDisabled,\n      isDisabled = _ref$isDisabled === void 0 ? disabled : _ref$isDisabled,\n      isEmpty = _ref.isEmpty,\n      isOpen = _ref.isOpen,\n      isRequired = _ref.isRequired,\n      isValid = _ref.isValid,\n      label = _ref.label,\n      onClear = _ref.onClear,\n      onDropdownClose = _ref.onDropdownClose,\n      onInfiniteScroll = _ref.onInfiniteScroll,\n      onInputClick = _ref.onInputClick,\n      placeholder = _ref.placeholder,\n      _ref$theme = _ref.theme,\n      theme = _ref$theme === void 0 ? DEFAULT_PROPS.theme : _ref$theme,\n      value = _ref.value,\n      _ref$variant = _ref.variant,\n      variant = _ref$variant === void 0 ? DEFAULT_PROPS.variant : _ref$variant,\n      forwardedProps = _objectWithoutProperties(_ref, [\"children\", \"className\", \"isMultiple\", \"closeOnClick\", \"disabled\", \"error\", \"hasError\", \"helper\", \"id\", \"isDisabled\", \"isEmpty\", \"isOpen\", \"isRequired\", \"isValid\", \"label\", \"onClear\", \"onDropdownClose\", \"onInfiniteScroll\", \"onInputClick\", \"placeholder\", \"theme\", \"value\", \"variant\"]);\n\n  var selectId = useMemo(function () {\n    return id || \"select-\".concat(uid());\n  }, [id]);\n  var anchorRef = useRef(null);\n  var selectRef = useRef(null);\n  var isFocus = useListenFocus(anchorRef);\n  var handleKeyboardNav = useCallback(function (evt) {\n    if ((evt.key === 'Enter' || evt.key === ' ' || evt.key === 'ArrowDown') && onInputClick) {\n      evt.preventDefault();\n      onInputClick();\n    }\n  }, [onInputClick]);\n\n  var onClose = function onClose() {\n    var _anchorRef$current;\n\n    if (onDropdownClose) {\n      onDropdownClose();\n    }\n\n    anchorRef === null || anchorRef === void 0 ? void 0 : (_anchorRef$current = anchorRef.current) === null || _anchorRef$current === void 0 ? void 0 : _anchorRef$current.blur();\n  };\n\n  return React.createElement(\"div\", {\n    ref: mergeRefs(ref, selectRef),\n    className: classnames(className, handleBasicClasses({\n      hasError: hasError,\n      hasLabel: Boolean(label),\n      hasPlaceholder: Boolean(placeholder),\n      hasValue: !isEmpty,\n      isDisabled: isDisabled,\n      isEmpty: isEmpty,\n      isFocus: isFocus,\n      isOpen: isOpen,\n      isValid: isValid,\n      prefix: CLASSNAME,\n      theme: theme === Theme.light ? Theme.light : Theme.dark\n    }))\n  }, React.createElement(SelectElement, _extends({}, forwardedProps, {\n    anchorRef: anchorRef,\n    \"aria-disabled\": isDisabled,\n    handleKeyboardNav: handleKeyboardNav,\n    hasError: hasError,\n    isDisabled: isDisabled,\n    isEmpty: isEmpty,\n    isRequired: isRequired,\n    isValid: isValid,\n    label: label,\n    placeholder: placeholder,\n    id: selectId,\n    theme: theme,\n    value: value,\n    variant: variant,\n    onClear: onClear,\n    onInputClick: onInputClick\n  })), React.createElement(Dropdown, {\n    anchorRef: anchorRef,\n    closeOnClick: closeOnClick,\n    closeOnClickAway: true,\n    closeOnEscape: true,\n    isOpen: !!isOpen,\n    placement: Placement.BOTTOM_START,\n    onClose: onClose,\n    onInfiniteScroll: onInfiniteScroll\n  }, children), hasError && error && React.createElement(InputHelper, {\n    className: \"\".concat(CLASSNAME, \"__helper\"),\n    kind: Kind.error,\n    theme: theme\n  }, error), helper && React.createElement(InputHelper, {\n    className: \"\".concat(CLASSNAME, \"__helper\"),\n    theme: theme\n  }, helper));\n};\n/** The display name of the component. */\n\n\nvar COMPONENT_NAME$1 = 'Select';\n/** The default class name and classes prefix for this component. */\n\nvar CLASSNAME$1 = getRootClassName(COMPONENT_NAME$1);\n/** The default value of props. */\n\nvar DEFAULT_PROPS$1 = {\n  selectedValueRender: function selectedValueRender(choice) {\n    return choice;\n  }\n};\n\nvar stopPropagation = function stopPropagation(evt) {\n  return evt.stopPropagation();\n};\n/**\n * Select component.\n */\n\n\nvar SelectField = function SelectField(_ref) {\n  var anchorRef = _ref.anchorRef,\n      clearButtonProps = _ref.clearButtonProps,\n      handleKeyboardNav = _ref.handleKeyboardNav,\n      hasError = _ref.hasError,\n      hasInputClear = _ref.hasInputClear,\n      id = _ref.id,\n      isDisabled = _ref.isDisabled,\n      isEmpty = _ref.isEmpty,\n      isRequired = _ref.isRequired,\n      isValid = _ref.isValid,\n      label = _ref.label,\n      onClear = _ref.onClear,\n      onInputClick = _ref.onInputClick,\n      placeholder = _ref.placeholder,\n      selectedValueRender = _ref.selectedValueRender,\n      theme = _ref.theme,\n      value = _ref.value,\n      variant = _ref.variant,\n      forwardedProps = _objectWithoutProperties(_ref, [\"anchorRef\", \"clearButtonProps\", \"handleKeyboardNav\", \"hasError\", \"hasInputClear\", \"id\", \"isDisabled\", \"isEmpty\", \"isRequired\", \"isValid\", \"label\", \"onClear\", \"onInputClick\", \"placeholder\", \"selectedValueRender\", \"theme\", \"value\", \"variant\"]);\n\n  return React.createElement(React.Fragment, null, variant === SelectVariant.input && React.createElement(React.Fragment, null, label && React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME$1, \"__header\")\n  }, React.createElement(InputLabel, {\n    htmlFor: id,\n    className: \"\".concat(CLASSNAME$1, \"__label\"),\n    isRequired: isRequired,\n    theme: theme\n  }, label)), React.createElement(\"div\", _extends({\n    ref: anchorRef,\n    id: id,\n    className: \"\".concat(CLASSNAME$1, \"__wrapper\"),\n    onClick: onInputClick,\n    onKeyDown: handleKeyboardNav,\n    tabIndex: isDisabled ? undefined : 0,\n    \"aria-disabled\": isDisabled || undefined\n  }, forwardedProps), React.createElement(\"div\", {\n    className: classnames([\"\".concat(CLASSNAME$1, \"__input-native\"), isEmpty && placeholder && \"\".concat(CLASSNAME$1, \"__input-native--placeholder\")])\n  }, !isEmpty && React.createElement(\"span\", null, selectedValueRender === null || selectedValueRender === void 0 ? void 0 : selectedValueRender(value)), isEmpty && placeholder && React.createElement(\"span\", null, placeholder)), (isValid || hasError) && React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME$1, \"__input-validity\")\n  }, React.createElement(Icon, {\n    icon: isValid ? mdiCheckCircle : mdiAlertCircle,\n    size: Size.xxs\n  })), hasInputClear && clearButtonProps && React.createElement(IconButton, _extends({}, clearButtonProps, {\n    className: \"\".concat(CLASSNAME$1, \"__input-clear\"),\n    icon: mdiCloseCircle,\n    emphasis: Emphasis.low,\n    size: Size.s,\n    theme: theme,\n    onClick: onClear,\n    onKeyDown: stopPropagation\n  })), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME$1, \"__input-indicator\")\n  }, React.createElement(Icon, {\n    icon: mdiMenuDown,\n    size: Size.s\n  })))), variant === SelectVariant.chip && React.createElement(Chip, _extends({\n    id: id,\n    isSelected: !isEmpty,\n    isDisabled: isDisabled,\n    after: React.createElement(Icon, {\n      icon: isEmpty ? mdiMenuDown : mdiCloseCircle\n    }),\n    onAfterClick: isEmpty ? onInputClick : onClear,\n    onClick: onInputClick,\n    ref: anchorRef,\n    theme: theme\n  }, forwardedProps), isEmpty && React.createElement(\"span\", null, label), !isEmpty && React.createElement(\"span\", null, selectedValueRender === null || selectedValueRender === void 0 ? void 0 : selectedValueRender(value))));\n};\n/**\n * Select component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\n\nvar Select = forwardRef(function (props, ref) {\n  var isEmpty$1 = isEmpty(props.value);\n  var hasInputClear = props.onClear && props.clearButtonProps && !isEmpty$1;\n  return WithSelectContext(SelectField, _objectSpread2({}, props, {\n    className: classnames(props.className, handleBasicClasses({\n      hasInputClear: hasInputClear,\n      hasUnique: !props.isEmpty,\n      prefix: CLASSNAME$1\n    })),\n    hasInputClear: hasInputClear,\n    isEmpty: isEmpty$1\n  }), ref);\n});\nSelect.displayName = COMPONENT_NAME$1;\nSelect.className = CLASSNAME$1;\nSelect.defaultProps = DEFAULT_PROPS$1;\nSelect.className = CLASSNAME$1;\n/** Defines the props of the component. */\n\n/** The display name of the component. */\n\nvar COMPONENT_NAME$2 = 'Select';\n/** The default class name and classes prefix for this component. */\n\nvar CLASSNAME$2 = getRootClassName(COMPONENT_NAME$2);\n/** The default value of props. */\n\nvar DEFAULT_PROPS$2 = {\n  selectedChipRender: function selectedChipRender(choice, index, onClear, isDisabled, theme) {\n    var onClick = function onClick(event) {\n      return onClear && onClear(event, choice);\n    };\n\n    return React.createElement(Chip, {\n      key: index,\n      after: onClear && React.createElement(Icon, {\n        icon: mdiClose,\n        size: Size.xxs\n      }),\n      isDisabled: isDisabled,\n      size: Size.s,\n      onAfterClick: onClick,\n      onClick: onClick,\n      theme: theme\n    }, choice);\n  },\n  selectedValueRender: function selectedValueRender(choice) {\n    return choice;\n  }\n};\n\nvar SelectMultipleField = function SelectMultipleField(_ref) {\n  var anchorRef = _ref.anchorRef,\n      handleKeyboardNav = _ref.handleKeyboardNav,\n      hasError = _ref.hasError,\n      id = _ref.id,\n      isDisabled = _ref.isDisabled,\n      isEmpty = _ref.isEmpty,\n      isRequired = _ref.isRequired,\n      isValid = _ref.isValid,\n      label = _ref.label,\n      onClear = _ref.onClear,\n      onInputClick = _ref.onInputClick,\n      placeholder = _ref.placeholder,\n      selectedChipRender = _ref.selectedChipRender,\n      selectedValueRender = _ref.selectedValueRender,\n      theme = _ref.theme,\n      value = _ref.value,\n      variant = _ref.variant;\n  return React.createElement(React.Fragment, null, variant === SelectVariant.input && React.createElement(React.Fragment, null, label && React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME$2, \"__header\")\n  }, React.createElement(InputLabel, {\n    htmlFor: id,\n    className: \"\".concat(CLASSNAME$2, \"__label\"),\n    isRequired: isRequired,\n    theme: theme\n  }, label)), React.createElement(\"div\", {\n    ref: anchorRef,\n    id: id,\n    className: \"\".concat(CLASSNAME$2, \"__wrapper\"),\n    onClick: onInputClick,\n    onKeyDown: handleKeyboardNav,\n    tabIndex: isDisabled ? undefined : 0,\n    \"aria-disabled\": isDisabled || undefined\n  }, React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME$2, \"__chips\")\n  }, !isEmpty && value.map(function (val, index) {\n    return selectedChipRender === null || selectedChipRender === void 0 ? void 0 : selectedChipRender(val, index, onClear, isDisabled, theme);\n  })), isEmpty && placeholder && React.createElement(\"div\", {\n    className: classnames([\"\".concat(CLASSNAME$2, \"__input-native\"), \"\".concat(CLASSNAME$2, \"__input-native--placeholder\")])\n  }, React.createElement(\"span\", null, placeholder)), (isValid || hasError) && React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME$2, \"__input-validity\")\n  }, React.createElement(Icon, {\n    icon: isValid ? mdiCheckCircle : mdiAlertCircle,\n    size: Size.xxs\n  })), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME$2, \"__input-indicator\")\n  }, React.createElement(Icon, {\n    icon: mdiMenuDown,\n    size: Size.s\n  })))), variant === SelectVariant.chip && React.createElement(Chip, {\n    id: id,\n    isSelected: !isEmpty,\n    isDisabled: isDisabled,\n    after: React.createElement(Icon, {\n      icon: isEmpty ? mdiMenuDown : mdiCloseCircle\n    }),\n    onAfterClick: isEmpty ? onInputClick : onClear,\n    onClick: onInputClick,\n    ref: anchorRef,\n    theme: theme\n  }, isEmpty && React.createElement(\"span\", null, label), !isEmpty && React.createElement(\"span\", null, React.createElement(\"span\", null, selectedValueRender === null || selectedValueRender === void 0 ? void 0 : selectedValueRender(value[0])), value.length > 1 && React.createElement(\"span\", null, \"\\xA0+\", value.length - 1))));\n};\n/**\n * SelectMultiple component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\n\nvar SelectMultiple = forwardRef(function (props, ref) {\n  return WithSelectContext(SelectMultipleField, _objectSpread2({}, props, {\n    className: classnames(props.className, handleBasicClasses({\n      hasMultiple: !props.isEmpty,\n      prefix: CLASSNAME$2\n    })),\n    isEmpty: props.value.length === 0,\n    isMultiple: true\n  }), ref);\n});\nSelectMultiple.displayName = COMPONENT_NAME$2;\nSelectMultiple.className = CLASSNAME$2;\nSelectMultiple.defaultProps = DEFAULT_PROPS$2;\nexport { SelectVariant as S, Select as a, SelectMultipleField as b, SelectMultiple as c };","map":{"version":3,"sources":["../../../src/hooks/useListenFocus.tsx","../../../src/components/select/constants.ts","../../../src/components/select/WithSelectContext.tsx","../../../src/components/select/Select.tsx","../../../src/components/select/SelectMultiple.tsx"],"names":["isFocus","setFocus","useState","useEffect","element","ref","onFocus","onBlur","SelectVariant","input","chip","COMPONENT_NAME","CLASSNAME","getRootClassName","DEFAULT_PROPS","theme","Theme","variant","WithSelectContext","children","className","isMultiple","closeOnClick","disabled","error","hasError","helper","id","isDisabled","isEmpty","isOpen","isRequired","isValid","label","onClear","onDropdownClose","onInfiniteScroll","onInputClick","placeholder","value","forwardedProps","selectId","useMemo","uid","anchorRef","useRef","selectRef","useListenFocus","handleKeyboardNav","useCallback","evt","onClose","mergeRefs","classNames","handleBasicClasses","hasLabel","Boolean","hasPlaceholder","hasValue","prefix","dark","Placement","Kind","selectedValueRender","stopPropagation","SelectField","clearButtonProps","hasInputClear","undefined","Size","xxs","Emphasis","s","mdiCloseCircle","Select","forwardRef","lodashIsEmpty","props","hasUnique","selectedChipRender","onClick","SelectMultipleField","SelectMultiple","hasMultiple"],"mappings":";;;;;;;;;;;;;;AAEA;;;;AAGO,SAAA,cAAA,CAAA,GAAA,EAAqD;AAAA,MAAA,SAAA,GAC5BE,QAAQ,CADoB,KACpB,CADoB;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MACjDF,OADiD,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MACxCC,QADwC,GAAA,UAAA,CAAA,CAAA,CAAA;;AAGxDE,EAAAA,SAAS,CAAC,YAAM;AAAA,QACKC,OADL,GACiBC,GADjB,CAAA,OAAA;;AAEZ,QAAI,CAAJ,OAAA,EAAc;AACV,aAAA,SAAA;AACH;;AAED,QAAMC,OAAO,GAAG,SAAVA,OAAU,GAAA;AAAA,aAAML,QAAQ,CAAd,IAAc,CAAd;AAAhB,KAAA;;AACA,QAAMM,MAAM,GAAG,SAATA,MAAS,GAAA;AAAA,aAAMN,QAAQ,CAAd,KAAc,CAAd;AAAf,KAAA;;AACAG,IAAAA,OAAO,CAAPA,gBAAAA,CAAAA,OAAAA,EAAAA,OAAAA;AACAA,IAAAA,OAAO,CAAPA,gBAAAA,CAAAA,MAAAA,EAAAA,MAAAA;AACA,WAAO,YAAM;AACTA,MAAAA,OAAO,CAAPA,mBAAAA,CAAAA,OAAAA,EAAAA,OAAAA;AACAA,MAAAA,OAAO,CAAPA,mBAAAA,CAAAA,MAAAA,EAAAA,MAAAA;AAFJ,KAAA;AAVK,GAAA,EAcN,CAAA,GAAA,EAdHD,QAcG,CAdM,CAATA;AAgBA,SAAA,OAAA;AACH;ACpBD;;;;;IAGaK,aAAa,GAAG;AAAEC,EAAAA,KAAK,EAAP,OAAA;AAAkBC,EAAAA,IAAI,EAAE;AAAxB,C;ACO7B;;AACA,IAAMC,cAAc,GAApB,QAAA;AAEA;;AACA,IAAMC,SAAS,GAAGC,gBAAgB,CAAlC,cAAkC,CAAlC;AAEA;;AACO,IAAMC,aAAuC,GAAG;AACnDC,EAAAA,KAAK,EAAEC,KAAK,CADuC,KAAA;AAEnDC,EAAAA,OAAO,EAAET,aAAa,CAACC;AAF4B,CAAhD;;AAKA,IAAMS,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,aAAA,EAAA,IAAA,EAAA,GAAA,EA6BR;AAAA,MA1BjBC,QA0BiB,GAAA,IAAA,CA1BjBA,QA0BiB;AAAA,MAzBjBC,SAyBiB,GAAA,IAAA,CAzBjBA,SAyBiB;AAAA,MAxBjBC,UAwBiB,GAAA,IAAA,CAxBjBA,UAwBiB;AAAA,MAAA,iBAAA,GAAA,IAAA,CAvBjBC,YAuBiB;AAAA,MAvBjBA,YAuBiB,GAAA,iBAAA,KAAA,KAAA,CAAA,GAvBF,CAACD,UAuBC,GAAA,iBAAA;AAAA,MAtBjBE,QAsBiB,GAAA,IAAA,CAtBjBA,QAsBiB;AAAA,MArBjBC,KAqBiB,GAAA,IAAA,CArBjBA,KAqBiB;AAAA,MApBjBC,QAoBiB,GAAA,IAAA,CApBjBA,QAoBiB;AAAA,MAnBjBC,MAmBiB,GAAA,IAAA,CAnBjBA,MAmBiB;AAAA,MAlBjBC,EAkBiB,GAAA,IAAA,CAlBjBA,EAkBiB;AAAA,MAAA,eAAA,GAAA,IAAA,CAjBjBC,UAiBiB;AAAA,MAjBjBA,UAiBiB,GAAA,eAAA,KAAA,KAAA,CAAA,GAjBJL,QAiBI,GAAA,eAAA;AAAA,MAhBjBM,OAgBiB,GAAA,IAAA,CAhBjBA,OAgBiB;AAAA,MAfjBC,MAeiB,GAAA,IAAA,CAfjBA,MAeiB;AAAA,MAdjBC,UAciB,GAAA,IAAA,CAdjBA,UAciB;AAAA,MAbjBC,OAaiB,GAAA,IAAA,CAbjBA,OAaiB;AAAA,MAZjBC,KAYiB,GAAA,IAAA,CAZjBA,KAYiB;AAAA,MAXjBC,OAWiB,GAAA,IAAA,CAXjBA,OAWiB;AAAA,MAVjBC,eAUiB,GAAA,IAAA,CAVjBA,eAUiB;AAAA,MATjBC,gBASiB,GAAA,IAAA,CATjBA,gBASiB;AAAA,MARjBC,YAQiB,GAAA,IAAA,CARjBA,YAQiB;AAAA,MAPjBC,WAOiB,GAAA,IAAA,CAPjBA,WAOiB;AAAA,MAAA,UAAA,GAAA,IAAA,CANjBvB,KAMiB;AAAA,MANjBA,KAMiB,GAAA,UAAA,KAAA,KAAA,CAAA,GANTD,aAAa,CAACC,KAML,GAAA,UAAA;AAAA,MALjBwB,KAKiB,GAAA,IAAA,CALjBA,KAKiB;AAAA,MAAA,YAAA,GAAA,IAAA,CAJjBtB,OAIiB;AAAA,MAJjBA,OAIiB,GAAA,YAAA,KAAA,KAAA,CAAA,GAJPH,aAAa,CAACG,OAIP,GAAA,YAAA;AAAA,MAHduB,cAGc,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,UAAA,EAAA,WAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAA,OAAA,EAAA,UAAA,EAAA,QAAA,EAAA,IAAA,EAAA,YAAA,EAAA,SAAA,EAAA,QAAA,EAAA,YAAA,EAAA,SAAA,EAAA,OAAA,EAAA,SAAA,EAAA,iBAAA,EAAA,kBAAA,EAAA,cAAA,EAAA,aAAA,EAAA,OAAA,EAAA,OAAA,EAAA,SAAA,CAAA,CAAA;;AACrB,MAAMC,QAAQ,GAAGC,OAAO,CAAC,YAAA;AAAA,WAAMf,EAAE,IAAA,UAAA,MAAA,CAAcgB,GAAtB,EAAQ,CAAR;AAAD,GAAA,EAAgC,CAAxD,EAAwD,CAAhC,CAAxB;AACA,MAAMC,SAAS,GAAGC,MAAM,CAAxB,IAAwB,CAAxB;AACA,MAAMC,SAAS,GAAGD,MAAM,CAAxB,IAAwB,CAAxB;AACA,MAAM7C,OAAO,GAAG+C,cAAc,CAA9B,SAA8B,CAA9B;AAEA,MAAMC,iBAAiB,GAAGC,WAAW,CACjC,UAAA,GAAA,EAA2C;AACvC,QAAI,CAACC,GAAG,CAAHA,GAAAA,KAAAA,OAAAA,IAAuBA,GAAG,CAAHA,GAAAA,KAAvBA,GAAAA,IAA0CA,GAAG,CAAHA,GAAAA,KAA3C,WAAA,KAAJ,YAAA,EAAyF;AACrFA,MAAAA,GAAG,CAAHA,cAAAA;AACAb,MAAAA,YAAY;AACf;AAL4B,GAAA,EAOjC,CAPJ,YAOI,CAPiC,CAArC;;AAUA,MAAMc,OAAO,GAAG,SAAVA,OAAU,GAAM;AAAA,QAAA,kBAAA;;AAClB,QAAA,eAAA,EAAqB;AACjBhB,MAAAA,eAAe;AAClB;;AACDS,IAAAA,SAAS,KAATA,IAAAA,IAAAA,SAAS,KAAA,KAATA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,CAAAA,kBAAAA,GAAAA,SAAS,CAATA,OAAAA,MAAAA,IAAAA,IAAAA,kBAAAA,KAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,kBAAAA,CAAAA,IAAAA,EAAAA;AAJJ,GAAA;;AAOA,SACI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACI,IAAA,GAAG,EAAEQ,SAAS,CAAA,GAAA,EADlB,SACkB,CADlB;AAEI,IAAA,SAAS,EAAEC,UAAU,CAAA,SAAA,EAEjBC,kBAAkB,CAAC;AACf7B,MAAAA,QAAQ,EADO,QAAA;AAEf8B,MAAAA,QAAQ,EAAEC,OAAO,CAFF,KAEE,CAFF;AAGfC,MAAAA,cAAc,EAAED,OAAO,CAHR,WAGQ,CAHR;AAIfE,MAAAA,QAAQ,EAAE,CAJK,OAAA;AAKf9B,MAAAA,UAAU,EALK,UAAA;AAMfC,MAAAA,OAAO,EANQ,OAAA;AAOf7B,MAAAA,OAAO,EAPQ,OAAA;AAQf8B,MAAAA,MAAM,EARS,MAAA;AASfE,MAAAA,OAAO,EATQ,OAAA;AAUf2B,MAAAA,MAAM,EAVS,SAAA;AAWf5C,MAAAA,KAAK,EAAEA,KAAK,KAAKC,KAAK,CAAfD,KAAAA,GAAwBC,KAAK,CAA7BD,KAAAA,GAAsCC,KAAK,CAAC4C;AAXpC,KAAD,CAFD;AAFzB,GAAA,EAmBI,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA,QAAA,CAAA,EAAA,EAAA,cAAA,EAAA;AAEI,IAAA,SAAS,EAFb,SAAA;AAGI,qBAHJ,UAAA;AAII,IAAA,iBAAiB,EAJrB,iBAAA;AAKI,IAAA,QAAQ,EALZ,QAAA;AAMI,IAAA,UAAU,EANd,UAAA;AAOI,IAAA,OAAO,EAPX,OAAA;AAQI,IAAA,UAAU,EARd,UAAA;AASI,IAAA,OAAO,EATX,OAAA;AAUI,IAAA,KAAK,EAVT,KAAA;AAWI,IAAA,WAAW,EAXf,WAAA;AAYI,IAAA,EAAE,EAZN,QAAA;AAaI,IAAA,KAAK,EAbT,KAAA;AAcI,IAAA,KAAK,EAdT,KAAA;AAeI,IAAA,OAAO,EAfX,OAAA;AAgBI,IAAA,OAAO,EAhBX,OAAA;AAiBI,IAAA,YAAY,EAAEvB;AAjBlB,GAAA,CAAA,CAnBJ,EAsCI,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AACI,IAAA,SAAS,EADb,SAAA;AAEI,IAAA,YAAY,EAFhB,YAAA;AAGI,IAAA,gBAAgB,EAHpB,IAAA;AAII,IAAA,aAAa,EAJjB,IAAA;AAKI,IAAA,MAAM,EAAE,CAAC,CALb,MAAA;AAMI,IAAA,SAAS,EAAEwB,SAAS,CANxB,YAAA;AAOI,IAAA,OAAO,EAPX,OAAA;AAQI,IAAA,gBAAgB,EAAEzB;AARtB,GAAA,EAtCJ,QAsCI,CAtCJ,EAkDKX,QAAQ,IAARA,KAAAA,IACG,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA;AAAa,IAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAAtB,UAAsB,CAAtB;AAAgD,IAAA,IAAI,EAAEqC,IAAI,CAA1D,KAAA;AAAkE,IAAA,KAAK,EAAE/C;AAAzE,GAAA,EAnDR,KAmDQ,CAnDR,EAuDKW,MAAM,IACH,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA;AAAa,IAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAAtB,UAAsB,CAAtB;AAAgD,IAAA,KAAK,EAAEX;AAAvD,GAAA,EAzDZ,MAyDY,CAxDR,CADJ;AApDG,CAAA;ACDP;;;AACA,IAAMJ,gBAAc,GAApB,QAAA;AAEA;;AACA,IAAMC,WAAS,GAAGC,gBAAgB,CAAlC,gBAAkC,CAAlC;AAEA;;AACA,IAAMC,eAAmC,GAAG;AACxCiD,EAAAA,mBAAmB,EAAE,SAAA,mBAAA,CAAA,MAAA,EAAA;AAAA,WAAA,MAAA;AAAA;AADmB,CAA5C;;AAIA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAA,GAAA,EAAA;AAAA,SAAgBd,GAAG,CAAnB,eAAgBA,EAAhB;AAAxB,CAAA;AAEA;;;;;AAGA,IAAMe,WAAkC,GAAG,SAArCA,WAAqC,CAAA,IAAA,EAoBrC;AAAA,MAnBFrB,SAmBE,GAAA,IAAA,CAnBFA,SAmBE;AAAA,MAlBFsB,gBAkBE,GAAA,IAAA,CAlBFA,gBAkBE;AAAA,MAjBFlB,iBAiBE,GAAA,IAAA,CAjBFA,iBAiBE;AAAA,MAhBFvB,QAgBE,GAAA,IAAA,CAhBFA,QAgBE;AAAA,MAfF0C,aAeE,GAAA,IAAA,CAfFA,aAeE;AAAA,MAdFxC,EAcE,GAAA,IAAA,CAdFA,EAcE;AAAA,MAbFC,UAaE,GAAA,IAAA,CAbFA,UAaE;AAAA,MAZFC,OAYE,GAAA,IAAA,CAZFA,OAYE;AAAA,MAXFE,UAWE,GAAA,IAAA,CAXFA,UAWE;AAAA,MAVFC,OAUE,GAAA,IAAA,CAVFA,OAUE;AAAA,MATFC,KASE,GAAA,IAAA,CATFA,KASE;AAAA,MARFC,OAQE,GAAA,IAAA,CARFA,OAQE;AAAA,MAPFG,YAOE,GAAA,IAAA,CAPFA,YAOE;AAAA,MANFC,WAME,GAAA,IAAA,CANFA,WAME;AAAA,MALFyB,mBAKE,GAAA,IAAA,CALFA,mBAKE;AAAA,MAJFhD,KAIE,GAAA,IAAA,CAJFA,KAIE;AAAA,MAHFwB,KAGE,GAAA,IAAA,CAHFA,KAGE;AAAA,MAFFtB,OAEE,GAAA,IAAA,CAFFA,OAEE;AAAA,MADCuB,cACD,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,WAAA,EAAA,kBAAA,EAAA,mBAAA,EAAA,UAAA,EAAA,eAAA,EAAA,IAAA,EAAA,YAAA,EAAA,SAAA,EAAA,YAAA,EAAA,SAAA,EAAA,OAAA,EAAA,SAAA,EAAA,cAAA,EAAA,aAAA,EAAA,qBAAA,EAAA,OAAA,EAAA,OAAA,EAAA,SAAA,CAAA,CAAA;;AACF,SACI,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACKvB,OAAO,KAAKT,aAAa,CAAzBS,KAAAA,IACG,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACKgB,KAAK,IACF,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAA,GAAA,MAAA,CAAA,WAAA,EAAA,UAAA;AAAd,GAAA,EACI,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AACI,IAAA,OAAO,EADX,EAAA;AAEI,IAAA,SAAS,EAAA,GAAA,MAAA,CAAA,WAAA,EAFb,SAEa,CAFb;AAGI,IAAA,UAAU,EAHd,UAAA;AAII,IAAA,KAAK,EAAElB;AAJX,GAAA,EAHZ,KAGY,CADJ,CAFR,EAeI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA;AACI,IAAA,GAAG,EADP,SAAA;AAEI,IAAA,EAAE,EAFN,EAAA;AAGI,IAAA,SAAS,EAAA,GAAA,MAAA,CAAA,WAAA,EAHb,WAGa,CAHb;AAII,IAAA,OAAO,EAJX,YAAA;AAKI,IAAA,SAAS,EALb,iBAAA;AAMI,IAAA,QAAQ,EAAEa,UAAU,GAAA,SAAA,GANxB,CAAA;AAOI,qBAAeA,UAAU,IAAIwC;AAPjC,GAAA,EAAA,cAAA,CAAA,EAUI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACI,IAAA,SAAS,EAAEf,UAAU,CAAC,CAAA,GAAA,MAAA,CAAA,WAAA,EAAA,gBAAA,CAAA,EAElBxB,OAAO,IAAPA,WAAAA,IAAAA,GAAAA,MAAAA,CAAAA,WAAAA,EAFiB,6BAEjBA,CAFkB,CAAD;AADzB,GAAA,EAMK,CAAA,OAAA,IAAY,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,IAAA,EAAOkC,mBAAP,KAAA,IAAOA,IAAAA,mBAAP,KAAA,KAAA,CAAOA,GAAP,KAAA,CAAOA,GAAAA,mBAAmB,CAN3C,KAM2C,CAA1B,CANjB,EAQKlC,OAAO,IAAPA,WAAAA,IAA0B,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,IAAA,EAlBnC,WAkBmC,CAR/B,CAVJ,EAqBK,CAACG,OAAO,IAAR,QAAA,KACG,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAA,GAAA,MAAA,CAAA,WAAA,EAAA,kBAAA;AAAd,GAAA,EACI,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,IAAI,EAAEA,OAAO,GAAA,cAAA,GAAnB,cAAA;AAAuD,IAAA,IAAI,EAAEqC,IAAI,CAACC;AAAlE,GAAA,CADJ,CAtBR,EA2BKH,aAAa,IAAbA,gBAAAA,IACG,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,QAAA,CAAA,EAAA,EAAA,gBAAA,EAAA;AAEI,IAAA,SAAS,EAAA,GAAA,MAAA,CAAA,WAAA,EAFb,eAEa,CAFb;AAGI,IAAA,IAAI,EAHR,cAAA;AAII,IAAA,QAAQ,EAAEI,QAAQ,CAJtB,GAAA;AAKI,IAAA,IAAI,EAAEF,IAAI,CALd,CAAA;AAMI,IAAA,KAAK,EANT,KAAA;AAOI,IAAA,OAAO,EAPX,OAAA;AAQI,IAAA,SAAS,EAAEL;AARf,GAAA,CAAA,CA5BR,EAwCI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAA,GAAA,MAAA,CAAA,WAAA,EAAA,mBAAA;AAAd,GAAA,EACI,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,IAAI,EAAV,WAAA;AAAyB,IAAA,IAAI,EAAEK,IAAI,CAACG;AAApC,GAAA,CADJ,CAxCJ,CAfJ,CAFR,EAgEKvD,OAAO,KAAKT,aAAa,CAAzBS,IAAAA,IACG,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AACI,IAAA,EAAE,EADN,EAAA;AAEI,IAAA,UAAU,EAAE,CAFhB,OAAA;AAGI,IAAA,UAAU,EAHd,UAAA;AAII,IAAA,KAAK,EAAE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,MAAA,IAAI,EAAEY,OAAO,GAAA,WAAA,GAAiB4C;AAApC,KAAA,CAJX;AAKI,IAAA,YAAY,EAAE5C,OAAO,GAAA,YAAA,GALzB,OAAA;AAMI,IAAA,OAAO,EANX,YAAA;AAOI,IAAA,GAAG,EAPP,SAAA;AAQI,IAAA,KAAK,EAAEd;AARX,GAAA,EAAA,cAAA,CAAA,EAWKc,OAAO,IAAI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,IAAA,EAXhB,KAWgB,CAXhB,EAaK,CAAA,OAAA,IAAY,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,IAAA,EAAOkC,mBAAP,KAAA,IAAOA,IAAAA,mBAAP,KAAA,KAAA,CAAOA,GAAP,KAAA,CAAOA,GAAAA,mBAAmB,CA/EvD,KA+EuD,CAA1B,CAbjB,CAjER,CADJ;AArBJ,CAAA;AA2GA;;;;;;;;;IAOaW,MAAyC,GAAGC,UAAU,CAAC,UAAA,KAAA,EAAA,GAAA,EAAgB;AAChF,MAAM9C,SAAO,GAAG+C,OAAa,CAACC,KAAK,CAAnC,KAA6B,CAA7B;AACA,MAAMV,aAAa,GAAGU,KAAK,CAALA,OAAAA,IAAiBA,KAAK,CAAtBA,gBAAAA,IAA2C,CAAjE,SAAA;AAEA,SAAO3D,iBAAiB,CAAA,WAAA,EAAA,cAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAIhBE,IAAAA,SAAS,EAAEiC,UAAU,CACjBwB,KAAK,CADY,SAAA,EAEjBvB,kBAAkB,CAAC;AACfa,MAAAA,aAAa,EADE,aAAA;AAEfW,MAAAA,SAAS,EAAE,CAACD,KAAK,CAFF,OAAA;AAGflB,MAAAA,MAAM,EAAE/C;AAHO,KAAD,CAFD,CAJL;AAYhBuD,IAAAA,aAAa,EAZG,aAAA;AAahBtC,IAAAA,OAAO,EAAPA;AAbgB,GAAA,CAAA,EAAxB,GAAwB,CAAxB;AAJ+D,CAAA,C;AAsBnE6C,MAAM,CAANA,WAAAA,GAAAA,gBAAAA;AACAA,MAAM,CAANA,SAAAA,GAAAA,WAAAA;AACAA,MAAM,CAANA,YAAAA,GAAAA,eAAAA;AACAA,MAAM,CAANA,SAAAA,GAAAA,WAAAA;ACpKA;;AAcA;;AACA,IAAM/D,gBAAc,GAApB,QAAA;AAEA;;AACA,IAAMC,WAAS,GAAGC,gBAAgB,CAAlC,gBAAkC,CAAlC;AAEA;;AACA,IAAMC,eAA2C,GAAG;AAChDiE,EAAAA,kBADgD,EAAA,SAAA,kBAAA,CAAA,MAAA,EAAA,KAAA,EAAA,OAAA,EAAA,UAAA,EAAA,KAAA,EACgB;AAC5D,QAAMC,OAAO,GAAG,SAAVA,OAAU,CAAA,KAAA,EAAA;AAAA,aAA6B9C,OAAO,IAAIA,OAAO,CAAA,KAAA,EAA/C,MAA+C,CAA/C;AAAhB,KAAA;;AACA,WACI,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACI,MAAA,GAAG,EADP,KAAA;AAEI,MAAA,KAAK,EAAEA,OAAO,IAAI,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,QAAA,IAAI,EAAV,QAAA;AAAsB,QAAA,IAAI,EAAEmC,IAAI,CAACC;AAAjC,OAAA,CAFtB;AAGI,MAAA,UAAU,EAHd,UAAA;AAII,MAAA,IAAI,EAAED,IAAI,CAJd,CAAA;AAKI,MAAA,YAAY,EALhB,OAAA;AAMI,MAAA,OAAO,EANX,OAAA;AAOI,MAAA,KAAK,EAAEtD;AAPX,KAAA,EADJ,MACI,CADJ;AAH4C,GAAA;AAiBhDgD,EAAAA,mBAAmB,EAAE,SAAA,mBAAA,CAAA,MAAA,EAAA;AAAA,WAAA,MAAA;AAAA;AAjB2B,CAApD;;IAoBakB,mBAAkD,GAAG,SAArDA,mBAAqD,CAAA,IAAA,EAAA;AAAA,MAC9DrC,SAD8D,GAAA,IAAA,CAAA,SAAA;AAAA,MAE9DI,iBAF8D,GAAA,IAAA,CAAA,iBAAA;AAAA,MAG9DvB,QAH8D,GAAA,IAAA,CAAA,QAAA;AAAA,MAI9DE,EAJ8D,GAAA,IAAA,CAAA,EAAA;AAAA,MAK9DC,UAL8D,GAAA,IAAA,CAAA,UAAA;AAAA,MAM9DC,OAN8D,GAAA,IAAA,CAAA,OAAA;AAAA,MAO9DE,UAP8D,GAAA,IAAA,CAAA,UAAA;AAAA,MAQ9DC,OAR8D,GAAA,IAAA,CAAA,OAAA;AAAA,MAS9DC,KAT8D,GAAA,IAAA,CAAA,KAAA;AAAA,MAU9DC,OAV8D,GAAA,IAAA,CAAA,OAAA;AAAA,MAW9DG,YAX8D,GAAA,IAAA,CAAA,YAAA;AAAA,MAY9DC,WAZ8D,GAAA,IAAA,CAAA,WAAA;AAAA,MAa9DyC,kBAb8D,GAAA,IAAA,CAAA,kBAAA;AAAA,MAc9DhB,mBAd8D,GAAA,IAAA,CAAA,mBAAA;AAAA,MAe9DhD,KAf8D,GAAA,IAAA,CAAA,KAAA;AAAA,MAgB9DwB,KAhB8D,GAAA,IAAA,CAAA,KAAA;AAAA,MAiB9DtB,OAjB8D,GAAA,IAAA,CAAA,OAAA;AAAA,SAmB9D,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACKA,OAAO,KAAKT,aAAa,CAAzBS,KAAAA,IACG,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACKgB,KAAK,IACF,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAA,GAAA,MAAA,CAAA,WAAA,EAAA,UAAA;AAAd,GAAA,EACI,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AACI,IAAA,OAAO,EADX,EAAA;AAEI,IAAA,SAAS,EAAA,GAAA,MAAA,CAAA,WAAA,EAFb,SAEa,CAFb;AAGI,IAAA,UAAU,EAHd,UAAA;AAII,IAAA,KAAK,EAAElB;AAJX,GAAA,EAHZ,KAGY,CADJ,CAFR,EAeI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACI,IAAA,GAAG,EADP,SAAA;AAEI,IAAA,EAAE,EAFN,EAAA;AAGI,IAAA,SAAS,EAAA,GAAA,MAAA,CAAA,WAAA,EAHb,WAGa,CAHb;AAII,IAAA,OAAO,EAJX,YAAA;AAKI,IAAA,SAAS,EALb,iBAAA;AAMI,IAAA,QAAQ,EAAEa,UAAU,GAAA,SAAA,GANxB,CAAA;AAOI,qBAAeA,UAAU,IAAIwC;AAPjC,GAAA,EASI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAA,GAAA,MAAA,CAAA,WAAA,EAAA,SAAA;AAAd,GAAA,EACK,CAAA,OAAA,IACG,KAAK,CAAL,GAAA,CAAU,UAAA,GAAA,EAAA,KAAA,EAAA;AAAA,WAAgBW,kBAAhB,KAAA,IAAgBA,IAAAA,kBAAhB,KAAA,KAAA,CAAgBA,GAAhB,KAAA,CAAgBA,GAAAA,kBAAkB,CAAA,GAAA,EAAA,KAAA,EAAA,OAAA,EAAA,UAAA,EAAlC,KAAkC,CAAlC;AAXtB,GAWY,CAFR,CATJ,EAcKlD,OAAO,IAAPA,WAAAA,IACG,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACI,IAAA,SAAS,EAAEwB,UAAU,CAAC,CAAA,GAAA,MAAA,CAAA,WAAA,EAAA,gBAAA,CAAA,EAAA,GAAA,MAAA,CAAA,WAAA,EAAD,6BAAC,CAAA,CAAD;AADzB,GAAA,EAMI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,IAAA,EArBZ,WAqBY,CANJ,CAfR,EAyBK,CAACrB,OAAO,IAAR,QAAA,KACG,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAA,GAAA,MAAA,CAAA,WAAA,EAAA,kBAAA;AAAd,GAAA,EACI,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,IAAI,EAAEA,OAAO,GAAA,cAAA,GAAnB,cAAA;AAAuD,IAAA,IAAI,EAAEqC,IAAI,CAACC;AAAlE,GAAA,CADJ,CA1BR,EA+BI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAA,GAAA,MAAA,CAAA,WAAA,EAAA,mBAAA;AAAd,GAAA,EACI,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,IAAI,EAAV,WAAA;AAAyB,IAAA,IAAI,EAAED,IAAI,CAACG;AAApC,GAAA,CADJ,CA/BJ,CAfJ,CAFR,EAuDKvD,OAAO,KAAKT,aAAa,CAAzBS,IAAAA,IACG,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACI,IAAA,EAAE,EADN,EAAA;AAEI,IAAA,UAAU,EAAE,CAFhB,OAAA;AAGI,IAAA,UAAU,EAHd,UAAA;AAII,IAAA,KAAK,EAAE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,MAAA,IAAI,EAAEY,OAAO,GAAA,WAAA,GAAiB4C;AAApC,KAAA,CAJX;AAKI,IAAA,YAAY,EAAE5C,OAAO,GAAA,YAAA,GALzB,OAAA;AAMI,IAAA,OAAO,EANX,YAAA;AAOI,IAAA,GAAG,EAPP,SAAA;AAQI,IAAA,KAAK,EAAEd;AARX,GAAA,EAUKc,OAAO,IAAI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,IAAA,EAVhB,KAUgB,CAVhB,EAYK,CAAA,OAAA,IACG,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,IAAA,EACI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,IAAA,EAAOkC,mBAAP,KAAA,IAAOA,IAAAA,mBAAP,KAAA,KAAA,CAAOA,GAAP,KAAA,CAAOA,GAAAA,mBAAmB,CAAGxB,KAAK,CADtC,CACsC,CAAR,CAA1B,CADJ,EAGKA,KAAK,CAALA,MAAAA,GAAAA,CAAAA,IAAoB,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,IAAA,EAAA,OAAA,EAAcA,KAAK,CAALA,MAAAA,GA3FO,CA2FrB,CAHzB,CAbR,CAxDR,CAnB8D;AAAA,C;AAmGlE;;;;;;;;;IAOa2C,cAAyD,GAAGP,UAAU,CAAC,UAAA,KAAA,EAAA,GAAA,EAAgB;AAChG,SAAOzD,iBAAiB,CAAA,mBAAA,EAAA,cAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAIhBE,IAAAA,SAAS,EAAEiC,UAAU,CACjBwB,KAAK,CADY,SAAA,EAEjBvB,kBAAkB,CAAC;AACf6B,MAAAA,WAAW,EAAE,CAACN,KAAK,CADJ,OAAA;AAEflB,MAAAA,MAAM,EAAE/C;AAFO,KAAD,CAFD,CAJL;AAWhBiB,IAAAA,OAAO,EAAEgD,KAAK,CAALA,KAAAA,CAAAA,MAAAA,KAXO,CAAA;AAYhBxD,IAAAA,UAAU,EAAE;AAZI,GAAA,CAAA,EAAxB,GAAwB,CAAxB;AAD+E,CAAA,C;AAkBnF6D,cAAc,CAAdA,WAAAA,GAAAA,gBAAAA;AACAA,cAAc,CAAdA,SAAAA,GAAAA,WAAAA;AACAA,cAAc,CAAdA,YAAAA,GAAAA,eAAAA","sourcesContent":["import { RefObject, useEffect, useState } from 'react';\n\n/**\n * Listen on element focus to store the focus status.\n */\nexport function useListenFocus(ref: RefObject<HTMLElement>) {\n    const [isFocus, setFocus] = useState(false);\n\n    useEffect(() => {\n        const { current: element } = ref;\n        if (!element) {\n            return undefined;\n        }\n\n        const onFocus = () => setFocus(true);\n        const onBlur = () => setFocus(false);\n        element.addEventListener('focus', onFocus);\n        element.addEventListener('blur', onBlur);\n        return () => {\n            element.removeEventListener('focus', onFocus);\n            element.removeEventListener('blur', onBlur);\n        };\n    }, [ref, setFocus]);\n\n    return isFocus;\n}\n","import { IconButtonProps } from '@lumx/react';\nimport { Theme } from '@lumx/react/components';\nimport { GenericProps, ValueOf } from '@lumx/react/utils';\nimport { ReactNode, SyntheticEvent } from 'react';\n\n/**\n * Select variants.\n */\nexport const SelectVariant = { input: 'input', chip: 'chip' } as const;\nexport type SelectVariant = ValueOf<typeof SelectVariant>;\n\nexport interface CoreSelectProps extends GenericProps {\n    /** Props to pass to the clear button (minus those already set by the Select props). If not specified, the button won't be displayed. */\n    clearButtonProps?: Pick<IconButtonProps, 'label'> &\n        Omit<IconButtonProps, 'label' | 'onClick' | 'icon' | 'emphasis'>;\n    /** Whether the select (input variant) is displayed with error style or not. */\n    hasError?: boolean;\n    /** Error message. */\n    error?: string | ReactNode;\n    /** Helper text. */\n    helper?: string;\n    /** Whether the select should close on click. */\n    closeOnClick?: boolean;\n    /** Whether the component is disabled or not. */\n    isDisabled?: boolean;\n    /** Whether the component is required or not. */\n    isRequired?: boolean;\n    /** Whether the component is open or not. */\n    isOpen?: boolean;\n    /** Whether the select (input variant) is displayed with valid style or not. */\n    isValid?: boolean;\n    /** Label text. */\n    label?: string;\n    /** Placeholder input text. */\n    placeholder?: string;\n    /** Theme adapting the component to light or dark background. */\n    theme?: Theme;\n    /** Select variant. */\n    variant?: SelectVariant;\n    /** On clear callback. */\n    onClear?(event: SyntheticEvent, value?: string): void;\n    /** On blur callback. */\n    onBlur?(): void;\n    /** On filter text change callback (with 500ms debounce). */\n    onFilter?(): void;\n    /** On input click callback (can be used for dropdown toggle). */\n    onInputClick?(): void;\n    /** On dropdown close callback. */\n    onDropdownClose?(): void;\n    /** On scroll end callback. */\n    onInfiniteScroll?(): void;\n    /** Render value function. Default: Renders the value as a string. */\n    selectedValueRender?(choice: string): ReactNode | string;\n}\n","import React, { Ref, useCallback, useMemo, useRef } from 'react';\n\nimport classNames from 'classnames';\nimport { uid } from 'uid';\n\nimport { Kind, Theme } from '@lumx/react/components';\nimport { Dropdown } from '@lumx/react/components/dropdown/Dropdown';\nimport { InputHelper } from '@lumx/react/components/input-helper/InputHelper';\nimport { Placement } from '@lumx/react/components/popover/Popover';\n\nimport { getRootClassName, handleBasicClasses } from '@lumx/react/utils';\nimport { mergeRefs } from '@lumx/react/utils/mergeRefs';\nimport { useListenFocus } from '@lumx/react/hooks/useListenFocus';\nimport { CoreSelectProps, SelectVariant } from './constants';\n\n/** The display name of the component. */\nconst COMPONENT_NAME = 'Select';\n\n/** The default class name and classes prefix for this component. */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/** The default value of props. */\nexport const DEFAULT_PROPS: Partial<CoreSelectProps> = {\n    theme: Theme.light,\n    variant: SelectVariant.input,\n};\n\nexport const WithSelectContext = (\n    SelectElement: React.FC<any>,\n    {\n        children,\n        className,\n        isMultiple,\n        closeOnClick = !isMultiple,\n        disabled,\n        error,\n        hasError,\n        helper,\n        id,\n        isDisabled = disabled,\n        isEmpty,\n        isOpen,\n        isRequired,\n        isValid,\n        label,\n        onClear,\n        onDropdownClose,\n        onInfiniteScroll,\n        onInputClick,\n        placeholder,\n        theme = DEFAULT_PROPS.theme,\n        value,\n        variant = DEFAULT_PROPS.variant,\n        ...forwardedProps\n    }: CoreSelectProps,\n    ref: Ref<HTMLDivElement>,\n): React.ReactElement => {\n    const selectId = useMemo(() => id || `select-${uid()}`, [id]);\n    const anchorRef = useRef<HTMLElement>(null);\n    const selectRef = useRef<HTMLDivElement>(null);\n    const isFocus = useListenFocus(anchorRef);\n\n    const handleKeyboardNav = useCallback(\n        (evt: React.KeyboardEvent<HTMLElement>) => {\n            if ((evt.key === 'Enter' || evt.key === ' ' || evt.key === 'ArrowDown') && onInputClick) {\n                evt.preventDefault();\n                onInputClick();\n            }\n        },\n        [onInputClick],\n    );\n\n    const onClose = () => {\n        if (onDropdownClose) {\n            onDropdownClose();\n        }\n        anchorRef?.current?.blur();\n    };\n\n    return (\n        <div\n            ref={mergeRefs(ref, selectRef)}\n            className={classNames(\n                className,\n                handleBasicClasses({\n                    hasError,\n                    hasLabel: Boolean(label),\n                    hasPlaceholder: Boolean(placeholder),\n                    hasValue: !isEmpty,\n                    isDisabled,\n                    isEmpty,\n                    isFocus,\n                    isOpen,\n                    isValid,\n                    prefix: CLASSNAME,\n                    theme: theme === Theme.light ? Theme.light : Theme.dark,\n                }),\n            )}\n        >\n            <SelectElement\n                {...forwardedProps}\n                anchorRef={anchorRef}\n                aria-disabled={isDisabled}\n                handleKeyboardNav={handleKeyboardNav}\n                hasError={hasError}\n                isDisabled={isDisabled}\n                isEmpty={isEmpty}\n                isRequired={isRequired}\n                isValid={isValid}\n                label={label}\n                placeholder={placeholder}\n                id={selectId}\n                theme={theme}\n                value={value}\n                variant={variant}\n                onClear={onClear}\n                onInputClick={onInputClick}\n            />\n            <Dropdown\n                anchorRef={anchorRef}\n                closeOnClick={closeOnClick}\n                closeOnClickAway\n                closeOnEscape\n                isOpen={!!isOpen}\n                placement={Placement.BOTTOM_START}\n                onClose={onClose}\n                onInfiniteScroll={onInfiniteScroll}\n            >\n                {children}\n            </Dropdown>\n            {hasError && error && (\n                <InputHelper className={`${CLASSNAME}__helper`} kind={Kind.error} theme={theme}>\n                    {error}\n                </InputHelper>\n            )}\n            {helper && (\n                <InputHelper className={`${CLASSNAME}__helper`} theme={theme}>\n                    {helper}\n                </InputHelper>\n            )}\n        </div>\n    );\n};\n","import React, { forwardRef, RefObject } from 'react';\n\nimport classNames from 'classnames';\nimport lodashIsEmpty from 'lodash/isEmpty';\n\nimport { mdiAlertCircle, mdiCheckCircle, mdiCloseCircle, mdiMenuDown } from '@lumx/icons';\n\nimport { Emphasis, Size } from '@lumx/react/components';\nimport { IconButton } from '@lumx/react/components/button/IconButton';\nimport { Chip } from '@lumx/react/components/chip/Chip';\nimport { Icon } from '@lumx/react/components/icon/Icon';\nimport { InputLabel } from '@lumx/react/components/input-label/InputLabel';\n\nimport { Comp, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\n\nimport { WithSelectContext } from './WithSelectContext';\nimport { CoreSelectProps, SelectVariant } from './constants';\n\n/** Defines the props of the component. */\nexport interface SelectProps extends CoreSelectProps {\n    /** Selected value. */\n    value: string;\n}\n\nexport { SelectVariant };\n\n/** The display name of the component. */\nconst COMPONENT_NAME = 'Select';\n\n/** The default class name and classes prefix for this component. */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/** The default value of props. */\nconst DEFAULT_PROPS: Partial<SelectProps> = {\n    selectedValueRender: (choice) => choice,\n};\n\nconst stopPropagation = (evt: Event) => evt.stopPropagation();\n\n/**\n * Select component.\n */\nconst SelectField: React.FC<SelectProps> = ({\n    anchorRef,\n    clearButtonProps,\n    handleKeyboardNav,\n    hasError,\n    hasInputClear,\n    id,\n    isDisabled,\n    isEmpty,\n    isRequired,\n    isValid,\n    label,\n    onClear,\n    onInputClick,\n    placeholder,\n    selectedValueRender,\n    theme,\n    value,\n    variant,\n    ...forwardedProps\n}) => {\n    return (\n        <>\n            {variant === SelectVariant.input && (\n                <>\n                    {label && (\n                        <div className={`${CLASSNAME}__header`}>\n                            <InputLabel\n                                htmlFor={id}\n                                className={`${CLASSNAME}__label`}\n                                isRequired={isRequired}\n                                theme={theme}\n                            >\n                                {label}\n                            </InputLabel>\n                        </div>\n                    )}\n\n                    {/* eslint-disable-next-line jsx-a11y/no-static-element-interactions */}\n                    <div\n                        ref={anchorRef as RefObject<HTMLDivElement>}\n                        id={id}\n                        className={`${CLASSNAME}__wrapper`}\n                        onClick={onInputClick}\n                        onKeyDown={handleKeyboardNav}\n                        tabIndex={isDisabled ? undefined : 0}\n                        aria-disabled={isDisabled || undefined}\n                        {...forwardedProps}\n                    >\n                        <div\n                            className={classNames([\n                                `${CLASSNAME}__input-native`,\n                                isEmpty && placeholder && `${CLASSNAME}__input-native--placeholder`,\n                            ])}\n                        >\n                            {!isEmpty && <span>{selectedValueRender?.(value)}</span>}\n\n                            {isEmpty && placeholder && <span>{placeholder}</span>}\n                        </div>\n\n                        {(isValid || hasError) && (\n                            <div className={`${CLASSNAME}__input-validity`}>\n                                <Icon icon={isValid ? mdiCheckCircle : mdiAlertCircle} size={Size.xxs} />\n                            </div>\n                        )}\n\n                        {hasInputClear && clearButtonProps && (\n                            <IconButton\n                                {...clearButtonProps}\n                                className={`${CLASSNAME}__input-clear`}\n                                icon={mdiCloseCircle}\n                                emphasis={Emphasis.low}\n                                size={Size.s}\n                                theme={theme}\n                                onClick={onClear}\n                                onKeyDown={stopPropagation}\n                            />\n                        )}\n\n                        <div className={`${CLASSNAME}__input-indicator`}>\n                            <Icon icon={mdiMenuDown} size={Size.s} />\n                        </div>\n                    </div>\n                </>\n            )}\n\n            {variant === SelectVariant.chip && (\n                <Chip\n                    id={id}\n                    isSelected={!isEmpty}\n                    isDisabled={isDisabled}\n                    after={<Icon icon={isEmpty ? mdiMenuDown : mdiCloseCircle} />}\n                    onAfterClick={isEmpty ? onInputClick : onClear}\n                    onClick={onInputClick}\n                    ref={anchorRef as RefObject<HTMLAnchorElement>}\n                    theme={theme}\n                    {...forwardedProps}\n                >\n                    {isEmpty && <span>{label}</span>}\n\n                    {!isEmpty && <span>{selectedValueRender?.(value)}</span>}\n                </Chip>\n            )}\n        </>\n    );\n};\n\n/**\n * Select component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const Select: Comp<SelectProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const isEmpty = lodashIsEmpty(props.value);\n    const hasInputClear = props.onClear && props.clearButtonProps && !isEmpty;\n\n    return WithSelectContext(\n        SelectField,\n        {\n            ...props,\n            className: classNames(\n                props.className,\n                handleBasicClasses({\n                    hasInputClear,\n                    hasUnique: !props.isEmpty,\n                    prefix: CLASSNAME,\n                }),\n            ),\n            hasInputClear,\n            isEmpty,\n        },\n        ref,\n    );\n});\nSelect.displayName = COMPONENT_NAME;\nSelect.className = CLASSNAME;\nSelect.defaultProps = DEFAULT_PROPS;\nSelect.className = CLASSNAME;\n","import React, { forwardRef, ReactNode, RefObject, SyntheticEvent } from 'react';\n\nimport classNames from 'classnames';\n\nimport { mdiAlertCircle, mdiCheckCircle, mdiClose, mdiCloseCircle, mdiMenuDown } from '@lumx/icons';\n\nimport { Size } from '@lumx/react/components';\nimport { Chip } from '@lumx/react/components/chip/Chip';\nimport { ChipGroup } from '@lumx/react/components/chip/ChipGroup';\nimport { Icon } from '@lumx/react/components/icon/Icon';\nimport { InputLabel } from '@lumx/react/components/input-label/InputLabel';\n\nimport { Comp, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\n\nimport { WithSelectContext } from './WithSelectContext';\nimport { CoreSelectProps, SelectVariant } from './constants';\n\n/** Defines the props of the component. */\nexport interface SelectMultipleProps extends CoreSelectProps {\n    /** Selected values. */\n    value: string[];\n    /** Selected value render function. Default: Renders the value inside of a Chip. */\n    selectedChipRender?(\n        choice: string,\n        index: number,\n        onClear?: (event: SyntheticEvent, choice: string) => void,\n        isDisabled?: boolean,\n        theme?: any,\n    ): ReactNode | string;\n}\n\n/** The display name of the component. */\nconst COMPONENT_NAME = 'Select';\n\n/** The default class name and classes prefix for this component. */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/** The default value of props. */\nconst DEFAULT_PROPS: Partial<SelectMultipleProps> = {\n    selectedChipRender(choice, index, onClear, isDisabled?, theme?) {\n        const onClick = (event: React.MouseEvent) => onClear && onClear(event, choice);\n        return (\n            <Chip\n                key={index}\n                after={onClear && <Icon icon={mdiClose} size={Size.xxs} />}\n                isDisabled={isDisabled}\n                size={Size.s}\n                onAfterClick={onClick}\n                onClick={onClick}\n                theme={theme}\n            >\n                {choice}\n            </Chip>\n        );\n    },\n    selectedValueRender: (choice) => choice,\n};\n\nexport const SelectMultipleField: React.FC<SelectMultipleProps> = ({\n    anchorRef,\n    handleKeyboardNav,\n    hasError,\n    id,\n    isDisabled,\n    isEmpty,\n    isRequired,\n    isValid,\n    label,\n    onClear,\n    onInputClick,\n    placeholder,\n    selectedChipRender,\n    selectedValueRender,\n    theme,\n    value,\n    variant,\n}) => (\n    <>\n        {variant === SelectVariant.input && (\n            <>\n                {label && (\n                    <div className={`${CLASSNAME}__header`}>\n                        <InputLabel\n                            htmlFor={id}\n                            className={`${CLASSNAME}__label`}\n                            isRequired={isRequired}\n                            theme={theme}\n                        >\n                            {label}\n                        </InputLabel>\n                    </div>\n                )}\n\n                {/* eslint-disable-next-line jsx-a11y/no-static-element-interactions */}\n                <div\n                    ref={anchorRef as RefObject<HTMLDivElement>}\n                    id={id}\n                    className={`${CLASSNAME}__wrapper`}\n                    onClick={onInputClick}\n                    onKeyDown={handleKeyboardNav}\n                    tabIndex={isDisabled ? undefined : 0}\n                    aria-disabled={isDisabled || undefined}\n                >\n                    <div className={`${CLASSNAME}__chips`}>\n                        {!isEmpty &&\n                            value.map((val, index) => selectedChipRender?.(val, index, onClear, isDisabled, theme))}\n                    </div>\n\n                    {isEmpty && placeholder && (\n                        <div\n                            className={classNames([\n                                `${CLASSNAME}__input-native`,\n                                `${CLASSNAME}__input-native--placeholder`,\n                            ])}\n                        >\n                            <span>{placeholder}</span>\n                        </div>\n                    )}\n\n                    {(isValid || hasError) && (\n                        <div className={`${CLASSNAME}__input-validity`}>\n                            <Icon icon={isValid ? mdiCheckCircle : mdiAlertCircle} size={Size.xxs} />\n                        </div>\n                    )}\n\n                    <div className={`${CLASSNAME}__input-indicator`}>\n                        <Icon icon={mdiMenuDown} size={Size.s} />\n                    </div>\n                </div>\n            </>\n        )}\n\n        {variant === SelectVariant.chip && (\n            <Chip\n                id={id}\n                isSelected={!isEmpty}\n                isDisabled={isDisabled}\n                after={<Icon icon={isEmpty ? mdiMenuDown : mdiCloseCircle} />}\n                onAfterClick={isEmpty ? onInputClick : onClear}\n                onClick={onInputClick}\n                ref={anchorRef as RefObject<HTMLAnchorElement>}\n                theme={theme}\n            >\n                {isEmpty && <span>{label}</span>}\n\n                {!isEmpty && (\n                    <span>\n                        <span>{selectedValueRender?.(value[0])}</span>\n\n                        {value.length > 1 && <span>&nbsp;+{value.length - 1}</span>}\n                    </span>\n                )}\n            </Chip>\n        )}\n    </>\n);\n\n/**\n * SelectMultiple component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const SelectMultiple: Comp<SelectMultipleProps, HTMLDivElement> = forwardRef((props, ref) => {\n    return WithSelectContext(\n        SelectMultipleField,\n        {\n            ...props,\n            className: classNames(\n                props.className,\n                handleBasicClasses({\n                    hasMultiple: !props.isEmpty,\n                    prefix: CLASSNAME,\n                }),\n            ),\n            isEmpty: props.value.length === 0,\n            isMultiple: true,\n        },\n        ref,\n    );\n});\nSelectMultiple.displayName = COMPONENT_NAME;\nSelectMultiple.className = CLASSNAME;\nSelectMultiple.defaultProps = DEFAULT_PROPS;\n"]},"metadata":{},"sourceType":"module"}