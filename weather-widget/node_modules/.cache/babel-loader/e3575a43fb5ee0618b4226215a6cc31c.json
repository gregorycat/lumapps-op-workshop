{"ast":null,"code":"import { Size, Theme, Emphasis, Kind } from './components.js';\nimport { g as getRootClassName, a as _objectWithoutProperties, f as _slicedToArray, d as classnames, h as handleBasicClasses, c as _objectSpread2, b as _extends } from './getRootClassName.js';\nimport React, { forwardRef, useMemo, useState, useRef, useEffect } from 'react';\nimport { c as mdiAlertCircle, b as mdiCheckCircle, n as mdiCloseCircle } from './mdi.js';\nimport { u as uid } from '../index2.js';\nimport get from 'lodash/get';\nimport { m as mergeRefs } from './mergeRefs.js';\nimport { I as IconButton } from './IconButton.js';\nimport { I as Icon } from './Icon2.js';\nimport { I as InputHelper } from './InputHelper.js';\nimport { I as InputLabel } from './InputLabel.js';\n/**\n * Defines the props of the component.\n */\n\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME = 'TextField';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME = getRootClassName(COMPONENT_NAME);\n/**\n * Default minimum number of rows in the multiline mode.\n */\n\nvar DEFAULT_MIN_ROWS = 2;\n/**\n * Component default props.\n */\n\nvar DEFAULT_PROPS = {\n  theme: Theme.light,\n  type: 'text'\n};\n/**\n * Hook that allows to calculate the number of rows needed for a text area.\n * @param minimumRows Minimum number of rows that we want to display.\n * @return rows to be used and a callback to recalculate\n */\n\nvar useComputeNumberOfRows = function useComputeNumberOfRows(minimumRows) {\n  var _useState = useState(minimumRows),\n      _useState2 = _slicedToArray(_useState, 2),\n      rows = _useState2[0],\n      setRows = _useState2[1];\n\n  var recompute = function recompute(target) {\n    /**\n     * HEAD's UP! This part is a little bit tricky. The idea here is to only\n     * display the necessary rows on the textarea. In order to dynamically adjust\n     * the height on that field, we need to:\n     * 1. Set the current amount of rows to the minimum. That will make the scroll appear.\n     * 2. With that, we will have the `scrollHeight`, meaning the height of the container adjusted to the current content\n     * 3. With the scroll height, we can figure out how many rows we need to use by dividing the scroll height\n     * by the line height.\n     * 4. With that number, we can readjust the number of rows on the text area. We need to do that here, if we leave that to\n     * the state change through React, there are some scenarios (resize, hitting ENTER or BACKSPACE which add or remove lines)\n     * when we will not see the update and the rows will be resized to the minimum.\n     * 5. In case there is any other update on the component that changes the UI, we need to keep the number of rows\n     * on the state in order to allow React to re-render. Therefore, we save them using `useState`\n     */\n    // eslint-disable-next-line no-param-reassign\n    target.rows = minimumRows;\n    var currentRows = target.scrollHeight / (target.clientHeight / minimumRows);\n    currentRows = currentRows >= minimumRows ? currentRows : minimumRows; // eslint-disable-next-line no-param-reassign\n\n    target.rows = currentRows;\n    setRows(currentRows);\n  };\n\n  return {\n    recomputeNumberOfRows: recompute,\n    rows: rows\n  };\n};\n\nvar renderInputNative = function renderInputNative(props) {\n  var id = props.id,\n      isDisabled = props.isDisabled,\n      isRequired = props.isRequired,\n      placeholder = props.placeholder,\n      multiline = props.multiline,\n      value = props.value,\n      setFocus = props.setFocus,\n      onChange = props.onChange,\n      onFocus = props.onFocus,\n      onBlur = props.onBlur,\n      inputRef = props.inputRef,\n      rows = props.rows,\n      recomputeNumberOfRows = props.recomputeNumberOfRows,\n      type = props.type,\n      name = props.name,\n      forwardedProps = _objectWithoutProperties(props, [\"id\", \"isDisabled\", \"isRequired\", \"placeholder\", \"multiline\", \"value\", \"setFocus\", \"onChange\", \"onFocus\", \"onBlur\", \"inputRef\", \"rows\", \"recomputeNumberOfRows\", \"type\", \"name\"]); // eslint-disable-next-line react-hooks/rules-of-hooks\n\n\n  var ref = useRef(null); // eslint-disable-next-line react-hooks/rules-of-hooks\n\n  useEffect(function () {\n    // Recompute the number of rows for the first rendering\n    if (multiline && ref && ref.current) {\n      recomputeNumberOfRows(ref.current);\n    }\n  }, [ref, multiline, recomputeNumberOfRows, value]);\n\n  var onTextFieldFocus = function onTextFieldFocus(event) {\n    onFocus === null || onFocus === void 0 ? void 0 : onFocus(event);\n    setFocus(true);\n  };\n\n  var onTextFieldBlur = function onTextFieldBlur(event) {\n    onBlur === null || onBlur === void 0 ? void 0 : onBlur(event);\n    setFocus(false);\n  };\n\n  var handleChange = function handleChange(event) {\n    onChange(get(event, 'target.value'), name, event);\n  };\n\n  var Component = multiline ? 'textarea' : 'input';\n\n  var inputProps = _objectSpread2({}, forwardedProps, {\n    id: id,\n    className: multiline ? \"\".concat(CLASSNAME, \"__input-native \").concat(CLASSNAME, \"__input-native--textarea\") : \"\".concat(CLASSNAME, \"__input-native \").concat(CLASSNAME, \"__input-native--text\"),\n    placeholder: placeholder,\n    value: value,\n    name: name,\n    disabled: isDisabled,\n    required: isRequired,\n    onFocus: onTextFieldFocus,\n    onBlur: onTextFieldBlur,\n    onChange: handleChange,\n    ref: mergeRefs(inputRef, ref)\n  });\n\n  if (multiline) {\n    inputProps.rows = rows;\n  } else {\n    inputProps.type = type;\n  }\n\n  return React.createElement(Component, inputProps);\n};\n/**\n * TextField component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\n\nvar TextField = forwardRef(function (props, ref) {\n  var chips = props.chips,\n      className = props.className,\n      clearButtonProps = props.clearButtonProps,\n      disabled = props.disabled,\n      error = props.error,\n      forceFocusStyle = props.forceFocusStyle,\n      hasError = props.hasError,\n      helper = props.helper,\n      icon = props.icon,\n      id = props.id,\n      inputRef = props.inputRef,\n      _props$isDisabled = props.isDisabled,\n      isDisabled = _props$isDisabled === void 0 ? disabled : _props$isDisabled,\n      isRequired = props.isRequired,\n      isValid = props.isValid,\n      label = props.label,\n      maxLength = props.maxLength,\n      minimumRows = props.minimumRows,\n      multiline = props.multiline,\n      name = props.name,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onFocus = props.onFocus,\n      placeholder = props.placeholder,\n      textFieldRef = props.textFieldRef,\n      theme = props.theme,\n      type = props.type,\n      value = props.value,\n      forwardedProps = _objectWithoutProperties(props, [\"chips\", \"className\", \"clearButtonProps\", \"disabled\", \"error\", \"forceFocusStyle\", \"hasError\", \"helper\", \"icon\", \"id\", \"inputRef\", \"isDisabled\", \"isRequired\", \"isValid\", \"label\", \"maxLength\", \"minimumRows\", \"multiline\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"placeholder\", \"textFieldRef\", \"theme\", \"type\", \"value\"]);\n\n  var textFieldId = useMemo(function () {\n    return id || \"text-field-\".concat(uid());\n  }, [id]);\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isFocus = _useState4[0],\n      setFocus = _useState4[1];\n\n  var _useComputeNumberOfRo = useComputeNumberOfRows(multiline ? minimumRows || DEFAULT_MIN_ROWS : 0),\n      rows = _useComputeNumberOfRo.rows,\n      recomputeNumberOfRows = _useComputeNumberOfRo.recomputeNumberOfRows;\n\n  var valueLength = (value || '').length;\n  var isNotEmpty = valueLength > 0;\n  /**\n   * Function triggered when the Clear Button is clicked.\n   * The idea is to execute the `onChange` callback with an empty string\n   * and remove focus from the clear button.\n   * @param evt On clear event.\n   */\n\n  var onClear = function onClear(evt) {\n    evt.nativeEvent.preventDefault();\n    evt.nativeEvent.stopPropagation();\n    evt.currentTarget.blur();\n    onChange('');\n  };\n\n  return React.createElement(\"div\", {\n    ref: ref,\n    className: classnames(className, handleBasicClasses({\n      hasChips: Boolean(chips),\n      hasError: !isValid && hasError,\n      hasIcon: Boolean(icon),\n      hasInput: !multiline,\n      hasInputClear: clearButtonProps && isNotEmpty,\n      hasLabel: Boolean(label),\n      hasPlaceholder: Boolean(placeholder),\n      hasTextarea: multiline,\n      hasValue: Boolean(value),\n      isDisabled: isDisabled,\n      isFocus: isFocus || forceFocusStyle,\n      isValid: isValid,\n      prefix: CLASSNAME,\n      theme: theme\n    }))\n  }, label && React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__header\")\n  }, React.createElement(InputLabel, {\n    htmlFor: textFieldId,\n    className: \"\".concat(CLASSNAME, \"__label\"),\n    isRequired: isRequired,\n    theme: theme\n  }, label), maxLength && React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__char-counter\")\n  }, React.createElement(\"span\", null, maxLength - valueLength), maxLength - valueLength === 0 && React.createElement(Icon, {\n    icon: mdiAlertCircle,\n    size: Size.xxs\n  }))), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__wrapper\"),\n    ref: textFieldRef\n  }, icon && React.createElement(Icon, {\n    className: \"\".concat(CLASSNAME, \"__input-icon\"),\n    color: theme === Theme.dark ? 'light' : undefined,\n    icon: icon,\n    size: Size.xs\n  }), chips && React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__chips\")\n  }, chips, renderInputNative(_objectSpread2({\n    id: textFieldId,\n    inputRef: inputRef,\n    isDisabled: isDisabled,\n    isRequired: isRequired,\n    maxLength: maxLength,\n    multiline: multiline,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    placeholder: placeholder,\n    recomputeNumberOfRows: recomputeNumberOfRows,\n    rows: rows,\n    setFocus: setFocus,\n    type: type,\n    value: value,\n    name: name\n  }, forwardedProps))), !chips && React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__input-wrapper\")\n  }, renderInputNative(_objectSpread2({\n    id: textFieldId,\n    inputRef: inputRef,\n    isDisabled: isDisabled,\n    isRequired: isRequired,\n    maxLength: maxLength,\n    multiline: multiline,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    placeholder: placeholder,\n    recomputeNumberOfRows: recomputeNumberOfRows,\n    rows: rows,\n    setFocus: setFocus,\n    type: type,\n    value: value,\n    name: name\n  }, forwardedProps))), (isValid || hasError) && React.createElement(Icon, {\n    className: \"\".concat(CLASSNAME, \"__input-validity\"),\n    color: theme === Theme.dark ? 'light' : undefined,\n    icon: isValid ? mdiCheckCircle : mdiAlertCircle,\n    size: Size.xxs\n  }), clearButtonProps && isNotEmpty && React.createElement(IconButton, _extends({}, clearButtonProps, {\n    className: \"\".concat(CLASSNAME, \"__input-clear\"),\n    icon: mdiCloseCircle,\n    emphasis: Emphasis.low,\n    size: Size.s,\n    theme: theme,\n    onClick: onClear,\n    type: \"button\"\n  }))), hasError && error && React.createElement(InputHelper, {\n    className: \"\".concat(CLASSNAME, \"__helper\"),\n    kind: Kind.error,\n    theme: theme\n  }, error), helper && React.createElement(InputHelper, {\n    className: \"\".concat(CLASSNAME, \"__helper\"),\n    theme: theme\n  }, helper));\n});\nTextField.displayName = COMPONENT_NAME;\nTextField.className = CLASSNAME;\nTextField.defaultProps = DEFAULT_PROPS;\nexport { TextField as T };","map":{"version":3,"sources":["../../../src/components/text-field/TextField.tsx"],"names":["COMPONENT_NAME","CLASSNAME","getRootClassName","DEFAULT_MIN_ROWS","DEFAULT_PROPS","theme","Theme","type","useComputeNumberOfRows","rows","setRows","useState","recompute","target","currentRows","recomputeNumberOfRows","renderInputNative","id","isDisabled","isRequired","placeholder","multiline","value","setFocus","onChange","onFocus","onBlur","inputRef","name","forwardedProps","props","ref","useRef","useEffect","onTextFieldFocus","onTextFieldBlur","handleChange","get","Component","inputProps","className","disabled","required","mergeRefs","TextField","forwardRef","chips","clearButtonProps","error","forceFocusStyle","hasError","helper","icon","isValid","label","maxLength","minimumRows","textFieldRef","textFieldId","useMemo","uid","isFocus","valueLength","isNotEmpty","onClear","evt","classNames","handleBasicClasses","hasChips","Boolean","hasIcon","hasInput","hasInputClear","hasLabel","hasPlaceholder","hasTextarea","hasValue","prefix","Size","xxs","xs","Emphasis","Kind"],"mappings":"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","sourcesContent":["import React, { forwardRef, ReactNode, RefObject, SyntheticEvent, useEffect, useMemo, useRef, useState } from 'react';\n\nimport classNames from 'classnames';\nimport get from 'lodash/get';\nimport { uid } from 'uid';\n\nimport { mdiAlertCircle, mdiCheckCircle, mdiCloseCircle } from '@lumx/icons';\nimport { Emphasis, Icon, IconButton, IconButtonProps, InputHelper, InputLabel, Kind, Size, Theme } from '@lumx/react';\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\nimport { mergeRefs } from '@lumx/react/utils/mergeRefs';\n\n/**\n * Defines the props of the component.\n */\nexport interface TextFieldProps extends GenericProps {\n    /** Chip Group to be rendered before the main text input. */\n    chips?: HTMLElement | ReactNode;\n    /** Props to pass to the clear button (minus those already set by the TextField props). If not specified, the button won't be displayed. */\n    clearButtonProps?: Pick<IconButtonProps, 'label'> &\n        Omit<IconButtonProps, 'label' | 'onClick' | 'icon' | 'emphasis'>;\n    /** Error message. */\n    error?: string | ReactNode;\n    /** Whether we force the focus style or not. */\n    forceFocusStyle?: boolean;\n    /** Whether the text field is displayed with error style or not. */\n    hasError?: boolean;\n    /** Helper text. */\n    helper?: string | ReactNode;\n    /** Icon (SVG path). */\n    icon?: string;\n    /** Native input id property (generated if not provided to link the label element). */\n    id?: string;\n    /** Reference to the <input> or <textarea> element. */\n    inputRef?: RefObject<HTMLInputElement> | RefObject<HTMLTextAreaElement>;\n    /** Whether the component is disabled or not. */\n    isDisabled?: boolean;\n    /** Whether the component is required or not. */\n    isRequired?: boolean;\n    /** Whether the text field is displayed with valid style or not. */\n    isValid?: boolean;\n    /** Label text. */\n    label?: string;\n    /** Max string length the input accepts (constrains the input and displays a character counter). */\n    maxLength?: number;\n    /** Minimum number of rows displayed in multiline mode (requires `multiline` to be enabled). */\n    minimumRows?: number;\n    /** Whether the text field is a textarea or an input. */\n    multiline?: boolean;\n    /** Native input name property. */\n    name?: string;\n    /** Placeholder text. */\n    placeholder?: string;\n    /** Reference to the wrapper. */\n    textFieldRef?: RefObject<HTMLDivElement>;\n    /** Theme adapting the component to light or dark background. */\n    theme?: Theme;\n    /** Value. */\n    value?: string;\n    /** On blur callback. */\n    onBlur?(event: React.FocusEvent): void;\n    /** On change callback. */\n    onChange(value: string, name?: string, event?: SyntheticEvent): void;\n    /** On focus callback. */\n    onFocus?(event: React.FocusEvent): void;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'TextField';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * Default minimum number of rows in the multiline mode.\n */\nconst DEFAULT_MIN_ROWS = 2;\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<TextFieldProps> = {\n    theme: Theme.light,\n    type: 'text',\n};\n\n/**\n * Hook that allows to calculate the number of rows needed for a text area.\n * @param minimumRows Minimum number of rows that we want to display.\n * @return rows to be used and a callback to recalculate\n */\nconst useComputeNumberOfRows = (\n    minimumRows: number,\n): {\n    /** number of rows to be used on the text area */\n    rows: number;\n    /**\n     * Callback in order to recalculate the number of rows due to a change on the text area\n     */\n    recomputeNumberOfRows(target: Element): void;\n} => {\n    const [rows, setRows] = useState(minimumRows);\n\n    const recompute = (target: Element) => {\n        /**\n         * HEAD's UP! This part is a little bit tricky. The idea here is to only\n         * display the necessary rows on the textarea. In order to dynamically adjust\n         * the height on that field, we need to:\n         * 1. Set the current amount of rows to the minimum. That will make the scroll appear.\n         * 2. With that, we will have the `scrollHeight`, meaning the height of the container adjusted to the current content\n         * 3. With the scroll height, we can figure out how many rows we need to use by dividing the scroll height\n         * by the line height.\n         * 4. With that number, we can readjust the number of rows on the text area. We need to do that here, if we leave that to\n         * the state change through React, there are some scenarios (resize, hitting ENTER or BACKSPACE which add or remove lines)\n         * when we will not see the update and the rows will be resized to the minimum.\n         * 5. In case there is any other update on the component that changes the UI, we need to keep the number of rows\n         * on the state in order to allow React to re-render. Therefore, we save them using `useState`\n         */\n        // eslint-disable-next-line no-param-reassign\n        (target as HTMLTextAreaElement).rows = minimumRows;\n        let currentRows = target.scrollHeight / (target.clientHeight / minimumRows);\n        currentRows = currentRows >= minimumRows ? currentRows : minimumRows;\n        // eslint-disable-next-line no-param-reassign\n        (target as HTMLTextAreaElement).rows = currentRows;\n\n        setRows(currentRows);\n    };\n\n    return {\n        recomputeNumberOfRows: recompute,\n        rows,\n    };\n};\n\ninterface InputNativeProps {\n    id?: string;\n    inputRef?: RefObject<HTMLInputElement> | RefObject<HTMLTextAreaElement>;\n    isDisabled?: boolean;\n    isRequired?: boolean;\n    multiline?: boolean;\n    maxLength?: number;\n    placeholder?: string;\n    rows: number;\n    type: string;\n    name?: string;\n    value?: string;\n    setFocus(focus: boolean): void;\n    recomputeNumberOfRows(target: Element): void;\n    onChange(value: string, name?: string, event?: SyntheticEvent): void;\n    onFocus?(value: React.FocusEvent): void;\n    onBlur?(value: React.FocusEvent): void;\n}\n\nconst renderInputNative: React.FC<InputNativeProps> = (props) => {\n    const {\n        id,\n        isDisabled,\n        isRequired,\n        placeholder,\n        multiline,\n        value,\n        setFocus,\n        onChange,\n        onFocus,\n        onBlur,\n        inputRef,\n        rows,\n        recomputeNumberOfRows,\n        type,\n        name,\n        ...forwardedProps\n    } = props;\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const ref = useRef<HTMLElement>(null);\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n        // Recompute the number of rows for the first rendering\n        if (multiline && ref && ref.current) {\n            recomputeNumberOfRows(ref.current);\n        }\n    }, [ref, multiline, recomputeNumberOfRows, value]);\n\n    const onTextFieldFocus = (event: React.FocusEvent) => {\n        onFocus?.(event);\n        setFocus(true);\n    };\n\n    const onTextFieldBlur = (event: React.FocusEvent) => {\n        onBlur?.(event);\n        setFocus(false);\n    };\n\n    const handleChange = (event: React.ChangeEvent) => {\n        onChange(get(event, 'target.value'), name, event);\n    };\n\n    const Component = multiline ? 'textarea' : 'input';\n    const inputProps: any = {\n        ...forwardedProps,\n        id,\n        className: multiline\n            ? `${CLASSNAME}__input-native ${CLASSNAME}__input-native--textarea`\n            : `${CLASSNAME}__input-native ${CLASSNAME}__input-native--text`,\n        placeholder,\n        value,\n        name,\n        disabled: isDisabled,\n        required: isRequired,\n        onFocus: onTextFieldFocus,\n        onBlur: onTextFieldBlur,\n        onChange: handleChange,\n        ref: mergeRefs(inputRef as any, ref) as any,\n    };\n    if (multiline) {\n        inputProps.rows = rows;\n    } else {\n        inputProps.type = type;\n    }\n    return <Component {...inputProps} />;\n};\n\n/**\n * TextField component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const TextField: Comp<TextFieldProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const {\n        chips,\n        className,\n        clearButtonProps,\n        disabled,\n        error,\n        forceFocusStyle,\n        hasError,\n        helper,\n        icon,\n        id,\n        inputRef,\n        isDisabled = disabled,\n        isRequired,\n        isValid,\n        label,\n        maxLength,\n        minimumRows,\n        multiline,\n        name,\n        onBlur,\n        onChange,\n        onFocus,\n        placeholder,\n        textFieldRef,\n        theme,\n        type,\n        value,\n        ...forwardedProps\n    } = props;\n    const textFieldId = useMemo(() => id || `text-field-${uid()}`, [id]);\n    const [isFocus, setFocus] = useState(false);\n    const { rows, recomputeNumberOfRows } = useComputeNumberOfRows(multiline ? minimumRows || DEFAULT_MIN_ROWS : 0);\n    const valueLength = (value || '').length;\n    const isNotEmpty = valueLength > 0;\n\n    /**\n     * Function triggered when the Clear Button is clicked.\n     * The idea is to execute the `onChange` callback with an empty string\n     * and remove focus from the clear button.\n     * @param evt On clear event.\n     */\n    const onClear = (evt: React.ChangeEvent) => {\n        evt.nativeEvent.preventDefault();\n        evt.nativeEvent.stopPropagation();\n        (evt.currentTarget as HTMLElement).blur();\n\n        onChange('');\n    };\n\n    return (\n        <div\n            ref={ref}\n            className={classNames(\n                className,\n                handleBasicClasses({\n                    hasChips: Boolean(chips),\n                    hasError: !isValid && hasError,\n                    hasIcon: Boolean(icon),\n                    hasInput: !multiline,\n                    hasInputClear: clearButtonProps && isNotEmpty,\n                    hasLabel: Boolean(label),\n                    hasPlaceholder: Boolean(placeholder),\n                    hasTextarea: multiline,\n                    hasValue: Boolean(value),\n                    isDisabled,\n                    isFocus: isFocus || forceFocusStyle,\n                    isValid,\n                    prefix: CLASSNAME,\n                    theme,\n                }),\n            )}\n        >\n            {label && (\n                <div className={`${CLASSNAME}__header`}>\n                    <InputLabel\n                        htmlFor={textFieldId}\n                        className={`${CLASSNAME}__label`}\n                        isRequired={isRequired}\n                        theme={theme}\n                    >\n                        {label}\n                    </InputLabel>\n\n                    {maxLength && (\n                        <div className={`${CLASSNAME}__char-counter`}>\n                            <span>{maxLength - valueLength}</span>\n                            {maxLength - valueLength === 0 && <Icon icon={mdiAlertCircle} size={Size.xxs} />}\n                        </div>\n                    )}\n                </div>\n            )}\n\n            <div className={`${CLASSNAME}__wrapper`} ref={textFieldRef}>\n                {icon && (\n                    <Icon\n                        className={`${CLASSNAME}__input-icon`}\n                        color={theme === Theme.dark ? 'light' : undefined}\n                        icon={icon}\n                        size={Size.xs}\n                    />\n                )}\n\n                {chips && (\n                    <div className={`${CLASSNAME}__chips`}>\n                        {chips}\n\n                        {renderInputNative({\n                            id: textFieldId,\n                            inputRef,\n                            isDisabled,\n                            isRequired,\n                            maxLength,\n                            multiline,\n                            onBlur,\n                            onChange,\n                            onFocus,\n                            placeholder,\n                            recomputeNumberOfRows,\n                            rows,\n                            setFocus,\n                            type,\n                            value,\n                            name,\n                            ...forwardedProps,\n                        })}\n                    </div>\n                )}\n\n                {!chips && (\n                    <div className={`${CLASSNAME}__input-wrapper`}>\n                        {renderInputNative({\n                            id: textFieldId,\n                            inputRef,\n                            isDisabled,\n                            isRequired,\n                            maxLength,\n                            multiline,\n                            onBlur,\n                            onChange,\n                            onFocus,\n                            placeholder,\n                            recomputeNumberOfRows,\n                            rows,\n                            setFocus,\n                            type,\n                            value,\n                            name,\n                            ...forwardedProps,\n                        })}\n                    </div>\n                )}\n\n                {(isValid || hasError) && (\n                    <Icon\n                        className={`${CLASSNAME}__input-validity`}\n                        color={theme === Theme.dark ? 'light' : undefined}\n                        icon={isValid ? mdiCheckCircle : mdiAlertCircle}\n                        size={Size.xxs}\n                    />\n                )}\n\n                {clearButtonProps && isNotEmpty && (\n                    <IconButton\n                        {...clearButtonProps}\n                        className={`${CLASSNAME}__input-clear`}\n                        icon={mdiCloseCircle}\n                        emphasis={Emphasis.low}\n                        size={Size.s}\n                        theme={theme}\n                        onClick={onClear}\n                        type=\"button\"\n                    />\n                )}\n            </div>\n\n            {hasError && error && (\n                <InputHelper className={`${CLASSNAME}__helper`} kind={Kind.error} theme={theme}>\n                    {error}\n                </InputHelper>\n            )}\n\n            {helper && (\n                <InputHelper className={`${CLASSNAME}__helper`} theme={theme}>\n                    {helper}\n                </InputHelper>\n            )}\n        </div>\n    );\n});\nTextField.displayName = COMPONENT_NAME;\nTextField.className = CLASSNAME;\nTextField.defaultProps = DEFAULT_PROPS;\n"]},"metadata":{},"sourceType":"module"}