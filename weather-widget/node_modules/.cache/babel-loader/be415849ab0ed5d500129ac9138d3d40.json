{"ast":null,"code":"import { Theme, Emphasis } from './components.js';\nimport { g as getRootClassName, a as _objectWithoutProperties, f as _slicedToArray, b as _extends, d as classnames, h as handleBasicClasses, _ as _defineProperty, k as detectHorizontalSwipe } from './getRootClassName.js';\nimport React, { useRef, useEffect, forwardRef, useState, useCallback, useMemo } from 'react';\nimport { g as mdiChevronLeft, f as mdiChevronRight } from './mdi.js';\nimport { W as WINDOW } from './constants.js';\nimport { m as mergeRefs } from './mergeRefs.js';\nimport { I as IconButton } from './IconButton.js';\nimport isFunction from 'lodash/isFunction';\nimport range from 'lodash/range';\n/**\n * Autoplay default interval in ms.\n */\n\nvar AUTOPLAY_DEFAULT_INTERVAL = 5000;\n/**\n * Full width size in percent.\n */\n\nvar FULL_WIDTH_PERCENT = 100;\n/**\n * Edge from the active index.\n */\n\nvar EDGE_FROM_ACTIVE_INDEX = 2;\n/**\n * Max number of pagination items.\n */\n\nvar PAGINATION_ITEMS_MAX = 5;\n/**\n * Size of a pagination item. Used to translate wrapper.\n */\n\nvar PAGINATION_ITEM_SIZE = 12;\n/**\n * Making setInterval Declarative with React Hooks.\n * Credits: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n *\n * @param callback Function called by setInterval.\n * @param     delay    Delay for setInterval.\n */\n\nfunction useInterval(callback, delay) {\n  var savedCallback = useRef();\n  useEffect(function () {\n    savedCallback.current = callback;\n  });\n  useEffect(function () {\n    if (delay === null) return undefined;\n\n    function tick() {\n      if (isFunction(savedCallback.current)) {\n        savedCallback.current();\n      }\n    }\n\n    var id = setInterval(tick, delay);\n    return function () {\n      return clearInterval(id);\n    };\n  }, [delay]);\n}\n/**\n * Defines the props of the component.\n */\n\n/**\n * Component display name.\n */\n\n\nvar COMPONENT_NAME = 'Slideshow';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME = getRootClassName(COMPONENT_NAME);\n/**\n * Component default props.\n */\n\nvar DEFAULT_PROPS = {\n  activeIndex: 0,\n  groupBy: 1,\n  interval: AUTOPLAY_DEFAULT_INTERVAL,\n  theme: Theme.light\n};\n/**\n * Slideshow component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar Slideshow = forwardRef(function (props, ref) {\n  var _classNames;\n\n  var activeIndex = props.activeIndex,\n      autoPlay = props.autoPlay,\n      children = props.children,\n      className = props.className,\n      fillHeight = props.fillHeight,\n      groupBy = props.groupBy,\n      interval = props.interval,\n      onChange = props.onChange,\n      slideshowControlsProps = props.slideshowControlsProps,\n      theme = props.theme,\n      forwardedProps = _objectWithoutProperties(props, [\"activeIndex\", \"autoPlay\", \"children\", \"className\", \"fillHeight\", \"groupBy\", \"interval\", \"onChange\", \"slideshowControlsProps\", \"theme\"]);\n\n  var _useState = useState(activeIndex),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentIndex = _useState2[0],\n      setCurrentIndex = _useState2[1]; // Use state instead of a ref to make the slideshow controls update directly when the element is set.\n\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      element = _useState4[0],\n      setElement = _useState4[1]; // Number of slideshow items.\n\n\n  var itemsCount = React.Children.count(children); // Number of slides when using groupBy prop.\n\n  var slidesCount = Math.ceil(itemsCount / Math.min(groupBy, itemsCount)); // Inline style of wrapper element.\n\n  var wrapperStyle = {\n    transform: \"translateX(-\".concat(FULL_WIDTH_PERCENT * currentIndex, \"%)\")\n  }; // Change current index to display next slide.\n\n  var goToNextSlide = useCallback(function () {\n    var loopback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    setCurrentIndex(function (index) {\n      if (loopback && index === slidesCount - 1) {\n        // Loopback to the start.\n        return 0;\n      }\n\n      if (index < slidesCount - 1) {\n        // Next slide.\n        return index + 1;\n      }\n\n      return index;\n    });\n  }, [slidesCount, setCurrentIndex]); // Change current index to display previous slide.\n\n  var goToPreviousSlide = useCallback(function () {\n    var loopback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    setCurrentIndex(function (index) {\n      if (loopback && index === 0) {\n        // Loopback to the end.\n        return slidesCount - 1;\n      }\n\n      if (index > 0) {\n        // Previous slide.\n        return index - 1;\n      }\n\n      return index;\n    });\n  }, [slidesCount, setCurrentIndex]); // Auto play\n\n  var _useState5 = useState(Boolean(autoPlay)),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isAutoPlaying = _useState6[0],\n      setIsAutoPlaying = _useState6[1]; // Start\n\n\n  useInterval(goToNextSlide, isAutoPlaying && slidesCount > 1 ? interval : null); // Reset current index if it become invalid.\n\n  useEffect(function () {\n    if (currentIndex > slidesCount - 1) {\n      setCurrentIndex(DEFAULT_PROPS.activeIndex);\n    }\n  }, [currentIndex, slidesCount]); // Handle click on a bullet to go to a specific slide.\n\n  var handleControlGotToSlide = useCallback(function (index) {\n    setIsAutoPlaying(false);\n\n    if (index >= 0 && index < slidesCount) {\n      setCurrentIndex(index);\n    }\n  }, [slidesCount, setCurrentIndex]); // Handle click or keyboard event to go to next slide.\n\n  var handleControlNextSlide = useCallback(function () {\n    var loopback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    setIsAutoPlaying(false);\n    goToNextSlide(loopback);\n  }, [goToNextSlide]); // Handle click or keyboard event to go to previous slide.\n\n  var handleControlPreviousSlide = useCallback(function () {\n    var loopback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    setIsAutoPlaying(false);\n    goToPreviousSlide(loopback);\n  }, [goToPreviousSlide]); // If the activeIndex props changes, update the current slide\n\n  useEffect(function () {\n    setCurrentIndex(activeIndex);\n  }, [activeIndex]); // If the slide changes, with autoplay for example, trigger \"onChange\"\n\n  useEffect(function () {\n    if (!onChange) return;\n    onChange(currentIndex);\n  }, [currentIndex, onChange]);\n  /* eslint-disable jsx-a11y/no-noninteractive-tabindex */\n\n  return React.createElement(\"div\", _extends({\n    ref: mergeRefs(ref, setElement)\n  }, forwardedProps, {\n    className: classnames(className, handleBasicClasses({\n      prefix: CLASSNAME,\n      theme: theme\n    }), (_classNames = {}, _defineProperty(_classNames, \"\".concat(CLASSNAME, \"--fill-height\"), fillHeight), _defineProperty(_classNames, \"\".concat(CLASSNAME, \"--group-by-\").concat(groupBy), Boolean(groupBy)), _classNames)),\n    tabIndex: 0\n  }), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__slides\")\n  }, React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__wrapper\"),\n    style: wrapperStyle\n  }, children)), slideshowControlsProps && slidesCount > 1 && React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME, \"__controls\")\n  }, React.createElement(SlideshowControls, _extends({}, slideshowControlsProps, {\n    activeIndex: currentIndex,\n    onPaginationClick: handleControlGotToSlide,\n    onNextClick: handleControlNextSlide,\n    onPreviousClick: handleControlPreviousSlide,\n    slidesCount: slidesCount,\n    parentRef: element,\n    theme: theme\n  }))));\n});\nSlideshow.displayName = COMPONENT_NAME;\nSlideshow.className = CLASSNAME;\nSlideshow.defaultProps = DEFAULT_PROPS;\n/**\n * Defines the props of the component.\n */\n\n/**\n * Component display name.\n */\n\nvar COMPONENT_NAME$1 = 'SlideshowItem';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME$1 = getRootClassName(COMPONENT_NAME$1);\n/**\n * SlideshowItem component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar SlideshowItem = forwardRef(function (props, ref) {\n  var className = props.className,\n      children = props.children,\n      forwardedProps = _objectWithoutProperties(props, [\"className\", \"children\"]);\n\n  return React.createElement(\"div\", _extends({\n    ref: ref\n  }, forwardedProps, {\n    className: classnames(className, handleBasicClasses({\n      prefix: CLASSNAME$1\n    }))\n  }), children);\n});\nSlideshowItem.displayName = COMPONENT_NAME$1;\nSlideshowItem.className = CLASSNAME$1;\n\nvar isTouchDevice = function isTouchDevice() {\n  return 'ontouchstart' in window;\n};\n/**\n * Listen swipe to navigate left and right.\n */\n\n\nfunction useSwipeNavigate(element, onNext, onPrevious) {\n  useEffect(function () {\n    if (!element || !isTouchDevice()) return undefined;\n    return detectHorizontalSwipe(element, function (swipe) {\n      var callback = swipe === 'right' ? onPrevious : onNext;\n      callback === null || callback === void 0 ? void 0 : callback();\n    });\n  }, [onPrevious, onNext, element]);\n}\n/**\n * Listen keyboard to navigate left and right.\n */\n\n\nfunction useKeyNavigate(element, onNext, onPrevious) {\n  useEffect(function () {\n    if (!element) return undefined;\n\n    var onKeyNavigate = function onKeyNavigate(evt) {\n      var callback;\n\n      if ((evt === null || evt === void 0 ? void 0 : evt.key) === 'ArrowRight') {\n        callback = onPrevious;\n      } else if ((evt === null || evt === void 0 ? void 0 : evt.key) === 'ArrowLeft') {\n        callback = onNext;\n      }\n\n      if (!callback) return;\n      callback();\n      evt.preventDefault();\n      evt.stopPropagation();\n    };\n\n    element.addEventListener('keydown', onKeyNavigate);\n    return function () {\n      element.removeEventListener('keydown', onKeyNavigate);\n    };\n  }, [onPrevious, onNext, element]);\n}\n/**\n * Calculate the currently visible pagination \"bullet\" range.\n */\n\n\nfunction usePaginationVisibleRange(activeIndex, slideCount) {\n  var previousVisibleRangeRef = useRef();\n  return useMemo(function () {\n    var lastSlide = slideCount - 1;\n    var previousVisibleRange = previousVisibleRangeRef.current;\n    var newVisibleRange;\n\n    if (activeIndex === (previousVisibleRange === null || previousVisibleRange === void 0 ? void 0 : previousVisibleRange.max) && activeIndex < lastSlide) {\n      newVisibleRange = {\n        min: previousVisibleRange.min + 1,\n        max: previousVisibleRange.max + 1\n      };\n    } else if (activeIndex === (previousVisibleRange === null || previousVisibleRange === void 0 ? void 0 : previousVisibleRange.min) && activeIndex > 0) {\n      newVisibleRange = {\n        min: previousVisibleRange.min - 1,\n        max: previousVisibleRange.max - 1\n      };\n    } else {\n      var deltaItems = PAGINATION_ITEMS_MAX - 1;\n      var min = activeIndex - EDGE_FROM_ACTIVE_INDEX;\n      var max = activeIndex + EDGE_FROM_ACTIVE_INDEX;\n\n      if (activeIndex > lastSlide - EDGE_FROM_ACTIVE_INDEX) {\n        min = lastSlide - deltaItems;\n        max = lastSlide;\n      } else if (activeIndex < deltaItems) {\n        min = 0;\n        max = deltaItems;\n      }\n\n      newVisibleRange = {\n        min: min,\n        max: max\n      };\n    }\n\n    previousVisibleRangeRef.current = newVisibleRange;\n    return newVisibleRange;\n  }, [activeIndex, slideCount]);\n}\n/**\n * Defines the props of the component.\n */\n\n/**\n * Component display name.\n */\n\n\nvar COMPONENT_NAME$2 = 'SlideshowControls';\n/**\n * Component default class name and class prefix.\n */\n\nvar CLASSNAME$2 = getRootClassName(COMPONENT_NAME$2);\n/**\n * Component default props.\n */\n\nvar DEFAULT_PROPS$1 = {\n  activeIndex: 0,\n  theme: Theme.light\n};\n/**\n * SlideshowControls component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\n\nvar SlideshowControls = forwardRef(function (props, ref) {\n  var activeIndex = props.activeIndex,\n      className = props.className,\n      nextButtonProps = props.nextButtonProps,\n      onNextClick = props.onNextClick,\n      onPaginationClick = props.onPaginationClick,\n      onPreviousClick = props.onPreviousClick,\n      parentRef = props.parentRef,\n      previousButtonProps = props.previousButtonProps,\n      slidesCount = props.slidesCount,\n      theme = props.theme,\n      forwardedProps = _objectWithoutProperties(props, [\"activeIndex\", \"className\", \"nextButtonProps\", \"onNextClick\", \"onPaginationClick\", \"onPreviousClick\", \"parentRef\", \"previousButtonProps\", \"slidesCount\", \"theme\"]);\n\n  var parent;\n\n  if (WINDOW) {\n    // Checking window object to avoid errors in SSR.\n    parent = parentRef instanceof HTMLElement ? parentRef : parentRef === null || parentRef === void 0 ? void 0 : parentRef.current;\n  } // Listen to keyboard navigate left & right.\n\n\n  useKeyNavigate(parent, onNextClick, onPreviousClick); // Listen to touch swipe navigate left & right.\n\n  useSwipeNavigate(parent, // Go next without loopback.\n  useCallback(function () {\n    return onNextClick === null || onNextClick === void 0 ? void 0 : onNextClick(false);\n  }, [onNextClick]), // Go previous without loopback.\n  useCallback(function () {\n    return onPreviousClick === null || onPreviousClick === void 0 ? void 0 : onPreviousClick(false);\n  }, [onPreviousClick])); // Pagination \"bullet\" range.\n\n  var visibleRange = usePaginationVisibleRange(activeIndex, slidesCount); // Inline style of wrapper element.\n\n  var wrapperStyle = {\n    transform: \"translateX(-\".concat(PAGINATION_ITEM_SIZE * visibleRange.min, \"px)\")\n  };\n  return React.createElement(\"div\", _extends({\n    ref: ref\n  }, forwardedProps, {\n    className: classnames(className, handleBasicClasses({\n      prefix: CLASSNAME$2,\n      theme: theme\n    }), _defineProperty({}, \"\".concat(CLASSNAME$2, \"--has-infinite-pagination\"), slidesCount > PAGINATION_ITEMS_MAX))\n  }), React.createElement(IconButton, _extends({}, previousButtonProps, {\n    icon: mdiChevronLeft,\n    className: \"\".concat(CLASSNAME$2, \"__navigation\"),\n    color: theme === Theme.dark ? 'light' : 'dark',\n    emphasis: Emphasis.low,\n    onClick: onPreviousClick,\n    tabIndex: -1\n  })), React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME$2, \"__pagination\")\n  }, React.createElement(\"div\", {\n    className: \"\".concat(CLASSNAME$2, \"__pagination-items\"),\n    style: wrapperStyle\n  }, useMemo(function () {\n    return range(slidesCount).map(function (index) {\n      var isOnEdge = index !== 0 && index !== slidesCount - 1 && (index === visibleRange.min || index === visibleRange.max);\n      var isActive = activeIndex === index;\n      var isOutRange = index < visibleRange.min || index > visibleRange.max;\n      return (// eslint-disable-next-line jsx-a11y/control-has-associated-label\n        React.createElement(\"button\", {\n          className: classnames(handleBasicClasses({\n            prefix: \"\".concat(CLASSNAME$2, \"__pagination-item\"),\n            isActive: isActive,\n            isOnEdge: isOnEdge,\n            isOutRange: isOutRange\n          })),\n          key: index,\n          type: \"button\",\n          onClick: function onClick() {\n            return onPaginationClick === null || onPaginationClick === void 0 ? void 0 : onPaginationClick(index);\n          },\n          tabIndex: -1\n        })\n      );\n    });\n  }, [slidesCount, visibleRange.min, visibleRange.max, activeIndex, onPaginationClick]))), React.createElement(IconButton, _extends({}, nextButtonProps, {\n    icon: mdiChevronRight,\n    className: \"\".concat(CLASSNAME$2, \"__navigation\"),\n    color: theme === Theme.dark ? 'light' : 'dark',\n    emphasis: Emphasis.low,\n    onClick: onNextClick,\n    tabIndex: -1\n  })));\n});\nSlideshowControls.displayName = COMPONENT_NAME$2;\nSlideshowControls.className = CLASSNAME$2;\nSlideshowControls.defaultProps = DEFAULT_PROPS$1;\nexport { Slideshow as S, SlideshowItem as a, SlideshowControls as b };","map":{"version":3,"sources":["../../../src/components/slideshow/constants.ts","../../../src/hooks/useInterval.tsx","../../../src/components/slideshow/Slideshow.tsx","../../../src/components/slideshow/SlideshowItem.tsx","../../../src/components/slideshow/useSwipeNavigate.ts","../../../src/components/slideshow/useKeyNavigate.ts","../../../src/components/slideshow/usePaginationVisibleRange.ts","../../../src/components/slideshow/SlideshowControls.tsx"],"names":["AUTOPLAY_DEFAULT_INTERVAL","FULL_WIDTH_PERCENT","EDGE_FROM_ACTIVE_INDEX","PAGINATION_ITEMS_MAX","PAGINATION_ITEM_SIZE","savedCallback","useRef","useEffect","delay","isFunction","id","setInterval","clearInterval","COMPONENT_NAME","CLASSNAME","getRootClassName","DEFAULT_PROPS","activeIndex","groupBy","interval","theme","Theme","light","Slideshow","forwardRef","autoPlay","children","className","fillHeight","onChange","slideshowControlsProps","forwardedProps","props","currentIndex","setCurrentIndex","useState","element","setElement","itemsCount","React","slidesCount","Math","wrapperStyle","transform","goToNextSlide","useCallback","loopback","index","goToPreviousSlide","isAutoPlaying","setIsAutoPlaying","Boolean","useInterval","handleControlGotToSlide","handleControlNextSlide","handleControlPreviousSlide","mergeRefs","classNames","handleBasicClasses","prefix","SlideshowItem","ref","isTouchDevice","detectHorizontalSwipe","callback","swipe","onKeyNavigate","evt","previousVisibleRangeRef","useMemo","lastSlide","slideCount","previousVisibleRange","newVisibleRange","min","max","deltaItems","SlideshowControls","nextButtonProps","onNextClick","onPaginationClick","onPreviousClick","parentRef","previousButtonProps","parent","useKeyNavigate","useSwipeNavigate","visibleRange","usePaginationVisibleRange","Emphasis","isOnEdge","isActive","isOutRange"],"mappings":"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","sourcesContent":["/**\n * Autoplay default interval in ms.\n */\nexport const AUTOPLAY_DEFAULT_INTERVAL = 5000;\n\n/**\n * Full width size in percent.\n */\nexport const FULL_WIDTH_PERCENT = 100;\n\n/**\n * Edge from the active index.\n */\nexport const EDGE_FROM_ACTIVE_INDEX = 2;\n\n/**\n * Max number of pagination items.\n */\nexport const PAGINATION_ITEMS_MAX = 5;\n\n/**\n * Size of a pagination item. Used to translate wrapper.\n */\nexport const PAGINATION_ITEM_SIZE = 12;\n","import { useEffect, useRef } from 'react';\n\nimport isFunction from 'lodash/isFunction';\nimport { Callback } from '../utils';\n\n/**\n * Making setInterval Declarative with React Hooks.\n * Credits: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n *\n * @param callback Function called by setInterval.\n * @param     delay    Delay for setInterval.\n */\nexport function useInterval(callback: Callback, delay: number | null): void {\n    const savedCallback = useRef<Callback>();\n\n    useEffect(() => {\n        savedCallback.current = callback;\n    });\n\n    useEffect(() => {\n        if (delay === null) return undefined;\n\n        function tick() {\n            if (isFunction(savedCallback.current)) {\n                savedCallback.current();\n            }\n        }\n        const id = setInterval(tick, delay);\n        return () => clearInterval(id);\n    }, [delay]);\n}\n","import React, { CSSProperties, forwardRef, useCallback, useEffect, useState } from 'react';\n\nimport classNames from 'classnames';\n\nimport { SlideshowControls, SlideshowControlsProps, Theme } from '@lumx/react';\n\nimport { AUTOPLAY_DEFAULT_INTERVAL, FULL_WIDTH_PERCENT } from '@lumx/react/components/slideshow/constants';\nimport { useInterval } from '@lumx/react/hooks/useInterval';\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\nimport { mergeRefs } from '@lumx/react/utils/mergeRefs';\n\n/**\n * Defines the props of the component.\n */\nexport interface SlideshowProps extends GenericProps {\n    /** Index of the current slide. */\n    activeIndex?: number;\n    /** Whether the automatic rotation of the slideshow is enabled or not. */\n    autoPlay?: boolean;\n    /** Whether the image has to fill its container height or not. */\n    fillHeight?: boolean;\n    /** Number of slides to group together. */\n    groupBy?: number;\n    /** Interval between each slide when automatic rotation is enabled. */\n    interval?: number;\n    /** Props to pass to the slideshow controls (minus those already set by the Slideshow props). */\n    slideshowControlsProps?: Pick<SlideshowControlsProps, 'nextButtonProps' | 'previousButtonProps'> &\n        Omit<\n            SlideshowControlsProps,\n            | 'activeIndex'\n            | 'onPaginationClick'\n            | 'onNextClick'\n            | 'onPreviousClick'\n            | 'slidesCount'\n            | 'parentRef'\n            | 'theme'\n        >;\n    /** Theme adapting the component to light or dark background. */\n    theme?: Theme;\n    /** Callback when slide changes */\n    onChange?(index: number): void;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'Slideshow';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<SlideshowProps> = {\n    activeIndex: 0,\n    groupBy: 1,\n    interval: AUTOPLAY_DEFAULT_INTERVAL,\n    theme: Theme.light,\n};\n\n/**\n * Slideshow component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const Slideshow: Comp<SlideshowProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const {\n        activeIndex,\n        autoPlay,\n        children,\n        className,\n        fillHeight,\n        groupBy,\n        interval,\n        onChange,\n        slideshowControlsProps,\n        theme,\n        ...forwardedProps\n    } = props;\n    const [currentIndex, setCurrentIndex] = useState(activeIndex as number);\n    // Use state instead of a ref to make the slideshow controls update directly when the element is set.\n    const [element, setElement] = useState<HTMLDivElement>();\n\n    // Number of slideshow items.\n    const itemsCount = React.Children.count(children);\n    // Number of slides when using groupBy prop.\n    const slidesCount = Math.ceil(itemsCount / Math.min(groupBy as number, itemsCount));\n    // Inline style of wrapper element.\n    const wrapperStyle: CSSProperties = { transform: `translateX(-${FULL_WIDTH_PERCENT * currentIndex}%)` };\n\n    // Change current index to display next slide.\n    const goToNextSlide = useCallback(\n        (loopback = true) => {\n            setCurrentIndex((index) => {\n                if (loopback && index === slidesCount - 1) {\n                    // Loopback to the start.\n                    return 0;\n                }\n                if (index < slidesCount - 1) {\n                    // Next slide.\n                    return index + 1;\n                }\n                return index;\n            });\n        },\n        [slidesCount, setCurrentIndex],\n    );\n\n    // Change current index to display previous slide.\n    const goToPreviousSlide = useCallback(\n        (loopback = true) => {\n            setCurrentIndex((index) => {\n                if (loopback && index === 0) {\n                    // Loopback to the end.\n                    return slidesCount - 1;\n                }\n                if (index > 0) {\n                    // Previous slide.\n                    return index - 1;\n                }\n                return index;\n            });\n        },\n        [slidesCount, setCurrentIndex],\n    );\n\n    // Auto play\n    const [isAutoPlaying, setIsAutoPlaying] = useState(Boolean(autoPlay));\n    // Start\n    useInterval(goToNextSlide, isAutoPlaying && slidesCount > 1 ? (interval as number) : null);\n\n    // Reset current index if it become invalid.\n    useEffect(() => {\n        if (currentIndex > slidesCount - 1) {\n            setCurrentIndex(DEFAULT_PROPS.activeIndex as number);\n        }\n    }, [currentIndex, slidesCount]);\n\n    // Handle click on a bullet to go to a specific slide.\n    const handleControlGotToSlide = useCallback(\n        (index: number) => {\n            setIsAutoPlaying(false);\n\n            if (index >= 0 && index < slidesCount) {\n                setCurrentIndex(index);\n            }\n        },\n        [slidesCount, setCurrentIndex],\n    );\n\n    // Handle click or keyboard event to go to next slide.\n    const handleControlNextSlide = useCallback(\n        (loopback = true) => {\n            setIsAutoPlaying(false);\n            goToNextSlide(loopback);\n        },\n        [goToNextSlide],\n    );\n\n    // Handle click or keyboard event to go to previous slide.\n    const handleControlPreviousSlide = useCallback(\n        (loopback = true) => {\n            setIsAutoPlaying(false);\n            goToPreviousSlide(loopback);\n        },\n        [goToPreviousSlide],\n    );\n\n    // If the activeIndex props changes, update the current slide\n    useEffect(() => {\n        setCurrentIndex(activeIndex as number);\n    }, [activeIndex]);\n\n    // If the slide changes, with autoplay for example, trigger \"onChange\"\n    useEffect(() => {\n        if (!onChange) return;\n        onChange(currentIndex);\n    }, [currentIndex, onChange]);\n\n    /* eslint-disable jsx-a11y/no-noninteractive-tabindex */\n    return (\n        <div\n            ref={mergeRefs(ref, setElement)}\n            {...forwardedProps}\n            className={classNames(className, handleBasicClasses({ prefix: CLASSNAME, theme }), {\n                [`${CLASSNAME}--fill-height`]: fillHeight,\n                [`${CLASSNAME}--group-by-${groupBy}`]: Boolean(groupBy),\n            })}\n            tabIndex={0}\n        >\n            <div className={`${CLASSNAME}__slides`}>\n                <div className={`${CLASSNAME}__wrapper`} style={wrapperStyle}>\n                    {children}\n                </div>\n            </div>\n\n            {slideshowControlsProps && slidesCount > 1 && (\n                <div className={`${CLASSNAME}__controls`}>\n                    <SlideshowControls\n                        {...slideshowControlsProps}\n                        activeIndex={currentIndex}\n                        onPaginationClick={handleControlGotToSlide}\n                        onNextClick={handleControlNextSlide}\n                        onPreviousClick={handleControlPreviousSlide}\n                        slidesCount={slidesCount}\n                        parentRef={element}\n                        theme={theme}\n                    />\n                </div>\n            )}\n        </div>\n    );\n});\nSlideshow.displayName = COMPONENT_NAME;\nSlideshow.className = CLASSNAME;\nSlideshow.defaultProps = DEFAULT_PROPS;\n","import React, { forwardRef } from 'react';\n\nimport classNames from 'classnames';\n\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\n\n/**\n * Defines the props of the component.\n */\nexport type SlideshowItemProps = GenericProps;\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'SlideshowItem';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * SlideshowItem component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const SlideshowItem: Comp<SlideshowItemProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const { className, children, ...forwardedProps } = props;\n\n    return (\n        <div\n            ref={ref}\n            {...forwardedProps}\n            className={classNames(\n                className,\n                handleBasicClasses({\n                    prefix: CLASSNAME,\n                }),\n            )}\n        >\n            {children}\n        </div>\n    );\n});\nSlideshowItem.displayName = COMPONENT_NAME;\nSlideshowItem.className = CLASSNAME;\n","import { useEffect } from 'react';\nimport { detectHorizontalSwipe } from '@lumx/core/js/utils';\n\nconst isTouchDevice = () => 'ontouchstart' in window;\n\n/**\n * Listen swipe to navigate left and right.\n */\nexport function useSwipeNavigate(element?: HTMLElement | null, onNext?: () => void, onPrevious?: () => void): void {\n    useEffect(() => {\n        if (!element || !isTouchDevice()) return undefined;\n\n        return detectHorizontalSwipe(element, (swipe) => {\n            const callback = swipe === 'right' ? onPrevious : onNext;\n            callback?.();\n        });\n    }, [onPrevious, onNext, element]);\n}\n","import { useEffect } from 'react';\n\n/**\n * Listen keyboard to navigate left and right.\n */\nexport function useKeyNavigate(element?: HTMLElement | null, onNext?: () => void, onPrevious?: () => void): void {\n    useEffect(() => {\n        if (!element) return undefined;\n        const onKeyNavigate = (evt: KeyboardEvent) => {\n            let callback;\n            if (evt?.key === 'ArrowRight') {\n                callback = onPrevious;\n            } else if (evt?.key === 'ArrowLeft') {\n                callback = onNext;\n            }\n            if (!callback) return;\n\n            callback();\n            evt.preventDefault();\n            evt.stopPropagation();\n        };\n\n        element.addEventListener('keydown', onKeyNavigate);\n        return () => {\n            element.removeEventListener('keydown', onKeyNavigate);\n        };\n    }, [onPrevious, onNext, element]);\n}\n","import { useMemo, useRef } from 'react';\nimport { EDGE_FROM_ACTIVE_INDEX, PAGINATION_ITEMS_MAX } from '@lumx/react/components/slideshow/constants';\n\ntype Range = { min: number; max: number };\n\n/**\n * Calculate the currently visible pagination \"bullet\" range.\n */\nexport function usePaginationVisibleRange(activeIndex: number, slideCount: number): Range {\n    const previousVisibleRangeRef = useRef<Range>();\n    return useMemo(() => {\n        const lastSlide = slideCount - 1;\n        const { current: previousVisibleRange } = previousVisibleRangeRef;\n        let newVisibleRange: Range;\n        if (activeIndex === previousVisibleRange?.max && activeIndex < lastSlide) {\n            newVisibleRange = { min: previousVisibleRange.min + 1, max: previousVisibleRange.max + 1 };\n        } else if (activeIndex === previousVisibleRange?.min && activeIndex > 0) {\n            newVisibleRange = { min: previousVisibleRange.min - 1, max: previousVisibleRange.max - 1 };\n        } else {\n            const deltaItems = PAGINATION_ITEMS_MAX - 1;\n            let min = activeIndex - EDGE_FROM_ACTIVE_INDEX;\n            let max = activeIndex + EDGE_FROM_ACTIVE_INDEX;\n\n            if (activeIndex > lastSlide - EDGE_FROM_ACTIVE_INDEX) {\n                min = lastSlide - deltaItems;\n                max = lastSlide;\n            } else if (activeIndex < deltaItems) {\n                min = 0;\n                max = deltaItems;\n            }\n\n            newVisibleRange = { min, max };\n        }\n        previousVisibleRangeRef.current = newVisibleRange;\n        return newVisibleRange;\n    }, [activeIndex, slideCount]);\n}\n","import React, { forwardRef, RefObject, useCallback, useMemo } from 'react';\n\nimport classNames from 'classnames';\nimport range from 'lodash/range';\n\nimport { mdiChevronLeft, mdiChevronRight } from '@lumx/icons';\nimport { Emphasis, IconButton, IconButtonProps, Theme } from '@lumx/react';\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\nimport { WINDOW } from '@lumx/react/constants';\n\nimport { useSwipeNavigate } from './useSwipeNavigate';\nimport { useKeyNavigate } from './useKeyNavigate';\nimport { PAGINATION_ITEM_SIZE, PAGINATION_ITEMS_MAX } from './constants';\nimport { usePaginationVisibleRange } from './usePaginationVisibleRange';\n\n/**\n * Defines the props of the component.\n */\nexport interface SlideshowControlsProps extends GenericProps {\n    /** Index of the current slide. */\n    activeIndex?: number;\n    /** Props to pass to the next button (minus those already set by the SlideshowControls props). */\n    nextButtonProps: Pick<IconButtonProps, 'label'> &\n        Omit<IconButtonProps, 'label' | 'onClick' | 'icon' | 'emphasis' | 'color'>;\n    /** Reference to the parent element on which we want to listen touch swipe. */\n    parentRef?: RefObject<HTMLDivElement> | HTMLDivElement;\n    /** Props to pass to the previous button (minus those already set by the SlideshowControls props). */\n    previousButtonProps: Pick<IconButtonProps, 'label'> &\n        Omit<IconButtonProps, 'label' | 'onClick' | 'icon' | 'emphasis' | 'color'>;\n    /** Number of slides. */\n    slidesCount: number;\n    /** Theme adapting the component to light or dark background. */\n    theme?: Theme;\n    /** On next button click callback. */\n    onNextClick?(loopback?: boolean): void;\n    /** On pagination change callback. */\n    onPaginationClick?(index: number): void;\n    /** On previous button click callback. */\n    onPreviousClick?(loopback?: boolean): void;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'SlideshowControls';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<SlideshowControlsProps> = {\n    activeIndex: 0,\n    theme: Theme.light,\n};\n\n/**\n * SlideshowControls component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const SlideshowControls: Comp<SlideshowControlsProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const {\n        activeIndex,\n        className,\n        nextButtonProps,\n        onNextClick,\n        onPaginationClick,\n        onPreviousClick,\n        parentRef,\n        previousButtonProps,\n        slidesCount,\n        theme,\n        ...forwardedProps\n    } = props;\n\n    let parent;\n    if (WINDOW) {\n        // Checking window object to avoid errors in SSR.\n        parent = parentRef instanceof HTMLElement ? parentRef : parentRef?.current;\n    }\n    // Listen to keyboard navigate left & right.\n    useKeyNavigate(parent, onNextClick, onPreviousClick);\n    // Listen to touch swipe navigate left & right.\n    useSwipeNavigate(\n        parent,\n        // Go next without loopback.\n        useCallback(() => onNextClick?.(false), [onNextClick]),\n        // Go previous without loopback.\n        useCallback(() => onPreviousClick?.(false), [onPreviousClick]),\n    );\n\n    // Pagination \"bullet\" range.\n    const visibleRange = usePaginationVisibleRange(activeIndex as number, slidesCount);\n\n    // Inline style of wrapper element.\n    const wrapperStyle = { transform: `translateX(-${PAGINATION_ITEM_SIZE * visibleRange.min}px)` };\n\n    return (\n        <div\n            ref={ref}\n            {...forwardedProps}\n            className={classNames(className, handleBasicClasses({ prefix: CLASSNAME, theme }), {\n                [`${CLASSNAME}--has-infinite-pagination`]: slidesCount > PAGINATION_ITEMS_MAX,\n            })}\n        >\n            <IconButton\n                {...previousButtonProps}\n                icon={mdiChevronLeft}\n                className={`${CLASSNAME}__navigation`}\n                color={theme === Theme.dark ? 'light' : 'dark'}\n                emphasis={Emphasis.low}\n                onClick={onPreviousClick}\n                tabIndex={-1}\n            />\n            <div className={`${CLASSNAME}__pagination`}>\n                <div className={`${CLASSNAME}__pagination-items`} style={wrapperStyle}>\n                    {useMemo(\n                        () =>\n                            range(slidesCount).map((index) => {\n                                const isOnEdge =\n                                    index !== 0 &&\n                                    index !== slidesCount - 1 &&\n                                    (index === visibleRange.min || index === visibleRange.max);\n                                const isActive = activeIndex === index;\n                                const isOutRange = index < visibleRange.min || index > visibleRange.max;\n                                return (\n                                    // eslint-disable-next-line jsx-a11y/control-has-associated-label\n                                    <button\n                                        className={classNames(\n                                            handleBasicClasses({\n                                                prefix: `${CLASSNAME}__pagination-item`,\n                                                isActive,\n                                                isOnEdge,\n                                                isOutRange,\n                                            }),\n                                        )}\n                                        key={index}\n                                        type=\"button\"\n                                        onClick={() => onPaginationClick?.(index)}\n                                        tabIndex={-1}\n                                    />\n                                );\n                            }),\n                        [slidesCount, visibleRange.min, visibleRange.max, activeIndex, onPaginationClick],\n                    )}\n                </div>\n            </div>\n            <IconButton\n                {...nextButtonProps}\n                icon={mdiChevronRight}\n                className={`${CLASSNAME}__navigation`}\n                color={theme === Theme.dark ? 'light' : 'dark'}\n                emphasis={Emphasis.low}\n                onClick={onNextClick}\n                tabIndex={-1}\n            />\n        </div>\n    );\n});\nSlideshowControls.displayName = COMPONENT_NAME;\nSlideshowControls.className = CLASSNAME;\nSlideshowControls.defaultProps = DEFAULT_PROPS;\n"]},"metadata":{},"sourceType":"module"}