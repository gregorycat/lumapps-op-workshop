import { useEffect } from 'react';
import { D as DOCUMENT } from './constants.js';

/**
 * Get first and last elements focusable in an element.
 *
 * @param parentElement The element in which to search focusable elements.
 * @return first and last focusable elements
 */

function getFocusable(parentElement) {
  var focusableElements = parentElement.querySelectorAll('a[href]:not([tabindex="-1"]), button:not([tabindex="-1"]), textarea:not([tabindex="-1"]), input[type="text"]:not([tabindex="-1"]), input[type="radio"]:not([tabindex="-1"]), input[type="checkbox"]:not([tabindex="-1"]), [tabindex]:not([tabindex="-1"])');

  if (focusableElements.length <= 0) {
    return {};
  }

  var first = focusableElements[0];
  var last = focusableElements[focusableElements.length - 1];
  return {
    first: first,
    last: last
  };
}
/**
 * Add a key down event handler to the given root element (document.body by default) to trap the move of focus
 * (TAB and SHIFT-TAB keys) inside the given focusZoneElement.
 * Will focus the given focus element when activating the focus trap.
 *
 * @param focusZoneElement The element in which to trap the focus.
 * @param focusElement     The element to focus when the focus trap is activated.
 * @param rootElement      The element on which the key down event will be placed.
 */


function useFocusTrap(focusZoneElement, focusElement) {
  var rootElement = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DOCUMENT === null || DOCUMENT === void 0 ? void 0 : DOCUMENT.body;
  useEffect(function () {
    if (rootElement && focusZoneElement) {
      var _ref;

      (_ref = document.activeElement) === null || _ref === void 0 ? void 0 : _ref.blur();

      if (focusElement) {
        focusElement.focus();
      }

      var onKeyDown = function onKeyDown(evt) {
        var key = evt.key;

        if (key !== 'Tab') {
          return;
        }

        var _getFocusable = getFocusable(focusZoneElement),
            first = _getFocusable.first,
            last = _getFocusable.last; // Prevent focus switch if no focusable available.


        if (!first) {
          evt.preventDefault();
          return;
        }

        if (evt.shiftKey) {
          if (document.activeElement === first) {
            last === null || last === void 0 ? void 0 : last.focus();
            evt.preventDefault();
          }
        } else if (document.activeElement === last) {
          first === null || first === void 0 ? void 0 : first.focus();
          evt.preventDefault();
        }
      };

      rootElement.addEventListener('keydown', onKeyDown);
      return function () {
        return rootElement.removeEventListener('keydown', onKeyDown);
      };
    }

    return undefined;
  }, [focusElement, focusZoneElement, rootElement]);
}

export { useFocusTrap as u };
//# sourceMappingURL=useFocusTrap.js.map
