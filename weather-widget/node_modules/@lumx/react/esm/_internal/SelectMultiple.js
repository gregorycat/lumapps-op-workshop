import { Kind, Theme, Size, Emphasis } from './components.js';
import { f as _slicedToArray, d as classnames, h as handleBasicClasses, b as _extends, g as getRootClassName, a as _objectWithoutProperties, c as _objectSpread2 } from './getRootClassName.js';
import React, { useState, useEffect, useMemo, useRef, useCallback, forwardRef } from 'react';
import { b as mdiCheckCircle, c as mdiAlertCircle, n as mdiCloseCircle, o as mdiMenuDown, d as mdiClose } from './mdi.js';
import { u as uid } from '../index2.js';
import isEmpty from 'lodash/isEmpty';
import { P as Placement } from './Popover2.js';
import { m as mergeRefs } from './mergeRefs.js';
import { I as IconButton } from './IconButton.js';
import { C as Chip } from './Chip2.js';
import { D as Dropdown } from './Dropdown2.js';
import { I as Icon } from './Icon2.js';
import { I as InputHelper } from './InputHelper.js';
import { I as InputLabel } from './InputLabel.js';

/**
 * Listen on element focus to store the focus status.
 */

function useListenFocus(ref) {
  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isFocus = _useState2[0],
      setFocus = _useState2[1];

  useEffect(function () {
    var element = ref.current;

    if (!element) {
      return undefined;
    }

    var onFocus = function onFocus() {
      return setFocus(true);
    };

    var onBlur = function onBlur() {
      return setFocus(false);
    };

    element.addEventListener('focus', onFocus);
    element.addEventListener('blur', onBlur);
    return function () {
      element.removeEventListener('focus', onFocus);
      element.removeEventListener('blur', onBlur);
    };
  }, [ref, setFocus]);
  return isFocus;
}

/**
 * Select variants.
 */
var SelectVariant = {
  input: 'input',
  chip: 'chip'
};

/** The display name of the component. */

var COMPONENT_NAME = 'Select';
/** The default class name and classes prefix for this component. */

var CLASSNAME = getRootClassName(COMPONENT_NAME);
/** The default value of props. */

var DEFAULT_PROPS = {
  theme: Theme.light,
  variant: SelectVariant.input
};
var WithSelectContext = function WithSelectContext(SelectElement, _ref, ref) {
  var children = _ref.children,
      className = _ref.className,
      isMultiple = _ref.isMultiple,
      _ref$closeOnClick = _ref.closeOnClick,
      closeOnClick = _ref$closeOnClick === void 0 ? !isMultiple : _ref$closeOnClick,
      disabled = _ref.disabled,
      error = _ref.error,
      hasError = _ref.hasError,
      helper = _ref.helper,
      id = _ref.id,
      _ref$isDisabled = _ref.isDisabled,
      isDisabled = _ref$isDisabled === void 0 ? disabled : _ref$isDisabled,
      isEmpty = _ref.isEmpty,
      isOpen = _ref.isOpen,
      isRequired = _ref.isRequired,
      isValid = _ref.isValid,
      label = _ref.label,
      onClear = _ref.onClear,
      onDropdownClose = _ref.onDropdownClose,
      onInfiniteScroll = _ref.onInfiniteScroll,
      onInputClick = _ref.onInputClick,
      placeholder = _ref.placeholder,
      _ref$theme = _ref.theme,
      theme = _ref$theme === void 0 ? DEFAULT_PROPS.theme : _ref$theme,
      value = _ref.value,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? DEFAULT_PROPS.variant : _ref$variant,
      forwardedProps = _objectWithoutProperties(_ref, ["children", "className", "isMultiple", "closeOnClick", "disabled", "error", "hasError", "helper", "id", "isDisabled", "isEmpty", "isOpen", "isRequired", "isValid", "label", "onClear", "onDropdownClose", "onInfiniteScroll", "onInputClick", "placeholder", "theme", "value", "variant"]);

  var selectId = useMemo(function () {
    return id || "select-".concat(uid());
  }, [id]);
  var anchorRef = useRef(null);
  var selectRef = useRef(null);
  var isFocus = useListenFocus(anchorRef);
  var handleKeyboardNav = useCallback(function (evt) {
    if ((evt.key === 'Enter' || evt.key === ' ' || evt.key === 'ArrowDown') && onInputClick) {
      evt.preventDefault();
      onInputClick();
    }
  }, [onInputClick]);

  var onClose = function onClose() {
    var _anchorRef$current;

    if (onDropdownClose) {
      onDropdownClose();
    }

    anchorRef === null || anchorRef === void 0 ? void 0 : (_anchorRef$current = anchorRef.current) === null || _anchorRef$current === void 0 ? void 0 : _anchorRef$current.blur();
  };

  return React.createElement("div", {
    ref: mergeRefs(ref, selectRef),
    className: classnames(className, handleBasicClasses({
      hasError: hasError,
      hasLabel: Boolean(label),
      hasPlaceholder: Boolean(placeholder),
      hasValue: !isEmpty,
      isDisabled: isDisabled,
      isEmpty: isEmpty,
      isFocus: isFocus,
      isOpen: isOpen,
      isValid: isValid,
      prefix: CLASSNAME,
      theme: theme === Theme.light ? Theme.light : Theme.dark
    }))
  }, React.createElement(SelectElement, _extends({}, forwardedProps, {
    anchorRef: anchorRef,
    "aria-disabled": isDisabled,
    handleKeyboardNav: handleKeyboardNav,
    hasError: hasError,
    isDisabled: isDisabled,
    isEmpty: isEmpty,
    isRequired: isRequired,
    isValid: isValid,
    label: label,
    placeholder: placeholder,
    id: selectId,
    theme: theme,
    value: value,
    variant: variant,
    onClear: onClear,
    onInputClick: onInputClick
  })), React.createElement(Dropdown, {
    anchorRef: anchorRef,
    closeOnClick: closeOnClick,
    closeOnClickAway: true,
    closeOnEscape: true,
    isOpen: !!isOpen,
    placement: Placement.BOTTOM_START,
    onClose: onClose,
    onInfiniteScroll: onInfiniteScroll
  }, children), hasError && error && React.createElement(InputHelper, {
    className: "".concat(CLASSNAME, "__helper"),
    kind: Kind.error,
    theme: theme
  }, error), helper && React.createElement(InputHelper, {
    className: "".concat(CLASSNAME, "__helper"),
    theme: theme
  }, helper));
};

/** The display name of the component. */

var COMPONENT_NAME$1 = 'Select';
/** The default class name and classes prefix for this component. */

var CLASSNAME$1 = getRootClassName(COMPONENT_NAME$1);
/** The default value of props. */

var DEFAULT_PROPS$1 = {
  selectedValueRender: function selectedValueRender(choice) {
    return choice;
  }
};

var stopPropagation = function stopPropagation(evt) {
  return evt.stopPropagation();
};
/**
 * Select component.
 */


var SelectField = function SelectField(_ref) {
  var anchorRef = _ref.anchorRef,
      clearButtonProps = _ref.clearButtonProps,
      handleKeyboardNav = _ref.handleKeyboardNav,
      hasError = _ref.hasError,
      hasInputClear = _ref.hasInputClear,
      id = _ref.id,
      isDisabled = _ref.isDisabled,
      isEmpty = _ref.isEmpty,
      isRequired = _ref.isRequired,
      isValid = _ref.isValid,
      label = _ref.label,
      onClear = _ref.onClear,
      onInputClick = _ref.onInputClick,
      placeholder = _ref.placeholder,
      selectedValueRender = _ref.selectedValueRender,
      theme = _ref.theme,
      value = _ref.value,
      variant = _ref.variant,
      forwardedProps = _objectWithoutProperties(_ref, ["anchorRef", "clearButtonProps", "handleKeyboardNav", "hasError", "hasInputClear", "id", "isDisabled", "isEmpty", "isRequired", "isValid", "label", "onClear", "onInputClick", "placeholder", "selectedValueRender", "theme", "value", "variant"]);

  return React.createElement(React.Fragment, null, variant === SelectVariant.input && React.createElement(React.Fragment, null, label && React.createElement("div", {
    className: "".concat(CLASSNAME$1, "__header")
  }, React.createElement(InputLabel, {
    htmlFor: id,
    className: "".concat(CLASSNAME$1, "__label"),
    isRequired: isRequired,
    theme: theme
  }, label)), React.createElement("div", _extends({
    ref: anchorRef,
    id: id,
    className: "".concat(CLASSNAME$1, "__wrapper"),
    onClick: onInputClick,
    onKeyDown: handleKeyboardNav,
    tabIndex: isDisabled ? undefined : 0,
    "aria-disabled": isDisabled || undefined
  }, forwardedProps), React.createElement("div", {
    className: classnames(["".concat(CLASSNAME$1, "__input-native"), isEmpty && placeholder && "".concat(CLASSNAME$1, "__input-native--placeholder")])
  }, !isEmpty && React.createElement("span", null, selectedValueRender === null || selectedValueRender === void 0 ? void 0 : selectedValueRender(value)), isEmpty && placeholder && React.createElement("span", null, placeholder)), (isValid || hasError) && React.createElement("div", {
    className: "".concat(CLASSNAME$1, "__input-validity")
  }, React.createElement(Icon, {
    icon: isValid ? mdiCheckCircle : mdiAlertCircle,
    size: Size.xxs
  })), hasInputClear && clearButtonProps && React.createElement(IconButton, _extends({}, clearButtonProps, {
    className: "".concat(CLASSNAME$1, "__input-clear"),
    icon: mdiCloseCircle,
    emphasis: Emphasis.low,
    size: Size.s,
    theme: theme,
    onClick: onClear,
    onKeyDown: stopPropagation
  })), React.createElement("div", {
    className: "".concat(CLASSNAME$1, "__input-indicator")
  }, React.createElement(Icon, {
    icon: mdiMenuDown,
    size: Size.s
  })))), variant === SelectVariant.chip && React.createElement(Chip, _extends({
    id: id,
    isSelected: !isEmpty,
    isDisabled: isDisabled,
    after: React.createElement(Icon, {
      icon: isEmpty ? mdiMenuDown : mdiCloseCircle
    }),
    onAfterClick: isEmpty ? onInputClick : onClear,
    onClick: onInputClick,
    ref: anchorRef,
    theme: theme
  }, forwardedProps), isEmpty && React.createElement("span", null, label), !isEmpty && React.createElement("span", null, selectedValueRender === null || selectedValueRender === void 0 ? void 0 : selectedValueRender(value))));
};
/**
 * Select component.
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */


var Select = forwardRef(function (props, ref) {
  var isEmpty$1 = isEmpty(props.value);
  var hasInputClear = props.onClear && props.clearButtonProps && !isEmpty$1;
  return WithSelectContext(SelectField, _objectSpread2({}, props, {
    className: classnames(props.className, handleBasicClasses({
      hasInputClear: hasInputClear,
      hasUnique: !props.isEmpty,
      prefix: CLASSNAME$1
    })),
    hasInputClear: hasInputClear,
    isEmpty: isEmpty$1
  }), ref);
});
Select.displayName = COMPONENT_NAME$1;
Select.className = CLASSNAME$1;
Select.defaultProps = DEFAULT_PROPS$1;
Select.className = CLASSNAME$1;

/** Defines the props of the component. */

/** The display name of the component. */
var COMPONENT_NAME$2 = 'Select';
/** The default class name and classes prefix for this component. */

var CLASSNAME$2 = getRootClassName(COMPONENT_NAME$2);
/** The default value of props. */

var DEFAULT_PROPS$2 = {
  selectedChipRender: function selectedChipRender(choice, index, onClear, isDisabled, theme) {
    var onClick = function onClick(event) {
      return onClear && onClear(event, choice);
    };

    return React.createElement(Chip, {
      key: index,
      after: onClear && React.createElement(Icon, {
        icon: mdiClose,
        size: Size.xxs
      }),
      isDisabled: isDisabled,
      size: Size.s,
      onAfterClick: onClick,
      onClick: onClick,
      theme: theme
    }, choice);
  },
  selectedValueRender: function selectedValueRender(choice) {
    return choice;
  }
};
var SelectMultipleField = function SelectMultipleField(_ref) {
  var anchorRef = _ref.anchorRef,
      handleKeyboardNav = _ref.handleKeyboardNav,
      hasError = _ref.hasError,
      id = _ref.id,
      isDisabled = _ref.isDisabled,
      isEmpty = _ref.isEmpty,
      isRequired = _ref.isRequired,
      isValid = _ref.isValid,
      label = _ref.label,
      onClear = _ref.onClear,
      onInputClick = _ref.onInputClick,
      placeholder = _ref.placeholder,
      selectedChipRender = _ref.selectedChipRender,
      selectedValueRender = _ref.selectedValueRender,
      theme = _ref.theme,
      value = _ref.value,
      variant = _ref.variant;
  return React.createElement(React.Fragment, null, variant === SelectVariant.input && React.createElement(React.Fragment, null, label && React.createElement("div", {
    className: "".concat(CLASSNAME$2, "__header")
  }, React.createElement(InputLabel, {
    htmlFor: id,
    className: "".concat(CLASSNAME$2, "__label"),
    isRequired: isRequired,
    theme: theme
  }, label)), React.createElement("div", {
    ref: anchorRef,
    id: id,
    className: "".concat(CLASSNAME$2, "__wrapper"),
    onClick: onInputClick,
    onKeyDown: handleKeyboardNav,
    tabIndex: isDisabled ? undefined : 0,
    "aria-disabled": isDisabled || undefined
  }, React.createElement("div", {
    className: "".concat(CLASSNAME$2, "__chips")
  }, !isEmpty && value.map(function (val, index) {
    return selectedChipRender === null || selectedChipRender === void 0 ? void 0 : selectedChipRender(val, index, onClear, isDisabled, theme);
  })), isEmpty && placeholder && React.createElement("div", {
    className: classnames(["".concat(CLASSNAME$2, "__input-native"), "".concat(CLASSNAME$2, "__input-native--placeholder")])
  }, React.createElement("span", null, placeholder)), (isValid || hasError) && React.createElement("div", {
    className: "".concat(CLASSNAME$2, "__input-validity")
  }, React.createElement(Icon, {
    icon: isValid ? mdiCheckCircle : mdiAlertCircle,
    size: Size.xxs
  })), React.createElement("div", {
    className: "".concat(CLASSNAME$2, "__input-indicator")
  }, React.createElement(Icon, {
    icon: mdiMenuDown,
    size: Size.s
  })))), variant === SelectVariant.chip && React.createElement(Chip, {
    id: id,
    isSelected: !isEmpty,
    isDisabled: isDisabled,
    after: React.createElement(Icon, {
      icon: isEmpty ? mdiMenuDown : mdiCloseCircle
    }),
    onAfterClick: isEmpty ? onInputClick : onClear,
    onClick: onInputClick,
    ref: anchorRef,
    theme: theme
  }, isEmpty && React.createElement("span", null, label), !isEmpty && React.createElement("span", null, React.createElement("span", null, selectedValueRender === null || selectedValueRender === void 0 ? void 0 : selectedValueRender(value[0])), value.length > 1 && React.createElement("span", null, "\xA0+", value.length - 1))));
};
/**
 * SelectMultiple component.
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */

var SelectMultiple = forwardRef(function (props, ref) {
  return WithSelectContext(SelectMultipleField, _objectSpread2({}, props, {
    className: classnames(props.className, handleBasicClasses({
      hasMultiple: !props.isEmpty,
      prefix: CLASSNAME$2
    })),
    isEmpty: props.value.length === 0,
    isMultiple: true
  }), ref);
});
SelectMultiple.displayName = COMPONENT_NAME$2;
SelectMultiple.className = CLASSNAME$2;
SelectMultiple.defaultProps = DEFAULT_PROPS$2;

export { SelectVariant as S, Select as a, SelectMultipleField as b, SelectMultiple as c };
//# sourceMappingURL=SelectMultiple.js.map
