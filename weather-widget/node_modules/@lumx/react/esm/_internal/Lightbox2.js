import { ColorPalette, Emphasis } from './components.js';
import { g as getRootClassName, a as _objectWithoutProperties, b as _extends, d as classnames, h as handleBasicClasses } from './getRootClassName.js';
import React, { forwardRef, useRef } from 'react';
import { d as mdiClose } from './mdi.js';
import { D as DOCUMENT } from './constants.js';
import { u as useFocus } from './Popover2.js';
import { m as mergeRefs } from './mergeRefs.js';
import { I as IconButton } from './IconButton.js';
import { u as useFocusTrap } from './useFocusTrap.js';
import { createPortal } from 'react-dom';
import { u as useCallbackOnEscape, C as ClickAwayProvider } from './ClickAwayProvider.js';
import { u as useDelayedVisibility } from './useDelayedVisibility.js';
import { u as useDisableBodyScroll } from './useDisableBodyScroll.js';

var LIGHTBOX_TRANSITION_DURATION = 400;
/**
 * Defines the props of the component.
 */

/**
 * Component display name.
 */
var COMPONENT_NAME = 'Lightbox';
/**
 * Component default class name and class prefix.
 */

var CLASSNAME = getRootClassName(COMPONENT_NAME);
/**
 * Lightbox component.
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */

var Lightbox = forwardRef(function (props, ref) {
  var _childrenRef$current;

  var ariaLabel = props.ariaLabel,
      children = props.children,
      className = props.className,
      closeButtonProps = props.closeButtonProps,
      isOpen = props.isOpen,
      onClose = props.onClose,
      parentElement = props.parentElement,
      preventAutoClose = props.preventAutoClose,
      theme = props.theme,
      zIndex = props.zIndex,
      forwardedProps = _objectWithoutProperties(props, ["ariaLabel", "children", "className", "closeButtonProps", "isOpen", "onClose", "parentElement", "preventAutoClose", "theme", "zIndex"]);

  if (!DOCUMENT) {
    // Can't render in SSR.
    return null;
  } // eslint-disable-next-line react-hooks/rules-of-hooks


  var childrenRef = useRef(null); // eslint-disable-next-line react-hooks/rules-of-hooks

  var wrapperRef = useRef(null); // eslint-disable-next-line react-hooks/rules-of-hooks

  useDisableBodyScroll(isOpen && wrapperRef.current); // eslint-disable-next-line react-hooks/rules-of-hooks

  var isVisible = useDelayedVisibility(!!isOpen, LIGHTBOX_TRANSITION_DURATION); // Handle focus trap.
  // eslint-disable-next-line react-hooks/rules-of-hooks

  useFocusTrap(wrapperRef.current, (_childrenRef$current = childrenRef.current) === null || _childrenRef$current === void 0 ? void 0 : _childrenRef$current.firstChild); // Focus the parent element on close.
  // eslint-disable-next-line react-hooks/rules-of-hooks

  useFocus(parentElement === null || parentElement === void 0 ? void 0 : parentElement.current, !isOpen); // Close lightbox on escape key pressed.
  // eslint-disable-next-line react-hooks/rules-of-hooks

  useCallbackOnEscape(onClose); // eslint-disable-next-line react-hooks/rules-of-hooks

  var clickAwayRefs = useRef([wrapperRef]);
  if (!isOpen && !isVisible) return null;
  return createPortal(
  /* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions */
  React.createElement("div", _extends({
    ref: mergeRefs(ref, wrapperRef)
  }, forwardedProps, {
    "aria-label": ariaLabel,
    "aria-modal": "true",
    className: classnames(className, handleBasicClasses({
      prefix: CLASSNAME,
      isHidden: !isOpen,
      isShown: isOpen || isVisible,
      theme: theme
    })),
    style: {
      zIndex: zIndex
    }
  }), closeButtonProps && React.createElement(IconButton, _extends({}, closeButtonProps, {
    className: "".concat(CLASSNAME, "__close"),
    color: ColorPalette.light,
    emphasis: Emphasis.low,
    icon: mdiClose,
    theme: theme,
    type: "button",
    onClick: onClose
  })), React.createElement(ClickAwayProvider, {
    callback: !preventAutoClose && onClose,
    refs: clickAwayRefs
  }, React.createElement("div", {
    ref: childrenRef,
    className: "".concat(CLASSNAME, "__wrapper"),
    role: "presentation"
  }, children))), document.body);
});
Lightbox.displayName = COMPONENT_NAME;
Lightbox.className = CLASSNAME;

export { Lightbox as L };
//# sourceMappingURL=Lightbox2.js.map
