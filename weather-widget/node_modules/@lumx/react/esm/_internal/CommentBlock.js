import { Size, Theme } from './components.js';
import { g as getRootClassName, a as _objectWithoutProperties, b as _extends, d as classnames, h as handleBasicClasses } from './getRootClassName.js';
import React, { forwardRef, Children } from 'react';
import { A as Avatar } from './Avatar2.js';
import isFunction from 'lodash/isFunction';

/**
 * Comment block variants.
 */
var CommentBlockVariant = {
  indented: 'indented',
  linear: 'linear'
};

/**
 * Component display name.
 */
var COMPONENT_NAME = 'CommentBlock';
/**
 * Component default class name and class prefix.
 */

var CLASSNAME = getRootClassName(COMPONENT_NAME);
/**
 * Component default props.
 */

var DEFAULT_PROPS = {
  theme: Theme.light,
  variant: CommentBlockVariant.indented
};
/**
 * CommentBlock component.
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */

var CommentBlock = forwardRef(function (props, ref) {
  var actions = props.actions,
      avatarProps = props.avatarProps,
      children = props.children,
      className = props.className,
      date = props.date,
      hasActions = props.hasActions,
      headerActions = props.headerActions,
      isOpen = props.isOpen,
      isRelevant = props.isRelevant,
      name = props.name,
      onClick = props.onClick,
      onMouseEnter = props.onMouseEnter,
      onMouseLeave = props.onMouseLeave,
      text = props.text,
      theme = props.theme,
      variant = props.variant,
      forwardedProps = _objectWithoutProperties(props, ["actions", "avatarProps", "children", "className", "date", "hasActions", "headerActions", "isOpen", "isRelevant", "name", "onClick", "onMouseEnter", "onMouseLeave", "text", "theme", "variant"]);

  var enterKeyPress = function enterKeyPress(evt) {
    if (evt.key === 'Enter' && isFunction(onClick)) {
      onClick();
    }
  };

  var hasChildren = Children.count(children) > 0;
  return React.createElement("div", _extends({
    ref: ref,
    className: classnames(className, handleBasicClasses({
      hasChildren: hasChildren && isOpen,
      hasIndentedChildren: hasChildren && variant === CommentBlockVariant.indented,
      hasLinearChildren: hasChildren && variant === CommentBlockVariant.linear,
      isRelevant: isRelevant,
      prefix: CLASSNAME,
      theme: theme
    }))
  }, forwardedProps), React.createElement("div", {
    className: "".concat(CLASSNAME, "__wrapper")
  }, React.createElement("div", {
    className: "".concat(CLASSNAME, "__avatar")
  }, React.createElement(Avatar, _extends({}, avatarProps, {
    size: Size.m,
    tabIndex: onClick ? 0 : -1,
    onClick: onClick,
    onKeyPress: enterKeyPress
  }))), React.createElement("div", {
    className: "".concat(CLASSNAME, "__container")
  }, React.createElement("div", {
    className: "".concat(CLASSNAME, "__content")
  }, React.createElement("div", {
    className: "".concat(CLASSNAME, "__meta")
  }, React.createElement("span", {
    className: "".concat(CLASSNAME, "__name"),
    onClick: onClick,
    onKeyPress: enterKeyPress,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    role: "button",
    tabIndex: onClick ? 0 : -1
  }, name), date && React.createElement("span", {
    className: "".concat(CLASSNAME, "__date")
  }, date), headerActions && React.createElement("span", {
    className: "".concat(CLASSNAME, "__header-actions")
  }, headerActions)), React.createElement("div", {
    className: "".concat(CLASSNAME, "__text")
  }, text)), hasActions && React.createElement("div", {
    className: "".concat(CLASSNAME, "__actions")
  }, actions))), hasChildren && isOpen && React.createElement("div", {
    className: "".concat(CLASSNAME, "__children")
  }, children));
});
CommentBlock.displayName = COMPONENT_NAME;
CommentBlock.className = CLASSNAME;
CommentBlock.defaultProps = DEFAULT_PROPS;

export { CommentBlockVariant as C, CommentBlock as a };
//# sourceMappingURL=CommentBlock.js.map
