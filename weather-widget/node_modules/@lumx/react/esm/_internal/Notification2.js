import { Size, Emphasis, Theme } from './components.js';
import { g as getRootClassName, a as _objectWithoutProperties, b as _extends, d as classnames, h as handleBasicClasses, N as NOTIFICATION_TRANSITION_DURATION } from './getRootClassName.js';
import React, { forwardRef } from 'react';
import { m as mdiAlert, a as mdiInformation, b as mdiCheckCircle, c as mdiAlertCircle } from './mdi.js';
import { D as DOCUMENT } from './constants.js';
import { a as Button } from './Button2.js';
import isFunction from 'lodash/isFunction';
import { createPortal } from 'react-dom';
import { u as useDelayedVisibility } from './useDelayedVisibility.js';
import { I as Icon } from './Icon2.js';

/**
 * Notification icon and colors according to their type.
 */

var NOTIFICATION_CONFIGURATION = {
  error: {
    color: 'red',
    icon: mdiAlert
  },
  info: {
    color: 'dark',
    icon: mdiInformation
  },
  success: {
    color: 'green',
    icon: mdiCheckCircle
  },
  warning: {
    color: 'yellow',
    icon: mdiAlertCircle
  }
};

/**
 * Defines the props of the component.
 */

/**
 * Component display name.
 */
var COMPONENT_NAME = 'Notification';
/**
 * Component default class name and class prefix.
 */

var CLASSNAME = getRootClassName(COMPONENT_NAME);
/**
 * Component default props.
 */

var DEFAULT_PROPS = {
  theme: Theme.light,
  zIndex: 9999
};
/* eslint-disable react-hooks/rules-of-hooks, jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */

/**
 * Notification component.
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */

var Notification = forwardRef(function (props, ref) {
  var actionLabel = props.actionLabel,
      className = props.className,
      content = props.content,
      isOpen = props.isOpen,
      onActionClick = props.onActionClick,
      onClick = props.onClick,
      theme = props.theme,
      type = props.type,
      zIndex = props.zIndex,
      forwardedProps = _objectWithoutProperties(props, ["actionLabel", "className", "content", "isOpen", "onActionClick", "onClick", "theme", "type", "zIndex"]);

  if (!DOCUMENT) {
    // Can't render in SSR.
    return null;
  }

  var _ref = NOTIFICATION_CONFIGURATION[type] || {},
      color = _ref.color,
      icon = _ref.icon;

  var isVisible = useDelayedVisibility(!!isOpen, NOTIFICATION_TRANSITION_DURATION);
  var hasAction = Boolean(onActionClick) && Boolean(actionLabel);

  var handleCallback = function handleCallback(evt) {
    if (isFunction(onActionClick)) {
      onActionClick();
    }

    evt.stopPropagation();
  };

  return type && isVisible ? createPortal(React.createElement("div", _extends({
    ref: ref,
    role: "alert"
  }, forwardedProps, {
    className: classnames(className, handleBasicClasses({
      color: color,
      hasAction: hasAction,
      isHidden: !isOpen,
      prefix: CLASSNAME
    })),
    onClick: onClick,
    style: {
      zIndex: zIndex
    }
  }), React.createElement("div", {
    className: "".concat(CLASSNAME, "__icon")
  }, React.createElement(Icon, {
    icon: icon,
    size: Size.s
  })), React.createElement("div", {
    className: "".concat(CLASSNAME, "__content")
  }, content), hasAction && React.createElement("div", {
    className: "".concat(CLASSNAME, "__action")
  }, React.createElement(Button, {
    emphasis: Emphasis.medium,
    theme: theme,
    onClick: handleCallback
  }, React.createElement("span", null, actionLabel)))), document.body) : null;
});
Notification.displayName = COMPONENT_NAME;
Notification.className = CLASSNAME;
Notification.defaultProps = DEFAULT_PROPS;

export { Notification as N };
//# sourceMappingURL=Notification2.js.map
