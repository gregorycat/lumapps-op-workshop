import { Size, Emphasis, ColorPalette, Kind } from './components.js';
import { _ as _defineProperty, g as getRootClassName, a as _objectWithoutProperties, b as _extends, c as _objectSpread2, d as classnames, h as handleBasicClasses } from './getRootClassName.js';
import React, { forwardRef } from 'react';
import { m as mdiAlert, a as mdiInformation, b as mdiCheckCircle, c as mdiAlertCircle } from './mdi.js';
import { u as uid } from '../index2.js';
import { a as Button } from './Button2.js';
import { D as Dialog } from './Dialog2.js';
import { I as Icon } from './Icon2.js';
import { T as Toolbar } from './Toolbar2.js';

var _CONFIG;

/**
 * Associative map from message kind to color and icon.
 */
var CONFIG = (_CONFIG = {}, _defineProperty(_CONFIG, Kind.error, {
  color: ColorPalette.red,
  icon: mdiAlert
}), _defineProperty(_CONFIG, Kind.info, {
  color: ColorPalette.blue,
  icon: mdiInformation
}), _defineProperty(_CONFIG, Kind.success, {
  color: ColorPalette.green,
  icon: mdiCheckCircle
}), _defineProperty(_CONFIG, Kind.warning, {
  color: ColorPalette.yellow,
  icon: mdiAlertCircle
}), _CONFIG);
/**
 * Component display name.
 */

var COMPONENT_NAME = 'AlertDialog';
/**
 * Component default class name and class prefix.
 */

var CLASSNAME = getRootClassName(COMPONENT_NAME);
/**
 * Component default props.
 */

var DEFAULT_PROPS = {
  size: Size.tiny,
  kind: Kind.info
};
/**
 * AlertDialog component.
 *
 * An alert dialog is a modal dialog that interrupts the user's workflow to
 * communicate an important message and acquire a response.
 *
 * It should not have a complex content.
 * Children of this component should only be strings, paragraphs or links.
 */

var AlertDialog = forwardRef(function (props, ref) {
  var id = props.id,
      title = props.title,
      className = props.className,
      cancelProps = props.cancelProps,
      confirmProps = props.confirmProps,
      kind = props.kind,
      size = props.size,
      dialogProps = props.dialogProps,
      children = props.children,
      forwardedProps = _objectWithoutProperties(props, ["id", "title", "className", "cancelProps", "confirmProps", "kind", "size", "dialogProps", "children"]);

  var cancelButtonRef = React.useRef(null);
  var confirmationButtonRef = React.useRef(null);

  var _ref = CONFIG[kind] || {},
      color = _ref.color,
      icon = _ref.icon; // Define a unique ID to target title and description for aria attributes.


  var uniqueId = React.useMemo(function () {
    return id || uid();
  }, [id]);
  var titleId = "".concat(uniqueId, "-title");
  var descriptionId = "".concat(uniqueId, "-description"); // If content is a string, set in a paragraph.

  var DescriptionElement = typeof children === 'string' ? 'p' : 'div';

  var confirmLabel = confirmProps.label,
      confirmOnClick = confirmProps.onClick,
      forwardedConfirmProps = _objectWithoutProperties(confirmProps, ["label", "onClick"]);

  var _ref2 = cancelProps || {},
      cancelLabel = _ref2.label,
      cancelOnClick = _ref2.onClick,
      forwardedCancelProps = _objectWithoutProperties(_ref2, ["label", "onClick"]);

  return React.createElement(Dialog, _extends({
    ref: ref,
    focusElement: cancelProps ? cancelButtonRef : confirmationButtonRef,
    size: size,
    dialogProps: _objectSpread2({
      id: uniqueId,
      role: 'alertdialog',
      'aria-labelledby': titleId,
      'aria-describedby': descriptionId
    }, dialogProps),
    className: classnames(className, handleBasicClasses({
      kind: kind,
      prefix: CLASSNAME
    }))
  }, forwardedProps), React.createElement("header", null, React.createElement(Toolbar, {
    className: "lumx-spacing-margin-horizontal",
    before: React.createElement(Icon, {
      icon: icon,
      size: Size.s,
      color: color
    }),
    label: React.createElement("h2", {
      id: titleId,
      className: "lumx-typography-title"
    }, title)
  })), children && React.createElement(DescriptionElement, {
    id: descriptionId,
    className: "lumx-typography-body2 lumx-spacing-padding-vertical-big lumx-spacing-padding-horizontal-huge"
  }, children), React.createElement("footer", null, React.createElement(Toolbar, {
    className: "lumx-spacing-margin-horizontal",
    after: React.createElement(React.Fragment, null, cancelProps && React.createElement(Button, _extends({}, forwardedCancelProps, {
      ref: cancelButtonRef,
      emphasis: Emphasis.medium,
      onClick: cancelOnClick
    }), cancelLabel), React.createElement(Button, _extends({}, forwardedConfirmProps, {
      ref: confirmationButtonRef,
      color: color,
      className: "lumx-spacing-margin-left-regular",
      onClick: confirmOnClick
    }), confirmLabel))
  })));
});
AlertDialog.displayName = COMPONENT_NAME;
AlertDialog.className = CLASSNAME;
AlertDialog.defaultProps = DEFAULT_PROPS;

export { AlertDialog as A };
//# sourceMappingURL=AlertDialog.js.map
