import { Size, Typography } from './components.js';
import { g as getRootClassName, a as _objectWithoutProperties, d as classnames, _ as _defineProperty, b as _extends, h as handleBasicClasses, c as _objectSpread2 } from './getRootClassName.js';
import React, { forwardRef, useMemo } from 'react';
import isEmpty from 'lodash/isEmpty';
import { r as renderLink } from './renderLink.js';
import { I as Icon } from './Icon2.js';

/**
 * Component display name.
 */
var COMPONENT_NAME = 'Link';
/**
 * Component default class name and class prefix.
 */

var CLASSNAME = getRootClassName(COMPONENT_NAME);

var getIconSize = function getIconSize(typography) {
  switch (typography) {
    case Typography.display1:
      return Size.m;

    case Typography.headline:
    case Typography.title:
    case Typography.body2:
    case Typography.subtitle2:
      return Size.s;

    case Typography.body1:
    case Typography.subtitle1:
      return Size.xs;

    case Typography.caption:
    case Typography.overline:
      return Size.xxs;

    default:
      return Size.s;
  }
};
/**
 * Link component.
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */


var Link = forwardRef(function (props, ref) {
  var children = props.children,
      className = props.className,
      color = props.color,
      colorVariant = props.colorVariant,
      disabled = props.disabled,
      _props$isDisabled = props.isDisabled,
      isDisabled = _props$isDisabled === void 0 ? disabled : _props$isDisabled,
      href = props.href,
      leftIcon = props.leftIcon,
      linkAs = props.linkAs,
      rightIcon = props.rightIcon,
      target = props.target,
      typography = props.typography,
      forwardedProps = _objectWithoutProperties(props, ["children", "className", "color", "colorVariant", "disabled", "isDisabled", "href", "leftIcon", "linkAs", "rightIcon", "target", "typography"]);

  var renderedChildren = useMemo(function () {
    return React.createElement(React.Fragment, null, leftIcon && !isEmpty(leftIcon) && React.createElement(Icon, {
      icon: leftIcon,
      className: "".concat(CLASSNAME, "__left-icon"),
      size: getIconSize(typography)
    }), children && React.createElement("span", {
      className: classnames("".concat(CLASSNAME, "__content"), _defineProperty({}, "lumx-typography-".concat(typography), typography))
    }, children), rightIcon && !isEmpty(rightIcon) && React.createElement(Icon, {
      icon: rightIcon,
      className: "".concat(CLASSNAME, "__right-icon"),
      size: getIconSize(typography)
    }));
  }, [leftIcon, typography, children, rightIcon]);
  /**
   * If there is no linkAs prop and no href, we returned a <button> instead of a <a>.
   * If the component is disabled, we also returned a <button> since disabled is not compatible with <a>.
   */

  if (!linkAs && isEmpty(href) || isDisabled) {
    return React.createElement("button", _extends({
      type: "button"
    }, forwardedProps, {
      ref: ref,
      disabled: isDisabled,
      className: classnames(className, handleBasicClasses({
        prefix: CLASSNAME,
        color: color,
        colorVariant: colorVariant
      }))
    }), renderedChildren);
  }

  return renderLink(_objectSpread2({
    linkAs: linkAs
  }, forwardedProps, {
    href: href,
    target: target,
    className: classnames(className, handleBasicClasses({
      prefix: CLASSNAME,
      color: color,
      colorVariant: colorVariant
    })),
    ref: ref
  }), renderedChildren);
});
Link.displayName = COMPONENT_NAME;
Link.className = CLASSNAME;

export { Link as L };
//# sourceMappingURL=Link2.js.map
