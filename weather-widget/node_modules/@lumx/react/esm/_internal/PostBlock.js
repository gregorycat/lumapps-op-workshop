import { Orientation, Theme } from './components.js';
import { g as getRootClassName, a as _objectWithoutProperties, b as _extends, d as classnames, h as handleBasicClasses } from './getRootClassName.js';
import React, { forwardRef } from 'react';
import isObject from 'lodash/isObject';
import { T as Thumbnail } from './Thumbnail2.js';
import { a as ThumbnailVariant } from './types.js';

/**
 * Defines the props of the component.
 */

/**
 * Component display name.
 */
var COMPONENT_NAME = 'PostBlock';
/**
 * Component default class name and class prefix.
 */

var CLASSNAME = getRootClassName(COMPONENT_NAME);
/**
 * Component default props.
 */

var DEFAULT_PROPS = {
  orientation: Orientation.horizontal,
  theme: Theme.light
};
/**
 * PostBlock component.
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */

var PostBlock = forwardRef(function (props, ref) {
  var actions = props.actions,
      attachments = props.attachments,
      author = props.author,
      className = props.className,
      meta = props.meta,
      onClick = props.onClick,
      orientation = props.orientation,
      tags = props.tags,
      text = props.text,
      theme = props.theme,
      thumbnailProps = props.thumbnailProps,
      title = props.title,
      forwardedProps = _objectWithoutProperties(props, ["actions", "attachments", "author", "className", "meta", "onClick", "orientation", "tags", "text", "theme", "thumbnailProps", "title"]);

  return React.createElement("div", _extends({
    ref: ref,
    className: classnames(className, handleBasicClasses({
      prefix: CLASSNAME,
      orientation: orientation,
      theme: theme
    }))
  }, forwardedProps), thumbnailProps && React.createElement("div", {
    className: "".concat(CLASSNAME, "__thumbnail")
  }, React.createElement(Thumbnail, _extends({}, thumbnailProps, {
    theme: theme,
    variant: ThumbnailVariant.rounded
  }))), React.createElement("div", {
    className: "".concat(CLASSNAME, "__wrapper")
  }, author && React.createElement("div", {
    className: "".concat(CLASSNAME, "__author")
  }, author), title && React.createElement("button", {
    type: "button",
    className: "".concat(CLASSNAME, "__title"),
    onClick: onClick
  }, title), meta && React.createElement("span", {
    className: "".concat(CLASSNAME, "__meta")
  }, meta), isObject(text) && text.__html ? // eslint-disable-next-line react/no-danger
  React.createElement("p", {
    dangerouslySetInnerHTML: text,
    className: "".concat(CLASSNAME, "__text")
  }) : React.createElement("p", {
    className: "".concat(CLASSNAME, "__text")
  }, text), attachments && React.createElement("div", {
    className: "".concat(CLASSNAME, "__attachments")
  }, attachments), (tags || actions) && React.createElement("div", {
    className: "".concat(CLASSNAME, "__toolbar")
  }, tags && React.createElement("div", {
    className: "".concat(CLASSNAME, "__tags")
  }, tags), actions && React.createElement("div", {
    className: "".concat(CLASSNAME, "__actions")
  }, actions))));
});
PostBlock.displayName = COMPONENT_NAME;
PostBlock.className = CLASSNAME;
PostBlock.defaultProps = DEFAULT_PROPS;

export { PostBlock as P };
//# sourceMappingURL=PostBlock.js.map
