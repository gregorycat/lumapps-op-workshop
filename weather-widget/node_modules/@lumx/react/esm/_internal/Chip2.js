import { Size, Theme, ColorPalette } from './components.js';
import { g as getRootClassName, a as _objectWithoutProperties, b as _extends, d as classnames, h as handleBasicClasses, o as onEnterPressed, _ as _defineProperty } from './getRootClassName.js';
import React, { useCallback, forwardRef } from 'react';
import isFunction from 'lodash/isFunction';

/**
 * Wrap mouse event handler to stop event propagation.
 *
 * @param  handler   The mouse handler to wrap.
 * @return Mouse handler stopping propagation.
 */

function useStopPropagation(handler) {
  return useCallback(function (evt) {
    if (!evt || !isFunction(handler)) {
      return;
    }

    handler(evt);
    evt.stopPropagation();
  }, [handler]);
}

/**
 * Chip sizes.
 */

/**
 * Component display name.
 */
var COMPONENT_NAME = 'Chip';
/**
 * Component default class name and class prefix.
 */

var CLASSNAME = getRootClassName(COMPONENT_NAME);
/**
 * Component default props.
 */

var DEFAULT_PROPS = {
  size: Size.m,
  theme: Theme.light
};
/**
 * Chip component.
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */

var Chip = forwardRef(function (props, ref) {
  var after = props.after,
      before = props.before,
      children = props.children,
      className = props.className,
      color = props.color,
      disabled = props.disabled,
      isClickable = props.isClickable,
      _props$isDisabled = props.isDisabled,
      isDisabled = _props$isDisabled === void 0 ? disabled : _props$isDisabled,
      isHighlighted = props.isHighlighted,
      isSelected = props.isSelected,
      onAfterClick = props.onAfterClick,
      onBeforeClick = props.onBeforeClick,
      onClick = props.onClick,
      size = props.size,
      theme = props.theme,
      forwardedProps = _objectWithoutProperties(props, ["after", "before", "children", "className", "color", "disabled", "isClickable", "isDisabled", "isHighlighted", "isSelected", "onAfterClick", "onBeforeClick", "onClick", "size", "theme"]);

  var hasAfterClick = isFunction(onAfterClick);
  var hasBeforeClick = isFunction(onBeforeClick);
  var hasOnClick = isFunction(onClick); // Adapt color to the theme.

  var chipColor = color || (theme === Theme.light ? ColorPalette.dark : ColorPalette.light);
  var handleOnBeforeClick = useStopPropagation(onBeforeClick);
  var handleOnAfterClick = useStopPropagation(onAfterClick);
  return (// eslint-disable-next-line jsx-a11y/no-static-element-interactions
    React.createElement("a", _extends({}, forwardedProps, {
      ref: ref,
      className: classnames(className, handleBasicClasses({
        clickable: Boolean(hasOnClick) || isClickable,
        color: chipColor,
        isDisabled: isDisabled,
        hasAfter: Boolean(after),
        hasBefore: Boolean(before),
        highlighted: Boolean(isHighlighted),
        prefix: CLASSNAME,
        selected: Boolean(isSelected),
        size: size,
        unselected: Boolean(!isSelected)
      })),
      role: hasOnClick ? 'button' : undefined,
      tabIndex: isDisabled || !hasOnClick ? -1 : 0,
      "aria-disabled": hasOnClick && isDisabled || undefined,
      onClick: hasOnClick ? onClick : undefined,
      onKeyDown: hasOnClick ? onEnterPressed(onClick) : undefined
    }), before && // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions
    React.createElement("div", {
      className: classnames("".concat(CLASSNAME, "__before"), _defineProperty({}, "".concat(CLASSNAME, "__before--is-clickable"), hasBeforeClick)),
      onClick: handleOnBeforeClick
    }, before), React.createElement("div", {
      className: "".concat(CLASSNAME, "__label")
    }, children), after && // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions
    React.createElement("div", {
      className: classnames("".concat(CLASSNAME, "__after"), _defineProperty({}, "".concat(CLASSNAME, "__after--is-clickable"), hasAfterClick)),
      onClick: handleOnAfterClick
    }, after))
  );
});
Chip.displayName = COMPONENT_NAME;
Chip.className = CLASSNAME;
Chip.defaultProps = DEFAULT_PROPS;

export { Chip as C };
//# sourceMappingURL=Chip2.js.map
