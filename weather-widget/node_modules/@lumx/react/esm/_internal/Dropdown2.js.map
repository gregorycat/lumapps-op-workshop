{"version":3,"file":"Dropdown2.js","sources":["../../../src/hooks/useInfiniteScroll.tsx","../../../src/components/dropdown/Dropdown.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\n\ntype useInfiniteScrollType = (\n    ref: React.RefObject<HTMLElement>,\n    callback?: EventCallback,\n    callbackOnMount?: boolean,\n) => void;\ntype EventCallback = (evt?: Event) => void;\n\n// The error margin in px we want to have for triggering infinite scroll\nconst SCROLL_TRIGGER_MARGIN = 5;\n\n/**\n * Listen to clicks away from a given element and callback the passed in function.\n *\n * @param  ref               A reference to the element on which you want to listen scroll event.\n * @param  [callback]        A callback function to call when the bottom of the reference element is reached.\n * @param  [callbackOnMount] A callback function to call when the component is mounted.\n */\nexport const useInfiniteScroll: useInfiniteScrollType = (\n    ref,\n    callback,\n    callbackOnMount = false,\n    scrollTriggerMargin = SCROLL_TRIGGER_MARGIN,\n) => {\n    useEffect(() => {\n        const { current } = ref;\n        if (!callback || !current) {\n            return undefined;\n        }\n\n        const isAtBottom = () =>\n            Boolean(\n                current && current.scrollHeight - (current.scrollTop + current.clientHeight) <= scrollTriggerMargin,\n            );\n\n        const onScroll = (e?: Event): void => {\n            if (isAtBottom()) {\n                callback(e);\n            }\n        };\n\n        if (isAtBottom()) {\n            onScroll();\n        }\n\n        current.addEventListener('scroll', onScroll);\n        current.addEventListener('resize', onScroll);\n        return () => {\n            current.removeEventListener('scroll', onScroll);\n            current.removeEventListener('resize', onScroll);\n        };\n    }, [ref, callback, scrollTriggerMargin]);\n\n    useEffect(() => {\n        if (callback && callbackOnMount) {\n            callback();\n        }\n    }, [callback, callbackOnMount]);\n};\n","import React, { cloneElement, forwardRef, useMemo, useRef } from 'react';\n\nimport classNames from 'classnames';\n\nimport { List, ListProps } from '@lumx/react/components/list/List';\nimport { Offset, Placement, Popover } from '@lumx/react/components/popover/Popover';\nimport { useInfiniteScroll } from '@lumx/react/hooks/useInfiniteScroll';\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses, isComponent } from '@lumx/react/utils';\n\n/**\n * Defines the props of the component.\n */\nexport interface DropdownProps extends GenericProps {\n    /** Reference to the element around which the dropdown is placed.\n     * @see {@link PopoverProps#anchorRef}\n     */\n    anchorRef: React.RefObject<HTMLElement>;\n    /** Dropdown content. */\n    children: React.ReactNode;\n    /**\n     * Whether a click anywhere out of the Dropdown would close it or not.\n     * @see {@link PopoverProps#closeOnClickAway}\n     */\n    closeOnClickAway?: boolean;\n    /**\n     * Whether to close the Dropdown when clicking in it or not.\n     */\n    closeOnClick?: boolean;\n    /**\n     * Whether an escape key press would close the Dropdown or not.\n     * @see {@link PopoverProps#closeOnEscape}\n     */\n    closeOnEscape?: boolean;\n    /**\n     * Whether the dropdown should fit to the anchor width (if dropdown is smaller) or not.\n     * @see {@link PopoverProps#fitToAnchorWidth}\n     */\n    fitToAnchorWidth?: boolean;\n    /**\n     * Whether the dropdown should shrink to fit within the viewport height or not.\n     * @see {@link PopoverProps#fitWithinViewportHeight}\n     */\n    fitWithinViewportHeight?: boolean;\n    /**\n     * Whether the dropdown should be displayed or not. Useful to control the Dropdown from outside the component.\n     * @see {@link PopoverProps#isOpen}\n     */\n    isOpen: boolean;\n    /**\n     * Offset applied to the Dropdown position.\n     * @see {@link PopoverProps#offset}\n     */\n    offset?: Offset;\n    /**\n     * Preferred Dropdown placement against the anchor element.\n     * @see {@link PopoverProps#placement}\n     */\n    placement?: Placement;\n    /** Whether the focus should be set on the list when the dropdown is open or not. */\n    shouldFocusOnOpen?: boolean;\n    /**\n     * Z-axis position.\n     * @see {@link PopoverProps#zIndex}\n     */\n    zIndex?: number;\n    /**\n     * On close callback.\n     * @see {@link PopoverProps#onClose}\n     */\n    onClose?(): void;\n    /** On scroll end callback. */\n    onInfiniteScroll?(): void;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'Dropdown';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<DropdownProps> = {\n    closeOnClick: true,\n    closeOnClickAway: true,\n    closeOnEscape: true,\n    fitToAnchorWidth: true,\n    fitWithinViewportHeight: true,\n    placement: Placement.BOTTOM_START,\n    shouldFocusOnOpen: true,\n};\n\n/**\n * Dropdown component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const Dropdown: Comp<DropdownProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const {\n        anchorRef,\n        children,\n        className,\n        closeOnClick,\n        closeOnClickAway,\n        closeOnEscape,\n        fitToAnchorWidth,\n        fitWithinViewportHeight,\n        isOpen,\n        offset,\n        onClose,\n        onInfiniteScroll,\n        placement,\n        shouldFocusOnOpen,\n        zIndex,\n        ...forwardedProps\n    } = props;\n    const innerRef = useRef<HTMLDivElement>(null);\n    const listElement = useRef(null);\n\n    useInfiniteScroll(innerRef, onInfiniteScroll);\n\n    const popperElement = useMemo(() => {\n        return !Array.isArray(children) && isComponent(List)(children)\n            ? cloneElement<ListProps>(children, {\n                  ...children.props,\n                  ref: listElement,\n                  onClick(evt: MouseEvent) {\n                      children.props.onClick?.(evt);\n\n                      if (closeOnClick) {\n                          onClose?.();\n                      }\n                  },\n                  isClickable: true,\n              })\n            : children;\n    }, [children, closeOnClick, onClose]);\n\n    return isOpen ? (\n        <Popover\n            ref={ref}\n            {...forwardedProps}\n            anchorRef={anchorRef}\n            className={classNames(className, handleBasicClasses({ prefix: CLASSNAME }))}\n            elevation={0 as any}\n            closeOnClickAway={closeOnClickAway}\n            closeOnEscape={closeOnEscape}\n            fitToAnchorWidth={fitToAnchorWidth}\n            fitWithinViewportHeight={fitWithinViewportHeight}\n            focusElement={shouldFocusOnOpen ? listElement : undefined}\n            isOpen={isOpen}\n            offset={offset}\n            onClose={onClose}\n            placement={placement}\n            zIndex={zIndex}\n        >\n            <div className={`${CLASSNAME}__menu`} ref={innerRef}>\n                {popperElement}\n            </div>\n        </Popover>\n    ) : null;\n});\nDropdown.displayName = COMPONENT_NAME;\nDropdown.className = CLASSNAME;\nDropdown.defaultProps = DEFAULT_PROPS;\n"],"names":["SCROLL_TRIGGER_MARGIN","useInfiniteScroll","ref","callback","callbackOnMount","scrollTriggerMargin","useEffect","current","undefined","isAtBottom","Boolean","scrollHeight","scrollTop","clientHeight","onScroll","e","addEventListener","removeEventListener","COMPONENT_NAME","CLASSNAME","getRootClassName","DEFAULT_PROPS","closeOnClick","closeOnClickAway","closeOnEscape","fitToAnchorWidth","fitWithinViewportHeight","placement","Placement","BOTTOM_START","shouldFocusOnOpen","Dropdown","forwardRef","props","anchorRef","children","className","isOpen","offset","onClose","onInfiniteScroll","zIndex","forwardedProps","innerRef","useRef","listElement","popperElement","useMemo","Array","isArray","isComponent","List","cloneElement","onClick","evt","isClickable","classNames","handleBasicClasses","prefix","displayName","defaultProps"],"mappings":"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"}