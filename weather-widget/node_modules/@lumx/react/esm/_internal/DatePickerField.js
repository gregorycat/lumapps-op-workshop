import { Emphasis } from './components.js';
import { g as getRootClassName, b as _extends, d as classnames, _ as _defineProperty, a as _objectWithoutProperties, f as _slicedToArray } from './getRootClassName.js';
import React, { forwardRef, useState, useRef, useCallback } from 'react';
import { f as mdiChevronRight, g as mdiChevronLeft } from './mdi.js';
import 'lodash/isBoolean';
import 'lodash/isEmpty';
import 'lodash/kebabCase';
import 'lodash/noop';
import { u as useFocus, a as Popover, P as Placement } from './Popover2.js';
import { I as IconButton } from './IconButton.js';
import moment$1 from 'moment';
import range from 'lodash/range';
import { extendMoment } from 'moment-range';
import { u as useFocusTrap } from './useFocusTrap.js';
import { T as TextField } from './TextField.js';
import { T as Toolbar } from './Toolbar2.js';

/**
 * Component display name.
 */

var COMPONENT_NAME = 'DatePicker';
/**
 * Component default class name and class prefix.
 */

var CLASSNAME = getRootClassName(COMPONENT_NAME);

var moment = extendMoment(moment$1);
var DAYS_PER_WEEK = 7;

/**
 * Get the list of days in a week based on locale.
 *
 * @param  locale The locale using to generate the order of days in a week.
 * @return The list of days in a week based on locale.
 */
function getWeekDays(locale) {
  return range(DAYS_PER_WEEK).map(function (_, i) {
    return moment().locale(locale).weekday(i);
  });
}
/**
 * Get month calendar based on locale and start date.
 *
 * @param  locale        The locale using to generate the order of days in a week.
 * @param  selectedMonth The selected month.
 * @return The list of days in a week based on locale.
 */

function getMonthCalendar(locale, selectedMonth) {
  var firstDayOfMonth = moment(selectedMonth).startOf('month');
  var endDayOfMonth = moment(selectedMonth).endOf('month'); // The first day of the week depends on the locale used. In FR the first day is a monday but in EN the first day is sunday

  var firstDay = firstDayOfMonth.locale(locale).startOf('week');
  var monthRange = moment.range(firstDay.toDate(), endDayOfMonth.toDate());
  return Array.from(monthRange.by('day'));
}
/**
 * Get month calendar based on locale and start date.
 * Each day is annotated to know if they are displayed and/or clickable.
 *
 * @param  locale        The locale using to generate the order of days in a week.
 * @param  minDate       The first selectable date.
 * @param  maxDate       The last selectable date.
 * @param  selectedMonth The selected month.
 * @return The list of days in a week based on locale.
 */

function getAnnotatedMonthCalendar(locale, minDate, maxDate, selectedMonth) {
  var month = moment(selectedMonth).locale(locale).month();
  var clickableRange = moment.range(minDate, maxDate);
  return getMonthCalendar(locale, selectedMonth).map(function (date) {
    return {
      date: date,
      isClickable: clickableRange.contains(date),
      isDisplayed: date.month() === month,
      isToday: date.isSame(moment(), 'day')
    };
  });
}

/**
 * Defines the props of the component.
 */

/**
 * Component display name.
 */
var COMPONENT_NAME$1 = 'DatePickerControlled';
/**
 * DatePickerControlled component.
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */

var DatePickerControlled = forwardRef(function (props, ref) {
  var locale = props.locale,
      maxDate = props.maxDate,
      minDate = props.minDate,
      nextButtonProps = props.nextButtonProps,
      onChange = props.onChange,
      onNextMonthChange = props.onNextMonthChange,
      onPrevMonthChange = props.onPrevMonthChange,
      previousButtonProps = props.previousButtonProps,
      selectedMonth = props.selectedMonth,
      todayOrSelectedDateRef = props.todayOrSelectedDateRef,
      value = props.value;
  var days = React.useMemo(function () {
    return getAnnotatedMonthCalendar(locale, minDate, maxDate, moment$1(selectedMonth));
  }, [locale, minDate, maxDate, selectedMonth]);
  var weekDays = React.useMemo(function () {
    return getWeekDays(locale);
  }, [locale]);
  return React.createElement("div", {
    ref: ref,
    className: "".concat(CLASSNAME)
  }, React.createElement(Toolbar, {
    className: "".concat(CLASSNAME, "__toolbar"),
    after: React.createElement(IconButton, _extends({}, nextButtonProps, {
      emphasis: Emphasis.low,
      icon: mdiChevronRight,
      onClick: onNextMonthChange
    })),
    before: React.createElement(IconButton, _extends({}, previousButtonProps, {
      emphasis: Emphasis.low,
      icon: mdiChevronLeft,
      onClick: onPrevMonthChange
    })),
    label: React.createElement("span", {
      className: "".concat(CLASSNAME, "__month")
    }, moment$1(selectedMonth).locale(locale).format('MMMM YYYY'))
  }), React.createElement("div", {
    className: "".concat(CLASSNAME, "__calendar")
  }, React.createElement("div", {
    className: "".concat(CLASSNAME, "__week-days ").concat(CLASSNAME, "__days-wrapper")
  }, weekDays.map(function (weekDay) {
    return React.createElement("div", {
      key: weekDay.unix(),
      className: "".concat(CLASSNAME, "__day-wrapper")
    }, React.createElement("span", {
      className: "".concat(CLASSNAME, "__week-day")
    }, weekDay.format('dddd').slice(0, 1).toLocaleUpperCase()));
  })), React.createElement("div", {
    className: "".concat(CLASSNAME, "__month-days ").concat(CLASSNAME, "__days-wrapper")
  }, days.map(function (annotatedDate) {
    if (annotatedDate.isDisplayed) {
      var _classNames;

      return React.createElement("div", {
        key: annotatedDate.date.unix(),
        className: "".concat(CLASSNAME, "__day-wrapper")
      }, React.createElement("button", {
        ref: value && annotatedDate.date.isSame(value, 'day') || !value && annotatedDate.isToday ? todayOrSelectedDateRef : null,
        className: classnames("".concat(CLASSNAME, "__month-day"), (_classNames = {}, _defineProperty(_classNames, "".concat(CLASSNAME, "__month-day--is-selected"), value && annotatedDate.date.isSame(value, 'day')), _defineProperty(_classNames, "".concat(CLASSNAME, "__month-day--is-today"), annotatedDate.isClickable && annotatedDate.isToday), _classNames)),
        disabled: !annotatedDate.isClickable,
        type: "button",
        onClick: function onClick() {
          return onChange(moment$1(annotatedDate.date).toDate());
        }
      }, React.createElement("span", null, annotatedDate.date.format('DD'))));
    }

    return React.createElement("div", {
      key: annotatedDate.date.unix(),
      className: "".concat(CLASSNAME, "__day-wrapper")
    });
  }))));
});
DatePickerControlled.displayName = COMPONENT_NAME$1;
DatePickerControlled.className = CLASSNAME;

/**
 * DatePicker component.
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */
var DatePicker = forwardRef(function (props, ref) {
  var defaultMonth = props.defaultMonth,
      locale = props.locale,
      value = props.value,
      onChange = props.onChange,
      forwardedProps = _objectWithoutProperties(props, ["defaultMonth", "locale", "value", "onChange"]);

  var castedValue;

  if (value) {
    castedValue = moment$1(value);
  } else if (defaultMonth) {
    castedValue = moment$1(defaultMonth);
  }

  if (castedValue && !castedValue.isValid()) {
    // eslint-disable-next-line no-console
    console.warn("[@lumx/react/DatePicker] Invalid date provided ".concat(castedValue));
  }

  var selectedDay = castedValue && castedValue.isValid() ? castedValue : moment$1();

  var _useState = useState(0),
      _useState2 = _slicedToArray(_useState, 2),
      monthOffset = _useState2[0],
      setMonthOffset = _useState2[1];

  var setPrevMonth = function setPrevMonth() {
    return setMonthOffset(monthOffset - 1);
  };

  var setNextMonth = function setNextMonth() {
    return setMonthOffset(monthOffset + 1);
  };

  var onDatePickerChange = function onDatePickerChange(newDate) {
    onChange(newDate);
    setMonthOffset(0);
  };

  var selectedMonth = moment$1(selectedDay).locale(locale).add(monthOffset, 'months').toDate();
  return React.createElement(DatePickerControlled, _extends({
    ref: ref
  }, forwardedProps, {
    defaultMonth: defaultMonth,
    locale: locale,
    value: value,
    onPrevMonthChange: setPrevMonth,
    onNextMonthChange: setNextMonth,
    selectedMonth: selectedMonth,
    onChange: onDatePickerChange
  }));
});
DatePicker.displayName = COMPONENT_NAME;
DatePicker.className = CLASSNAME;

/**
 * Component display name.
 */
var COMPONENT_NAME$2 = 'DatePickerField';
/**
 * DatePickerField component.
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */

var DatePickerField = forwardRef(function (props, ref) {
  var defaultMonth = props.defaultMonth,
      disabled = props.disabled,
      _props$isDisabled = props.isDisabled,
      isDisabled = _props$isDisabled === void 0 ? disabled : _props$isDisabled,
      locale = props.locale,
      maxDate = props.maxDate,
      minDate = props.minDate,
      name = props.name,
      nextButtonProps = props.nextButtonProps,
      onChange = props.onChange,
      previousButtonProps = props.previousButtonProps,
      value = props.value,
      forwardedProps = _objectWithoutProperties(props, ["defaultMonth", "disabled", "isDisabled", "locale", "maxDate", "minDate", "name", "nextButtonProps", "onChange", "previousButtonProps", "value"]);

  var wrapperRef = useRef(null);
  var anchorRef = useRef(null);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isOpen = _useState2[0],
      setIsOpen = _useState2[1];

  var toggleSimpleMenu = function toggleSimpleMenu() {
    setIsOpen(!isOpen);
  };

  var onClose = useCallback(function () {
    setIsOpen(false);
  }, []);
  useFocus(anchorRef.current, isOpen);

  var handleKeyboardNav = function handleKeyboardNav(evt) {
    if ((evt.key === 'Enter' || evt.key === ' ') && toggleSimpleMenu) {
      toggleSimpleMenu();
    }
  }; // Handle focus trap.


  var todayOrSelectedDateRef = useRef(null);
  useFocusTrap(todayOrSelectedDateRef.current && wrapperRef.current, todayOrSelectedDateRef.current);

  var onTextFieldChange = function onTextFieldChange(textFieldValue, textFieldName, event) {
    if (!textFieldValue) {
      onChange(undefined, textFieldName, event);
    }
  };

  var onDatePickerChange = function onDatePickerChange(newDate) {
    onChange(newDate, name);
    onClose();
  };

  return React.createElement(React.Fragment, null, React.createElement(TextField, _extends({
    ref: ref
  }, forwardedProps, {
    name: name,
    forceFocusStyle: isOpen,
    textFieldRef: anchorRef,
    value: value ? moment$1(value).locale(locale).format('LL') : '',
    onClick: toggleSimpleMenu,
    onChange: onTextFieldChange,
    onKeyPress: handleKeyboardNav,
    isDisabled: isDisabled,
    readOnly: true
  })), isOpen ? React.createElement(Popover, {
    anchorRef: anchorRef,
    placement: Placement.BOTTOM_START,
    isOpen: isOpen,
    onClose: onClose,
    closeOnClickAway: true,
    closeOnEscape: true
  }, React.createElement("div", {
    ref: wrapperRef
  }, React.createElement(DatePicker, {
    locale: locale,
    maxDate: maxDate,
    minDate: minDate,
    value: value,
    onChange: onDatePickerChange,
    todayOrSelectedDateRef: todayOrSelectedDateRef,
    defaultMonth: defaultMonth,
    nextButtonProps: nextButtonProps,
    previousButtonProps: previousButtonProps
  }))) : null);
});
DatePickerField.displayName = COMPONENT_NAME$2;

export { DatePicker as D, DatePickerControlled as a, DatePickerField as b };
//# sourceMappingURL=DatePickerField.js.map
