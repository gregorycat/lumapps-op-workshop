{"version":3,"file":"partitionMulti.js","sources":["../../../src/utils/partitionMulti.ts"],"sourcesContent":["import concat from 'lodash/concat';\nimport dropRight from 'lodash/dropRight';\nimport last from 'lodash/last';\nimport partition from 'lodash/partition';\nimport reduce from 'lodash/reduce';\nimport { Predicate } from './type';\n\n/**\n * Similar to lodash `partition` function but working with multiple predicates.\n *\n * @example\n * const isString = (s) => typeof s === 'string'\n * const isNumber = (s) => typeof s === 'number'\n * const [strings, numbers, others] = partitionMulti(['a', 1, 'b', false], [isString, isNumber])\n * //=> [['a', 'b'], [1], [false]]\n *\n * @param  elements array of elements\n * @param  predicates array of predicates to apply on elements\n * @return partitioned elements by the given predicates\n */\nexport function partitionMulti<T>(elements: T[], predicates: Array<Predicate<T>>): T[][] {\n    return reduce(\n        predicates,\n        (partitioned: T[][], predicate: Predicate<T>) =>\n            concat(dropRight(partitioned), partition(last(partitioned), predicate)),\n        [elements],\n    );\n}\n"],"names":["partitionMulti","elements","predicates","reduce","partitioned","predicate","concat","dropRight","partition","last"],"mappings":";;;;;;AAOA;;;;;;;;;;;;;AAaO,SAASA,cAAT,CAA2BC,QAA3B,EAA0CC,UAA1C,EAAkF;AACrF,SAAOC,MAAM,CACTD,UADS,EAET,UAACE,WAAD,EAAqBC,SAArB;AAAA,WACIC,MAAM,CAACC,SAAS,CAACH,WAAD,CAAV,EAAyBI,SAAS,CAACC,IAAI,CAACL,WAAD,CAAL,EAAoBC,SAApB,CAAlC,CADV;AAAA,GAFS,EAIT,CAACJ,QAAD,CAJS,CAAb;AAMH;;;;"}