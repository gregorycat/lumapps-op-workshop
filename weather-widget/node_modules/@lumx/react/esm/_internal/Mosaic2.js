import { Alignment, AspectRatio, Theme } from './components.js';
import { g as getRootClassName, a as _objectWithoutProperties, b as _extends, d as classnames, h as handleBasicClasses, _ as _defineProperty } from './getRootClassName.js';
import React, { forwardRef, useMemo } from 'react';
import take from 'lodash/take';
import { T as Thumbnail } from './Thumbnail2.js';

/**
 * Defines the props of the component.
 */

/**
 * Component display name.
 */
var COMPONENT_NAME = 'Mosaic';
/**
 * Component default class name and class prefix.
 */

var CLASSNAME = getRootClassName(COMPONENT_NAME);
/**
 * Component default props.
 */

var DEFAULT_PROPS = {
  theme: Theme.light
};
/**
 * Mosaic component.
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */

var Mosaic = forwardRef(function (props, ref) {
  var _classNames;

  var className = props.className,
      theme = props.theme,
      thumbnails = props.thumbnails,
      onImageClick = props.onImageClick,
      forwardedProps = _objectWithoutProperties(props, ["className", "theme", "thumbnails", "onImageClick"]);

  var handleImageClick = useMemo(function () {
    if (!onImageClick) return undefined;
    return function (index, onClick) {
      return function (event) {
        onClick === null || onClick === void 0 ? void 0 : onClick(event);
        onImageClick === null || onImageClick === void 0 ? void 0 : onImageClick(index);
      };
    };
  }, [onImageClick]);
  return React.createElement("div", _extends({
    ref: ref
  }, forwardedProps, {
    className: classnames(className, handleBasicClasses({
      prefix: CLASSNAME,
      theme: theme
    }), (_classNames = {}, _defineProperty(_classNames, "".concat(CLASSNAME, "--has-1-thumbnail"), (thumbnails === null || thumbnails === void 0 ? void 0 : thumbnails.length) === 1), _defineProperty(_classNames, "".concat(CLASSNAME, "--has-2-thumbnails"), (thumbnails === null || thumbnails === void 0 ? void 0 : thumbnails.length) === 2), _defineProperty(_classNames, "".concat(CLASSNAME, "--has-3-thumbnails"), (thumbnails === null || thumbnails === void 0 ? void 0 : thumbnails.length) === 3), _defineProperty(_classNames, "".concat(CLASSNAME, "--has-4-thumbnails"), (thumbnails === null || thumbnails === void 0 ? void 0 : thumbnails.length) >= 4), _classNames))
  }), React.createElement("div", {
    className: "".concat(CLASSNAME, "__wrapper")
  }, take(thumbnails, 4).map(function (thumbnail, index) {
    var image = thumbnail.image,
        onClick = thumbnail.onClick,
        align = thumbnail.align,
        thumbnailProps = _objectWithoutProperties(thumbnail, ["image", "onClick", "align"]);

    return React.createElement("div", {
      key: index,
      className: "".concat(CLASSNAME, "__thumbnail")
    }, React.createElement(Thumbnail, _extends({}, thumbnailProps, {
      align: align || Alignment.left,
      image: image,
      theme: theme,
      aspectRatio: AspectRatio.free,
      fillHeight: true,
      onClick: (handleImageClick === null || handleImageClick === void 0 ? void 0 : handleImageClick(index, onClick)) || onClick
    })), thumbnails.length > 4 && index === 3 && React.createElement("div", {
      className: "".concat(CLASSNAME, "__overlay")
    }, React.createElement("span", null, "+", thumbnails.length - 4)));
  })));
});
Mosaic.displayName = COMPONENT_NAME;
Mosaic.className = CLASSNAME;
Mosaic.defaultProps = DEFAULT_PROPS;

export { Mosaic as M };
//# sourceMappingURL=Mosaic2.js.map
