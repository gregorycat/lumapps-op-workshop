import { Alignment, Theme, Size } from './components.js';
import { a as _objectWithoutProperties, f as _slicedToArray, i as _toConsumableArray, b as _extends, d as classnames, h as handleBasicClasses, C as CSS_PREFIX } from './getRootClassName.js';
import React, { useReducer, useEffect, forwardRef, useCallback } from 'react';
import { m as mergeRefs } from './mergeRefs.js';
import { I as Icon } from './Icon2.js';
import { r as reducer, I as INIT_STATE, T as TabProviderContext, u as useRovingTabIndex, b as useTabProviderContext } from './useRovingTabIndex.js';

var DEFAULT_PROPS = {
  isLazy: INIT_STATE.isLazy,
  shouldActivateOnFocus: INIT_STATE.shouldActivateOnFocus
};
/**
 * This component provides a context in which tabs can be defined and linked to their tab panel.
 *
 * It does not produce any markup so you can wrap it around any React elements and then split the TabList and TabPanel
 * components in the react tree.
 *
 * @param  props React component props.
 * @return React element.
 */

var TabProvider = function TabProvider(props) {
  var children = props.children,
      onChange = props.onChange,
      propState = _objectWithoutProperties(props, ["children", "onChange"]);

  var _useReducer = useReducer(reducer, INIT_STATE),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      state = _useReducer2[0],
      dispatch = _useReducer2[1]; // On prop state change => dispatch update.


  useEffect(function () {
    dispatch({
      type: 'update',
      payload: propState
    });
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  [dispatch].concat(_toConsumableArray(Object.values(propState)))); // On active tab index state change => send update to the onChange.

  useEffect(function () {
    if (state === INIT_STATE || !onChange || propState.activeTabIndex === state.activeTabIndex) {
      return;
    }

    onChange(state.activeTabIndex);
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  [onChange, state.activeTabIndex]);
  return React.createElement(TabProviderContext.Provider, {
    value: [state, dispatch]
  }, children);
};
TabProvider.defaultProps = DEFAULT_PROPS;

var TabListLayout;
/**
 * Defines the props of the component.
 */

(function (TabListLayout) {
  TabListLayout["clustered"] = "clustered";
  TabListLayout["fixed"] = "fixed";
})(TabListLayout || (TabListLayout = {}));

/**
 * Component display name.
 */
var COMPONENT_NAME = 'TabList';
/**
 * Component default class name and class prefix.
 */

var CLASSNAME = "".concat(CSS_PREFIX, "-tabs");
/**
 * Component default props.
 */

var DEFAULT_PROPS$1 = {
  layout: TabListLayout.fixed,
  position: Alignment.left,
  theme: Theme.light
};
/**
 * TabList component.
 *
 * Implements WAI-ARIA `tablist` role {@see https://www.w3.org/TR/wai-aria-practices-1.1/examples/tabs/tabs-1/tabs.html#rps_label}
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */

var TabList = forwardRef(function (props, ref) {
  var ariaLabel = props['aria-label'],
      children = props.children,
      className = props.className,
      layout = props.layout,
      position = props.position,
      theme = props.theme,
      forwardedProps = _objectWithoutProperties(props, ["aria-label", "children", "className", "layout", "position", "theme"]);

  var tabListRef = React.useRef(null);
  useRovingTabIndex({
    parentRef: tabListRef,
    elementSelector: '[role="tab"]',
    keepTabIndex: false,
    extraDependencies: [children]
  });
  return React.createElement("div", _extends({
    ref: mergeRefs(ref, tabListRef)
  }, forwardedProps, {
    className: classnames(className, handleBasicClasses({
      prefix: CLASSNAME,
      layout: layout,
      position: position,
      theme: theme
    }))
  }), React.createElement("div", {
    className: "".concat(CLASSNAME, "__links"),
    role: "tablist",
    "aria-label": ariaLabel
  }, children));
});
TabList.displayName = COMPONENT_NAME;
TabList.className = CLASSNAME;
TabList.defaultProps = DEFAULT_PROPS$1;

/**
 * Defines the props of the component.
 */

/**
 * Component display name.
 */
var COMPONENT_NAME$1 = 'Tab';
/**
 * Component default class name and class prefix.
 */

var CLASSNAME$1 = "".concat(CSS_PREFIX, "-tabs__link");
/**
 * Component default props.
 */

var DEFAULT_PROPS$2 = {};
/**
 * Tab component.
 *
 * Implements WAI-ARIA `tab` role {@see https://www.w3.org/TR/wai-aria-practices-1.1/examples/tabs/tabs-1/tabs.html#rps_label}
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */

var Tab = forwardRef(function (props, ref) {
  var className = props.className,
      disabled = props.disabled,
      icon = props.icon,
      id = props.id,
      propIsActive = props.isActive,
      _props$isDisabled = props.isDisabled,
      isDisabled = _props$isDisabled === void 0 ? disabled : _props$isDisabled,
      label = props.label,
      onFocus = props.onFocus,
      onKeyPress = props.onKeyPress,
      _props$tabIndex = props.tabIndex,
      tabIndex = _props$tabIndex === void 0 ? -1 : _props$tabIndex,
      forwardedProps = _objectWithoutProperties(props, ["className", "disabled", "icon", "id", "isActive", "isDisabled", "label", "onFocus", "onKeyPress", "tabIndex"]);

  var state = useTabProviderContext('tab', id);
  var isActive = propIsActive || (state === null || state === void 0 ? void 0 : state.isActive);
  var changeToCurrentTab = useCallback(function () {
    if (isDisabled) {
      return;
    }

    state === null || state === void 0 ? void 0 : state.changeToTab();
  }, [isDisabled, state]);
  var handleFocus = useCallback(function (event) {
    onFocus === null || onFocus === void 0 ? void 0 : onFocus(event);

    if (state === null || state === void 0 ? void 0 : state.shouldActivateOnFocus) {
      changeToCurrentTab();
    }
  }, [changeToCurrentTab, onFocus, state === null || state === void 0 ? void 0 : state.shouldActivateOnFocus]);
  var handleKeyPress = useCallback(function (event) {
    onKeyPress === null || onKeyPress === void 0 ? void 0 : onKeyPress(event);

    if (event.key !== 'Enter') {
      return;
    }

    changeToCurrentTab();
  }, [changeToCurrentTab, onKeyPress]);
  return React.createElement("button", _extends({
    ref: ref
  }, forwardedProps, {
    type: "button",
    id: state === null || state === void 0 ? void 0 : state.tabId,
    className: classnames(className, handleBasicClasses({
      prefix: CLASSNAME$1,
      isActive: isActive,
      isDisabled: isDisabled
    })),
    onClick: changeToCurrentTab,
    onKeyPress: handleKeyPress,
    onFocus: handleFocus,
    role: "tab",
    tabIndex: isActive ? 0 : tabIndex,
    "aria-disabled": isDisabled,
    "aria-selected": isActive,
    "aria-controls": state === null || state === void 0 ? void 0 : state.tabPanelId
  }), icon && React.createElement(Icon, {
    icon: icon,
    size: Size.xs
  }), label && React.createElement("span", null, label));
});
Tab.displayName = COMPONENT_NAME$1;
Tab.className = CLASSNAME$1;
Tab.defaultProps = DEFAULT_PROPS$2;

/**
 * Defines the props of the component.
 */

/**
 * Component display name.
 */
var COMPONENT_NAME$2 = 'TabPanel';
/**
 * Component default class name and class prefix.
 */

var CLASSNAME$2 = "".concat(CSS_PREFIX, "-tab-panel");
/**
 * Component default props.
 */

var DEFAULT_PROPS$3 = {};
/**
 * TabPanel component.
 *
 * Implements WAI-ARIA `tabpanel` role {@see https://www.w3.org/TR/wai-aria-practices-1.1/examples/tabs/tabs-1/tabs.html#rps_label}
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */

var TabPanel = forwardRef(function (props, ref) {
  var children = props.children,
      id = props.id,
      className = props.className,
      propIsActive = props.isActive,
      forwardedProps = _objectWithoutProperties(props, ["children", "id", "className", "isActive"]);

  var state = useTabProviderContext('tabPanel', id);
  var isActive = propIsActive || (state === null || state === void 0 ? void 0 : state.isActive);
  return React.createElement("div", _extends({
    ref: ref
  }, forwardedProps, {
    id: state === null || state === void 0 ? void 0 : state.tabPanelId,
    className: classnames(className, handleBasicClasses({
      prefix: CLASSNAME$2,
      isActive: isActive
    })),
    role: "tabpanel",
    tabIndex: 0,
    "aria-labelledby": state === null || state === void 0 ? void 0 : state.tabId
  }), (!(state === null || state === void 0 ? void 0 : state.isLazy) || isActive) && children);
});
TabPanel.displayName = COMPONENT_NAME$2;
TabPanel.className = CLASSNAME$2;
TabPanel.defaultProps = DEFAULT_PROPS$3;

export { TabProvider as T, TabListLayout as a, TabList as b, Tab as c, TabPanel as d };
//# sourceMappingURL=TabPanel.js.map
