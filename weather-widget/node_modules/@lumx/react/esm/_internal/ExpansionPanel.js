import { Emphasis, Theme, ColorPalette } from './components.js';
import { g as getRootClassName, a as _objectWithoutProperties, f as _slicedToArray, d as classnames, h as handleBasicClasses, b as _extends } from './getRootClassName.js';
import React, { forwardRef, Children, useRef, useState, useEffect } from 'react';
import { i as mdiChevronUp, j as mdiChevronDown } from './mdi.js';
import isEmpty from 'lodash/isEmpty';
import { p as partitionMulti } from './partitionMulti.js';
import get from 'lodash/get';
import { i as isComponent } from './type.js';
import { I as IconButton } from './IconButton.js';
import isFunction from 'lodash/isFunction';
import { D as DragHandle } from './DragHandle.js';

/**
 * Defines the props of the component.
 */

/**
 * Component display name.
 */
var COMPONENT_NAME = 'ExpansionPanel';
/**
 * Component default class name and class prefix.
 */

var CLASSNAME = getRootClassName(COMPONENT_NAME);
/**
 * Component default props.
 */

var DEFAULT_PROPS = {
  theme: Theme.light
};
var isDragHandle = isComponent(DragHandle);
var isHeader = isComponent('header');
var isFooter = isComponent('footer');
/**
 * ExpansionPanel component.
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */

var ExpansionPanel = forwardRef(function (props, ref) {
  var className = props.className,
      anyChildren = props.children,
      hasBackground = props.hasBackground,
      hasHeaderDivider = props.hasHeaderDivider,
      isOpen = props.isOpen,
      label = props.label,
      onClose = props.onClose,
      onOpen = props.onOpen,
      onToggleOpen = props.onToggleOpen,
      theme = props.theme,
      toggleButtonProps = props.toggleButtonProps,
      forwardedProps = _objectWithoutProperties(props, ["className", "children", "hasBackground", "hasHeaderDivider", "isOpen", "label", "onClose", "onOpen", "onToggleOpen", "theme", "toggleButtonProps"]);

  var children = Children.toArray(anyChildren); // Partition children by types.

  var _partitionMulti = partitionMulti(children, [isDragHandle, isHeader, isFooter]),
      _partitionMulti2 = _slicedToArray(_partitionMulti, 4),
      _partitionMulti2$ = _slicedToArray(_partitionMulti2[0], 1),
      dragHandle = _partitionMulti2$[0],
      _partitionMulti2$2 = _slicedToArray(_partitionMulti2[1], 1),
      header = _partitionMulti2$2[0],
      _partitionMulti2$3 = _slicedToArray(_partitionMulti2[2], 1),
      footer = _partitionMulti2$3[0],
      content = _partitionMulti2[3]; // Either take the header in children or create one with the label.


  var headerProps = React.isValidElement(header) ? header.props : {};
  var headerContent = !isEmpty(headerProps.children) ? headerProps.children : React.createElement("span", {
    className: "".concat(CLASSNAME, "__label")
  }, label);

  var toggleOpen = function toggleOpen() {
    var shouldOpen = !isOpen;

    if (isFunction(onOpen) && shouldOpen) {
      onOpen();
    }

    if (isFunction(onClose) && !shouldOpen) {
      onClose();
    }

    if (isFunction(onToggleOpen)) {
      onToggleOpen(shouldOpen);
    }
  };

  var color = theme === Theme.dark ? ColorPalette.light : ColorPalette.dark;
  var rootClassName = classnames(className, handleBasicClasses({
    hasBackground: hasBackground,
    hasHeader: Boolean(!isEmpty(headerProps.children)),
    hasHeaderDivider: hasHeaderDivider,
    isClose: !isOpen,
    isDraggable: Boolean(dragHandle),
    isOpen: isOpen,
    prefix: CLASSNAME,
    theme: theme
  }));
  var wrapperRef = useRef(null);

  var isContentVisible = function isContentVisible() {
    return get(wrapperRef.current, 'clientHeight', 0) > 0;
  }; // Switch max height on/off to activate the CSS transition (updates when children changes).


  var _useState = useState('0'),
      _useState2 = _slicedToArray(_useState, 2),
      maxHeight = _useState2[0],
      setMaxHeight = _useState2[1];

  useEffect(function () {
    var height = isOpen ? get(wrapperRef.current, 'offsetHeight', 0) : 0;
    setMaxHeight("".concat(height, "px"));
  }, [children, isOpen]);
  return React.createElement("section", _extends({
    ref: ref
  }, forwardedProps, {
    className: rootClassName
  }), React.createElement("header", {
    className: "".concat(CLASSNAME, "__header"),
    onClick: toggleOpen
  }, dragHandle && React.createElement("div", {
    className: "".concat(CLASSNAME, "__header-drag")
  }, dragHandle), React.createElement("div", _extends({}, headerProps, {
    className: "".concat(CLASSNAME, "__header-content")
  }), headerContent), React.createElement("div", {
    className: "".concat(CLASSNAME, "__header-toggle")
  }, React.createElement(IconButton, _extends({}, toggleButtonProps, {
    color: color,
    emphasis: Emphasis.low,
    icon: isOpen ? mdiChevronUp : mdiChevronDown
  })))), (isOpen || isContentVisible()) && React.createElement("div", {
    className: "".concat(CLASSNAME, "__wrapper"),
    style: {
      maxHeight: maxHeight
    }
  }, React.createElement("div", {
    className: "".concat(CLASSNAME, "__container"),
    ref: wrapperRef
  }, React.createElement("div", {
    className: "".concat(CLASSNAME, "__content")
  }, content), footer && React.createElement("div", {
    className: "".concat(CLASSNAME, "__footer")
  }, footer))));
});
ExpansionPanel.displayName = COMPONENT_NAME;
ExpansionPanel.className = CLASSNAME;
ExpansionPanel.defaultProps = DEFAULT_PROPS;

export { ExpansionPanel as E };
//# sourceMappingURL=ExpansionPanel.js.map
