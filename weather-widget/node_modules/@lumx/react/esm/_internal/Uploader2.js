import { Size, AspectRatio, Theme } from './components.js';
import { g as getRootClassName, a as _objectWithoutProperties, b as _extends, d as classnames, h as handleBasicClasses } from './getRootClassName.js';
import React, { forwardRef } from 'react';
import { I as Icon } from './Icon2.js';

/**
 * Uploader variants.
 */

var UploaderVariant = {
  square: 'square',
  rounded: 'rounded',
  circle: 'circle'
};

/**
 * Component display name.
 */
var COMPONENT_NAME = 'Uploader';
/**
 * Component default class name and class prefix.
 */

var CLASSNAME = getRootClassName(COMPONENT_NAME);
/**
 * Component default props.
 */

var DEFAULT_PROPS = {
  aspectRatio: AspectRatio.horizontal,
  size: Size.xl,
  theme: Theme.light,
  variant: UploaderVariant.square
};
/**
 * Uploader component.
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */

var Uploader = forwardRef(function (props, ref) {
  var aspectRatio = props.aspectRatio,
      className = props.className,
      label = props.label,
      icon = props.icon,
      size = props.size,
      theme = props.theme,
      variant = props.variant,
      forwardedProps = _objectWithoutProperties(props, ["aspectRatio", "className", "label", "icon", "size", "theme", "variant"]); // Adjust to square aspect ratio when using circle variants.


  var adjustedAspectRatio = variant === UploaderVariant.circle ? AspectRatio.square : aspectRatio;
  return React.createElement("div", _extends({
    ref: ref
  }, forwardedProps, {
    className: classnames(className, handleBasicClasses({
      aspectRatio: adjustedAspectRatio,
      prefix: CLASSNAME,
      size: size,
      theme: theme,
      variant: variant
    }))
  }), React.createElement("div", {
    className: "".concat(CLASSNAME, "__background")
  }), React.createElement("div", {
    className: "".concat(CLASSNAME, "__wrapper")
  }, icon && React.createElement("div", {
    className: "".concat(CLASSNAME, "__icon")
  }, React.createElement(Icon, {
    icon: icon,
    size: Size.s
  })), label && React.createElement("span", {
    className: "".concat(CLASSNAME, "__label")
  }, label)));
});
Uploader.displayName = COMPONENT_NAME;
Uploader.className = CLASSNAME;
Uploader.defaultProps = DEFAULT_PROPS;

export { UploaderVariant as U, Uploader as a };
//# sourceMappingURL=Uploader2.js.map
