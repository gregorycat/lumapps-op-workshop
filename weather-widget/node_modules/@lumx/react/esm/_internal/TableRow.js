import { Theme, Size } from './components.js';
import { g as getRootClassName, a as _objectWithoutProperties, b as _extends, d as classnames, h as handleBasicClasses, _ as _defineProperty, o as onEnterPressed } from './getRootClassName.js';
import React, { forwardRef, useCallback } from 'react';
import { p as mdiArrowUp, q as mdiArrowDown } from './mdi.js';
import isFunction from 'lodash/isFunction';
import { I as Icon } from './Icon2.js';

/**
 * Defines the props of the component.
 */

/**
 * Component display name.
 */
var COMPONENT_NAME = 'Table';
/**
 * Component default class name and class prefix.
 */

var CLASSNAME = getRootClassName(COMPONENT_NAME);
/**
 * Component default props.
 */

var DEFAULT_PROPS = {
  theme: Theme.light
};
/**
 * Table component.
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */

var Table = forwardRef(function (props, ref) {
  var children = props.children,
      className = props.className,
      hasBefore = props.hasBefore,
      hasDividers = props.hasDividers,
      theme = props.theme,
      forwardedProps = _objectWithoutProperties(props, ["children", "className", "hasBefore", "hasDividers", "theme"]);

  return React.createElement("table", _extends({
    ref: ref
  }, forwardedProps, {
    className: classnames(className, handleBasicClasses({
      prefix: CLASSNAME,
      hasBefore: hasBefore,
      hasDividers: hasDividers,
      theme: theme
    }))
  }), children);
});
Table.displayName = COMPONENT_NAME;
Table.className = CLASSNAME;
Table.defaultProps = DEFAULT_PROPS;

/**
 * Defines the props of the component.
 */

/**
 * Component display name.
 */
var COMPONENT_NAME$1 = 'TableBody';
/**
 * Component default class name and class prefix.
 */

var CLASSNAME$1 = getRootClassName(COMPONENT_NAME$1, true);
/**
 * TableBody component.
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */

var TableBody = forwardRef(function (props, ref) {
  var children = props.children,
      className = props.className,
      forwardedProps = _objectWithoutProperties(props, ["children", "className"]);

  return React.createElement("tbody", _extends({
    ref: ref
  }, forwardedProps, {
    className: classnames(className, handleBasicClasses({
      prefix: CLASSNAME$1
    }))
  }), children);
});
TableBody.displayName = COMPONENT_NAME$1;
TableBody.className = CLASSNAME$1;

/**
 * Table head cell sort order.
 */

var ThOrder = {
  asc: 'asc',
  desc: 'desc'
};

/**
 * Table cell variants.
 */
var TableCellVariant = {
  body: 'body',
  head: 'head'
};

/**
 * Component display name.
 */
var COMPONENT_NAME$2 = 'TableCell';
/**
 * Component default class name and class prefix.
 */

var CLASSNAME$2 = getRootClassName(COMPONENT_NAME$2, true);
/**
 * Component default props.
 */

var DEFAULT_PROPS$1 = {
  variant: TableCellVariant.body
};
/**
 * TableCell component.
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */

var TableCell = forwardRef(function (props, ref) {
  var children = props.children,
      className = props.className,
      icon = props.icon,
      isSortable = props.isSortable,
      onHeaderClick = props.onHeaderClick,
      sortOrder = props.sortOrder,
      variant = props.variant,
      forwardedProps = _objectWithoutProperties(props, ["children", "className", "icon", "isSortable", "onHeaderClick", "sortOrder", "variant"]);
  /**
   * Handle click on the ordered thead.
   */


  var handleOnHeaderClick = useCallback(function () {
    if (isFunction(onHeaderClick)) {
      onHeaderClick();
    }
  }, [onHeaderClick]);
  return React.createElement(React.Fragment, null, variant === TableCellVariant.head && React.createElement("th", _extends({
    ref: ref
  }, forwardedProps, {
    className: classnames(handleBasicClasses({
      prefix: CLASSNAME$2,
      isSortable: isSortable
    }), className, "".concat(CLASSNAME$2, "--head"), _defineProperty({}, "".concat(CLASSNAME$2, "--is-sorted"), isSortable && sortOrder)),
    tabIndex: isSortable && isFunction(onHeaderClick) ? 0 : -1,
    onClick: handleOnHeaderClick,
    onKeyDown: onEnterPressed(handleOnHeaderClick)
  }), React.createElement("div", {
    className: "".concat(CLASSNAME$2, "-wrapper")
  }, icon && !isSortable && React.createElement(Icon, {
    className: "".concat(CLASSNAME$2, "-icon"),
    icon: icon,
    size: Size.xxs
  }), isSortable && sortOrder === ThOrder.asc && React.createElement(Icon, {
    className: "".concat(CLASSNAME$2, "-icon"),
    icon: mdiArrowUp,
    size: Size.xxs
  }), isSortable && sortOrder === ThOrder.desc && React.createElement(Icon, {
    className: "".concat(CLASSNAME$2, "-icon"),
    icon: mdiArrowDown,
    size: Size.xxs
  }), React.createElement("div", {
    className: "".concat(CLASSNAME$2, "-content")
  }, children))), variant === TableCellVariant.body && React.createElement("td", _extends({}, forwardedProps, {
    className: classnames(className, handleBasicClasses({
      prefix: CLASSNAME$2
    }), "".concat(CLASSNAME$2, "--body"))
  }), React.createElement("div", {
    className: "".concat(CLASSNAME$2, "-content")
  }, children)));
});
TableCell.displayName = COMPONENT_NAME$2;
TableCell.className = CLASSNAME$2;
TableCell.defaultProps = DEFAULT_PROPS$1;

/**
 * Defines the props of the component.
 */

/**
 * Component display name.
 */
var COMPONENT_NAME$3 = 'TableHeader';
/**
 * Component default class name and class prefix.
 */

var CLASSNAME$3 = getRootClassName(COMPONENT_NAME$3, true);
/**
 * Component default props.
 */

var DEFAULT_PROPS$2 = {};
/**
 * TableHeader component.
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */

var TableHeader = forwardRef(function (props, ref) {
  var children = props.children,
      className = props.className,
      forwardedProps = _objectWithoutProperties(props, ["children", "className"]);

  return React.createElement("thead", _extends({
    ref: ref
  }, forwardedProps, {
    className: classnames(className, handleBasicClasses({
      prefix: CLASSNAME$3
    }))
  }), children);
});
TableHeader.displayName = COMPONENT_NAME$3;
TableHeader.className = CLASSNAME$3;
TableHeader.defaultProps = DEFAULT_PROPS$2;

/**
 * Defines the props of the component.
 */

/**
 * Component display name.
 */
var COMPONENT_NAME$4 = 'TableRow';
/**
 * Component default class name and class prefix.
 */

var CLASSNAME$4 = getRootClassName(COMPONENT_NAME$4, true);
/**
 * Component default props.
 */

var DEFAULT_PROPS$3 = {};
/**
 * TableRow component.
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */

var TableRow = forwardRef(function (props, ref) {
  var children = props.children,
      className = props.className,
      disabled = props.disabled,
      isClickable = props.isClickable,
      _props$isDisabled = props.isDisabled,
      isDisabled = _props$isDisabled === void 0 ? disabled : _props$isDisabled,
      isSelected = props.isSelected,
      forwardedProps = _objectWithoutProperties(props, ["children", "className", "disabled", "isClickable", "isDisabled", "isSelected"]);

  return React.createElement("tr", _extends({
    ref: ref,
    tabIndex: isClickable && !isDisabled ? 0 : -1
  }, forwardedProps, {
    className: classnames(className, handleBasicClasses({
      isClickable: isClickable && !isDisabled,
      isDisabled: isDisabled,
      isSelected: isSelected && !isDisabled,
      prefix: CLASSNAME$4
    })),
    "aria-disabled": isDisabled
  }), children);
});
TableRow.displayName = COMPONENT_NAME$4;
TableRow.className = CLASSNAME$4;
TableRow.defaultProps = DEFAULT_PROPS$3;

export { Table as T, TableBody as a, ThOrder as b, TableCellVariant as c, TableCell as d, TableHeader as e, TableRow as f };
//# sourceMappingURL=TableRow.js.map
