import { AspectRatio, Theme, ColorPalette, ColorVariant, Size } from './components.js';
import { g as getRootClassName, a as _objectWithoutProperties, b as _extends, d as classnames, h as handleBasicClasses } from './getRootClassName.js';
import React, { forwardRef, useCallback } from 'react';
import { L as Link } from './Link2.js';
import { T as Thumbnail } from './Thumbnail2.js';

/**
 * Defines the props of the component.
 */

/**
 * Component display name.
 */
var COMPONENT_NAME = 'LinkPreview';
/**
 * Component default class name and class prefix.
 */

var CLASSNAME = getRootClassName(COMPONENT_NAME);
/**
 * Component default props.
 */

var DEFAULT_PROPS = {
  size: Size.regular,
  theme: Theme.light
};
/**
 * LinkPreview component.
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */

var LinkPreview = forwardRef(function (props, ref) {
  var className = props.className,
      description = props.description,
      link = props.link,
      linkProps = props.linkProps,
      size = props.size,
      theme = props.theme,
      thumbnailProps = props.thumbnailProps,
      title = props.title,
      forwardedProps = _objectWithoutProperties(props, ["className", "description", "link", "linkProps", "size", "theme", "thumbnailProps", "title"]); //TODO: a11y


  var goToUrl = useCallback(function () {
    return window.open(link, '_blank');
  }, [link]);
  return React.createElement("div", _extends({
    ref: ref
  }, forwardedProps, {
    className: classnames(className, handleBasicClasses({
      prefix: CLASSNAME,
      size: size === Size.big && thumbnailProps ? Size.big : Size.regular,
      theme: theme
    }))
  }), React.createElement("div", {
    className: "".concat(CLASSNAME, "__wrapper")
  }, thumbnailProps && React.createElement("div", {
    className: "".concat(CLASSNAME, "__thumbnail")
  }, React.createElement(Thumbnail, _extends({}, thumbnailProps, {
    onClick: goToUrl,
    role: "link",
    aspectRatio: AspectRatio.free,
    fillHeight: true
  }))), React.createElement("div", {
    className: "".concat(CLASSNAME, "__container")
  }, title && React.createElement("div", {
    className: "".concat(CLASSNAME, "__title")
  }, React.createElement(Link, _extends({}, linkProps, {
    target: "_blank",
    href: link,
    color: theme === Theme.light ? ColorPalette.dark : ColorPalette.light,
    colorVariant: ColorVariant.N
  }), title)), description && React.createElement("p", {
    className: "".concat(CLASSNAME, "__description")
  }, description), React.createElement("div", {
    className: "".concat(CLASSNAME, "__link")
  }, React.createElement(Link, _extends({}, linkProps, {
    className: classnames("".concat(CLASSNAME, "__link"), linkProps === null || linkProps === void 0 ? void 0 : linkProps.className),
    target: "_blank",
    href: link,
    color: theme === Theme.light ? ColorPalette.blue : ColorPalette.light,
    colorVariant: ColorVariant.N
  }), link)))));
});
LinkPreview.displayName = COMPONENT_NAME;
LinkPreview.className = CLASSNAME;
LinkPreview.defaultProps = DEFAULT_PROPS;

export { LinkPreview as L };
//# sourceMappingURL=LinkPreview.js.map
