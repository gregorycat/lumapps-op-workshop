{"version":3,"file":"AutocompleteMultiple.js","sources":["../../../src/components/autocomplete/Autocomplete.tsx","../../../src/components/autocomplete/AutocompleteMultiple.tsx"],"sourcesContent":["import React, { forwardRef, ReactNode, RefObject, SyntheticEvent, useRef } from 'react';\n\nimport classNames from 'classnames';\n\nimport { Dropdown, IconButtonProps, Offset, Placement, TextField, Theme } from '@lumx/react';\n\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\n\nimport { useFocus } from '@lumx/react/hooks/useFocus';\nimport { mergeRefs } from '@lumx/react/utils/mergeRefs';\n\n/**\n * Defines the props of the component.\n */\nexport interface AutocompleteProps extends GenericProps {\n    /**\n     * Whether the suggestions list should display anchored to the input or to the wrapper.\n     * @see {@link DropdownProps#anchorToInput}\n     */\n    anchorToInput?: boolean;\n    /**\n     * Props to pass to the clear button (minus those already set by the TextField props).\n     * If not specified, the button won't be displayed.\n     * @see {@link TextFieldProps#clearButtonProps}\n     */\n    clearButtonProps?: Pick<IconButtonProps, 'label'> &\n        Omit<IconButtonProps, 'label' | 'onClick' | 'icon' | 'emphasis'>;\n    /**\n     * Reference to the <input> or <textarea> element.\n     * @see {@link TextFieldProps#inputRef}\n     */\n    inputRef?: RefObject<HTMLInputElement>;\n    /**\n     * The offset that will be applied to the Dropdown position.\n     * @see {@link DropdownProps#offset}\n     */\n    offset?: Offset;\n    /**\n     * The preferred Dropdown location against the anchor element.\n     * @see {@link DropdownProps#placement}\n     */\n    placement?: Placement;\n    /**\n     * Whether the dropdown should fit to the anchor width or not.\n     * @see {@link DropdownProps#fitToAnchorWidth}\n     */\n    fitToAnchorWidth?: boolean;\n    /**\n     * The error related to the component.\n     * @see {@link TextFieldProps#error}\n     */\n    error?: string | ReactNode;\n    /**\n     * Whether the text field is displayed with error style or not.\n     * @see {@link TextFieldProps#hasError}\n     */\n    hasError?: boolean;\n    /**\n     * Whether the text box should be focused upon closing the suggestions or not.\n     */\n    shouldFocusOnClose?: boolean;\n    /**\n     * The helper message of the text field.\n     * @see {@link TextFieldProps#helper}\n     */\n    helper?: string;\n    /**\n     * The icon of the text field (SVG path).\n     * @see {@link TextFieldProps#icon}\n     */\n    icon?: string;\n    /**\n     * Whether the component is disabled or not.\n     * @see {@link TextFieldProps#isDisabled}\n     */\n    isDisabled?: boolean;\n    /**\n     * Whether the component is required or not.\n     * @see {@link TextFieldProps#isRequired}\n     */\n    isRequired?: boolean;\n    /**\n     * Whether the text field is displayed with valid style or not.\n     * @see {@link TextFieldProps#isValid}\n     */\n    isValid?: boolean;\n    /**\n     * The label of the text field displayed in a label tag.\n     * @see {@link TextFieldProps#label}\n     */\n    label?: string;\n    /**\n     * The placeholder message of the text field.\n     * @see {@link TextFieldProps#placeholder}\n     */\n    placeholder?: string;\n    /** Theme adapting the component to light or dark background. */\n    theme?: Theme;\n    /** List of suggestions to display during autocomplete. */\n    children: React.ReactNode;\n    /**\n     * The list of chips to be displayed before the text field input.\n     */\n    chips?: React.ReactNode;\n    /**\n     * The value of the text field.\n     * @see {@link TextFieldProps#value}\n     */\n    value: string;\n    /**\n     * Whether the suggestions from the autocomplete should be displayed or not.\n     * @see {@link DropdownProps#isOpen}\n     */\n    isOpen: boolean;\n    /**\n     * The native input name property.\n     * @see {@link TextFieldProps#name}\n     */\n    name?: string;\n    /**\n     * Whether a click in the Autocomplete dropdown would close it or not.\n     * @see {@link DropdownProps#closeOnClick}\n     */\n    closeOnClick?: boolean;\n    /**\n     * Whether a click anywhere out of the Autocomplete would close it or not.\n     * @see {@link DropdownProps#closeOnClickAway}\n     */\n    closeOnClickAway?: boolean;\n    /**\n     * Whether an escape key press would close the Autocomplete or not.\n     * @see {@link DropdownProps#closeOnEscape}\n     */\n    closeOnEscape?: boolean;\n    /**\n     * The function called on blur.\n     * @see {@link TextFieldProps#onBlur}\n     */\n    onBlur?(event: React.FocusEvent): void;\n    /**\n     * On change callback.\n     * @see {@link TextFieldProps#onChange}\n     */\n    onChange(value: string, name?: string, event?: SyntheticEvent): void;\n    /**\n     * The function called on close.\n     * @see {@link DropdownProps#onClose}\n     */\n    onClose?(): void;\n    /**\n     * The function called on focus.\n     * @see {@link TextFieldProps#onFocus}\n     */\n    onFocus?(event: React.FocusEvent): void;\n    /**\n     * The function called when the bottom of the dropdown is reached.\n     * @see {@link DropdownProps#onInfiniteScroll}\n     */\n    onInfiniteScroll?(): void;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'Autocomplete';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<AutocompleteProps> = {\n    anchorToInput: false,\n    closeOnClick: false,\n    closeOnClickAway: true,\n    closeOnEscape: true,\n    shouldFocusOnClose: false,\n};\n\n/**\n * Autocomplete component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const Autocomplete: Comp<AutocompleteProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const {\n        anchorToInput,\n        children,\n        chips,\n        className,\n        closeOnClick,\n        closeOnClickAway,\n        closeOnEscape,\n        disabled,\n        error,\n        fitToAnchorWidth,\n        hasError,\n        helper,\n        icon,\n        inputRef,\n        clearButtonProps,\n        isDisabled = disabled,\n        isRequired,\n        isOpen,\n        isValid,\n        label,\n        name,\n        offset,\n        onBlur,\n        onChange,\n        onClose,\n        onFocus,\n        onInfiniteScroll,\n        placeholder,\n        placement,\n        shouldFocusOnClose,\n        theme,\n        value,\n        ...forwardedProps\n    } = props;\n    const inputAnchorRef = useRef<HTMLElement>(null);\n    const textFieldRef = useRef(null);\n    useFocus(inputAnchorRef.current, !isOpen && shouldFocusOnClose);\n\n    return (\n        <div\n            ref={ref}\n            {...forwardedProps}\n            className={classNames(\n                className,\n                handleBasicClasses({\n                    prefix: CLASSNAME,\n                }),\n            )}\n        >\n            <TextField\n                chips={chips}\n                error={error}\n                hasError={hasError}\n                helper={helper}\n                icon={icon}\n                inputRef={mergeRefs(inputAnchorRef, inputRef) as any}\n                clearButtonProps={clearButtonProps}\n                isDisabled={isDisabled}\n                isRequired={isRequired}\n                isValid={isValid}\n                label={label}\n                name={name}\n                onBlur={onBlur}\n                onChange={onChange}\n                onFocus={onFocus}\n                placeholder={placeholder}\n                textFieldRef={textFieldRef}\n                theme={theme}\n                value={value}\n            />\n            <Dropdown\n                anchorRef={anchorToInput ? inputAnchorRef : textFieldRef}\n                closeOnClick={closeOnClick}\n                closeOnClickAway={closeOnClickAway}\n                closeOnEscape={closeOnEscape}\n                fitToAnchorWidth={fitToAnchorWidth}\n                isOpen={isOpen}\n                offset={offset}\n                onClose={onClose}\n                onInfiniteScroll={onInfiniteScroll}\n                placement={placement}\n                shouldFocusOnOpen={false}\n                theme={theme}\n            >\n                {children}\n            </Dropdown>\n        </div>\n    );\n});\nAutocomplete.displayName = COMPONENT_NAME;\nAutocomplete.className = CLASSNAME;\nAutocomplete.defaultProps = DEFAULT_PROPS;\n","import { mdiClose } from '@lumx/icons';\nimport { Autocomplete, AutocompleteProps, Chip, ChipGroup, HorizontalAlignment, Icon, Size } from '@lumx/react';\n\nimport { Comp, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\n\nimport classNames from 'classnames';\nimport React, { forwardRef, ReactNode } from 'react';\n\n/**\n * Defines the props of the component.\n */\nexport interface AutocompleteMultipleProps extends AutocompleteProps {\n    /** Selected values. */\n    values: any[];\n    /** Alignment of the chips in the autocomplete. */\n    chipsAlignment?: HorizontalAlignment;\n    /** Selected value render function. Default: Renders the value inside of a Chip. */\n    selectedChipRender(\n        choice: any,\n        index: number,\n        onClear?: (event: React.MouseEvent, choice: any) => void,\n        isDisabled?: boolean,\n    ): ReactNode | string;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'AutocompleteMultiple';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<AutocompleteMultipleProps> = {\n    closeOnClickAway: true,\n    closeOnEscape: true,\n    selectedChipRender(choice, index, onClear, isDisabled) {\n        const onClick = (event: React.MouseEvent) => onClear && onClear(event, choice);\n        return (\n            <Chip\n                key={index}\n                after={onClear && <Icon icon={mdiClose} size={Size.xxs} />}\n                isDisabled={isDisabled}\n                size={Size.s}\n                onAfterClick={onClick}\n                onClick={onClick}\n            >\n                {choice}\n            </Chip>\n        );\n    },\n    values: [],\n};\n\n/**\n * AutocompleteMultiple component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const AutocompleteMultiple: Comp<AutocompleteMultipleProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const {\n        anchorToInput,\n        children,\n        chipsAlignment,\n        className,\n        closeOnClickAway,\n        closeOnEscape,\n        fitToAnchorWidth,\n        hasError,\n        helper,\n        icon,\n        inputRef,\n        clearButtonProps,\n        isDisabled,\n        isRequired,\n        isOpen,\n        isValid,\n        label,\n        name,\n        offset,\n        onBlur,\n        onChange,\n        onClear,\n        onClose,\n        onFocus,\n        onInfiniteScroll,\n        onKeyDown,\n        placeholder,\n        placement,\n        selectedChipRender,\n        shouldFocusOnClose,\n        theme,\n        type,\n        value,\n        values,\n        ...forwardedProps\n    } = props;\n\n    return (\n        <Autocomplete\n            ref={ref}\n            {...forwardedProps}\n            anchorToInput={anchorToInput}\n            className={classNames(\n                className,\n                handleBasicClasses({\n                    prefix: CLASSNAME,\n                }),\n            )}\n            name={name}\n            value={value}\n            onChange={onChange}\n            onKeyDown={onKeyDown}\n            onBlur={onBlur}\n            shouldFocusOnClose={shouldFocusOnClose}\n            onFocus={onFocus}\n            hasError={hasError}\n            helper={helper}\n            icon={icon}\n            inputRef={inputRef}\n            chips={values && values.map((chip: any, index: number) => selectedChipRender(chip, index, onClear))}\n            isDisabled={isDisabled}\n            isRequired={isRequired}\n            clearButtonProps={clearButtonProps}\n            isValid={isValid}\n            label={label}\n            placeholder={placeholder}\n            theme={theme}\n            type={type}\n            isOpen={isOpen}\n            closeOnClick={false}\n            closeOnClickAway={closeOnClickAway}\n            closeOnEscape={closeOnEscape}\n            onClose={onClose}\n            offset={offset}\n            placement={placement}\n            fitToAnchorWidth={fitToAnchorWidth}\n            onInfiniteScroll={onInfiniteScroll}\n        >\n            {children}\n        </Autocomplete>\n    );\n});\nAutocompleteMultiple.displayName = COMPONENT_NAME;\nAutocompleteMultiple.className = CLASSNAME;\nAutocompleteMultiple.defaultProps = DEFAULT_PROPS;\n"],"names":["COMPONENT_NAME","CLASSNAME","getRootClassName","DEFAULT_PROPS","anchorToInput","closeOnClick","closeOnClickAway","closeOnEscape","shouldFocusOnClose","Autocomplete","forwardRef","props","ref","children","chips","className","disabled","error","fitToAnchorWidth","hasError","helper","icon","inputRef","clearButtonProps","isDisabled","isRequired","isOpen","isValid","label","name","offset","onBlur","onChange","onClose","onFocus","onInfiniteScroll","placeholder","placement","theme","value","forwardedProps","inputAnchorRef","useRef","textFieldRef","useFocus","current","classNames","handleBasicClasses","prefix","mergeRefs","displayName","defaultProps","selectedChipRender","choice","index","onClear","onClick","event","mdiClose","Size","xxs","s","values","AutocompleteMultiple","chipsAlignment","onKeyDown","type","map","chip"],"mappings":"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"}