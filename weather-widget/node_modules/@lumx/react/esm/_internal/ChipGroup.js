import { Alignment } from './components.js';
import { f as _slicedToArray, g as getRootClassName, a as _objectWithoutProperties, h as handleBasicClasses, b as _extends, d as classnames } from './getRootClassName.js';
import React, { useState, forwardRef } from 'react';

var INITIAL_STATE_ACTIVE_CHIP = -1;
/**
 * Hook that provides the necessary information to manage chips navigation.
 * @param chips             List of chips selected.
 * @param onChipDeleted     Callback executed when a chip must be eliminated.
 * @param initialActiveChip Initial active chip index.
 *
 * @return chip navigation tools.
 */

var useChipGroupNavigation = function useChipGroupNavigation(chips, onChipDeleted) {
  var initialActiveChip = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : INITIAL_STATE_ACTIVE_CHIP;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      wasBackspacePressed = _useState2[0],
      setWasBackspacePressed = _useState2[1];

  var _useState3 = useState(initialActiveChip),
      _useState4 = _slicedToArray(_useState3, 2),
      activeChip = _useState4[0],
      setActiveChip = _useState4[1];
  /**
   * Resets the active index and backspace control to their initial state
   */


  var resetChipNavigation = function resetChipNavigation() {
    setWasBackspacePressed(false);
    setActiveChip(initialActiveChip);
  };
  /**
   * Callback to be executed when the backspace was pressed. If there are no chips
   * selected, it will return immediately. If there are it will check if the
   * backspace was already pressed. if it was, it means that the user wants to eliminate
   * the chip, so we execute the `onChipDeleted` function and reset internal state.
   *
   * If it was not pressed before, we set the `wasBackspacePressed` flag to true and
   * highlight the last chip.
   */


  var onBackspacePressed = function onBackspacePressed() {
    if (chips.length === 0) {
      return;
    }

    if (wasBackspacePressed) {
      var chipDeleted = chips[chips.length - 1];
      onChipDeleted(chipDeleted);
      resetChipNavigation();
    } else {
      setActiveChip(chips.length - 1);
      setWasBackspacePressed(true);
    }
  };

  return {
    activeChip: activeChip,
    onBackspacePressed: onBackspacePressed,
    resetChipNavigation: resetChipNavigation
  };
};

/**
 * Defines the props of the component.
 */

/**
 * Component default props.
 */
var DEFAULT_PROPS = {
  align: Alignment.left
};
/**
 * Component display name.
 */

var COMPONENT_NAME = 'ChipGroup';
/**
 * Component default class name and class prefix.
 */

var CLASSNAME = getRootClassName(COMPONENT_NAME);
/**
 * ChipGroup component.
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */

var InternalChipGroup = forwardRef(function (props, ref) {
  var align = props.align,
      children = props.children,
      className = props.className,
      forwardedProps = _objectWithoutProperties(props, ["align", "children", "className"]);

  var chipGroupClassName = handleBasicClasses({
    align: align,
    prefix: CLASSNAME
  });
  return React.createElement("div", _extends({
    ref: ref
  }, forwardedProps, {
    className: classnames(className, chipGroupClassName)
  }), children);
});
InternalChipGroup.displayName = COMPONENT_NAME;
InternalChipGroup.className = CLASSNAME;
InternalChipGroup.defaultProps = DEFAULT_PROPS;
var ChipGroup = Object.assign(InternalChipGroup, {
  useChipGroupNavigation: useChipGroupNavigation
});

export { ChipGroup as C };
//# sourceMappingURL=ChipGroup.js.map
