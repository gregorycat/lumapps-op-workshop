import { Size, Orientation, Theme } from './components.js';
import { g as getRootClassName, a as _objectWithoutProperties, b as _extends, d as classnames, h as handleBasicClasses } from './getRootClassName.js';
import React, { forwardRef } from 'react';
import { A as Avatar } from './Avatar2.js';

/**
 * Component display name.
 */
var COMPONENT_NAME = 'UserBlock';
/**
 * Component default class name and class prefix.
 */

var CLASSNAME = getRootClassName(COMPONENT_NAME);
/**
 * Component default props.
 */

var DEFAULT_PROPS = {
  orientation: Orientation.horizontal,
  size: Size.m,
  theme: Theme.light
};
/**
 * UserBlock component.
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */

var UserBlock = forwardRef(function (props, ref) {
  var avatarProps = props.avatarProps,
      className = props.className,
      fields = props.fields,
      multipleActions = props.multipleActions,
      name = props.name,
      onClick = props.onClick,
      onMouseEnter = props.onMouseEnter,
      onMouseLeave = props.onMouseLeave,
      orientation = props.orientation,
      simpleAction = props.simpleAction,
      size = props.size,
      theme = props.theme,
      forwardedProps = _objectWithoutProperties(props, ["avatarProps", "className", "fields", "multipleActions", "name", "onClick", "onMouseEnter", "onMouseLeave", "orientation", "simpleAction", "size", "theme"]);

  var componentSize = size; // Special case - When using vertical orientation force the size to be Sizes.l.

  if (orientation === Orientation.vertical) {
    componentSize = Size.l;
  }

  var shouldDisplayActions = orientation === Orientation.vertical;
  var nameBlock = name && // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-noninteractive-tabindex,jsx-a11y/no-static-element-interactions
  React.createElement("span", {
    className: "".concat(CLASSNAME, "__name"),
    onClick: onClick,
    tabIndex: onClick ? 0 : -1
  }, name);
  var fieldsBlock = fields && componentSize !== Size.s && React.createElement("div", {
    className: "".concat(CLASSNAME, "__fields")
  }, fields.map(function (aField, idx) {
    return React.createElement("span", {
      key: idx,
      className: "".concat(CLASSNAME, "__field")
    }, aField);
  }));
  return React.createElement("div", _extends({
    ref: ref
  }, forwardedProps, {
    className: classnames(className, handleBasicClasses({
      prefix: CLASSNAME,
      orientation: orientation,
      size: componentSize,
      theme: theme
    })),
    onMouseLeave: onMouseLeave,
    onMouseEnter: onMouseEnter
  }), avatarProps && React.createElement("div", {
    className: "".concat(CLASSNAME, "__avatar")
  }, React.createElement(Avatar, _extends({}, avatarProps, {
    size: componentSize,
    onClick: onClick,
    tabIndex: onClick ? 0 : -1,
    theme: theme
  }))), (fields || name) && React.createElement("div", {
    className: "".concat(CLASSNAME, "__wrapper")
  }, nameBlock, fieldsBlock), shouldDisplayActions && simpleAction && React.createElement("div", {
    className: "".concat(CLASSNAME, "__action")
  }, simpleAction), shouldDisplayActions && multipleActions && React.createElement("div", {
    className: "".concat(CLASSNAME, "__actions")
  }, multipleActions));
});
UserBlock.displayName = COMPONENT_NAME;
UserBlock.className = CLASSNAME;
UserBlock.defaultProps = DEFAULT_PROPS;

export { UserBlock as U };
//# sourceMappingURL=UserBlock.js.map
