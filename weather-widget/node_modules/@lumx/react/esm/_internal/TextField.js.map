{"version":3,"file":"TextField.js","sources":["../../../src/components/text-field/TextField.tsx"],"sourcesContent":["import React, { forwardRef, ReactNode, RefObject, SyntheticEvent, useEffect, useMemo, useRef, useState } from 'react';\n\nimport classNames from 'classnames';\nimport get from 'lodash/get';\nimport { uid } from 'uid';\n\nimport { mdiAlertCircle, mdiCheckCircle, mdiCloseCircle } from '@lumx/icons';\nimport { Emphasis, Icon, IconButton, IconButtonProps, InputHelper, InputLabel, Kind, Size, Theme } from '@lumx/react';\nimport { Comp, GenericProps, getRootClassName, handleBasicClasses } from '@lumx/react/utils';\nimport { mergeRefs } from '@lumx/react/utils/mergeRefs';\n\n/**\n * Defines the props of the component.\n */\nexport interface TextFieldProps extends GenericProps {\n    /** Chip Group to be rendered before the main text input. */\n    chips?: HTMLElement | ReactNode;\n    /** Props to pass to the clear button (minus those already set by the TextField props). If not specified, the button won't be displayed. */\n    clearButtonProps?: Pick<IconButtonProps, 'label'> &\n        Omit<IconButtonProps, 'label' | 'onClick' | 'icon' | 'emphasis'>;\n    /** Error message. */\n    error?: string | ReactNode;\n    /** Whether we force the focus style or not. */\n    forceFocusStyle?: boolean;\n    /** Whether the text field is displayed with error style or not. */\n    hasError?: boolean;\n    /** Helper text. */\n    helper?: string | ReactNode;\n    /** Icon (SVG path). */\n    icon?: string;\n    /** Native input id property (generated if not provided to link the label element). */\n    id?: string;\n    /** Reference to the <input> or <textarea> element. */\n    inputRef?: RefObject<HTMLInputElement> | RefObject<HTMLTextAreaElement>;\n    /** Whether the component is disabled or not. */\n    isDisabled?: boolean;\n    /** Whether the component is required or not. */\n    isRequired?: boolean;\n    /** Whether the text field is displayed with valid style or not. */\n    isValid?: boolean;\n    /** Label text. */\n    label?: string;\n    /** Max string length the input accepts (constrains the input and displays a character counter). */\n    maxLength?: number;\n    /** Minimum number of rows displayed in multiline mode (requires `multiline` to be enabled). */\n    minimumRows?: number;\n    /** Whether the text field is a textarea or an input. */\n    multiline?: boolean;\n    /** Native input name property. */\n    name?: string;\n    /** Placeholder text. */\n    placeholder?: string;\n    /** Reference to the wrapper. */\n    textFieldRef?: RefObject<HTMLDivElement>;\n    /** Theme adapting the component to light or dark background. */\n    theme?: Theme;\n    /** Value. */\n    value?: string;\n    /** On blur callback. */\n    onBlur?(event: React.FocusEvent): void;\n    /** On change callback. */\n    onChange(value: string, name?: string, event?: SyntheticEvent): void;\n    /** On focus callback. */\n    onFocus?(event: React.FocusEvent): void;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'TextField';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * Default minimum number of rows in the multiline mode.\n */\nconst DEFAULT_MIN_ROWS = 2;\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<TextFieldProps> = {\n    theme: Theme.light,\n    type: 'text',\n};\n\n/**\n * Hook that allows to calculate the number of rows needed for a text area.\n * @param minimumRows Minimum number of rows that we want to display.\n * @return rows to be used and a callback to recalculate\n */\nconst useComputeNumberOfRows = (\n    minimumRows: number,\n): {\n    /** number of rows to be used on the text area */\n    rows: number;\n    /**\n     * Callback in order to recalculate the number of rows due to a change on the text area\n     */\n    recomputeNumberOfRows(target: Element): void;\n} => {\n    const [rows, setRows] = useState(minimumRows);\n\n    const recompute = (target: Element) => {\n        /**\n         * HEAD's UP! This part is a little bit tricky. The idea here is to only\n         * display the necessary rows on the textarea. In order to dynamically adjust\n         * the height on that field, we need to:\n         * 1. Set the current amount of rows to the minimum. That will make the scroll appear.\n         * 2. With that, we will have the `scrollHeight`, meaning the height of the container adjusted to the current content\n         * 3. With the scroll height, we can figure out how many rows we need to use by dividing the scroll height\n         * by the line height.\n         * 4. With that number, we can readjust the number of rows on the text area. We need to do that here, if we leave that to\n         * the state change through React, there are some scenarios (resize, hitting ENTER or BACKSPACE which add or remove lines)\n         * when we will not see the update and the rows will be resized to the minimum.\n         * 5. In case there is any other update on the component that changes the UI, we need to keep the number of rows\n         * on the state in order to allow React to re-render. Therefore, we save them using `useState`\n         */\n        // eslint-disable-next-line no-param-reassign\n        (target as HTMLTextAreaElement).rows = minimumRows;\n        let currentRows = target.scrollHeight / (target.clientHeight / minimumRows);\n        currentRows = currentRows >= minimumRows ? currentRows : minimumRows;\n        // eslint-disable-next-line no-param-reassign\n        (target as HTMLTextAreaElement).rows = currentRows;\n\n        setRows(currentRows);\n    };\n\n    return {\n        recomputeNumberOfRows: recompute,\n        rows,\n    };\n};\n\ninterface InputNativeProps {\n    id?: string;\n    inputRef?: RefObject<HTMLInputElement> | RefObject<HTMLTextAreaElement>;\n    isDisabled?: boolean;\n    isRequired?: boolean;\n    multiline?: boolean;\n    maxLength?: number;\n    placeholder?: string;\n    rows: number;\n    type: string;\n    name?: string;\n    value?: string;\n    setFocus(focus: boolean): void;\n    recomputeNumberOfRows(target: Element): void;\n    onChange(value: string, name?: string, event?: SyntheticEvent): void;\n    onFocus?(value: React.FocusEvent): void;\n    onBlur?(value: React.FocusEvent): void;\n}\n\nconst renderInputNative: React.FC<InputNativeProps> = (props) => {\n    const {\n        id,\n        isDisabled,\n        isRequired,\n        placeholder,\n        multiline,\n        value,\n        setFocus,\n        onChange,\n        onFocus,\n        onBlur,\n        inputRef,\n        rows,\n        recomputeNumberOfRows,\n        type,\n        name,\n        ...forwardedProps\n    } = props;\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const ref = useRef<HTMLElement>(null);\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n        // Recompute the number of rows for the first rendering\n        if (multiline && ref && ref.current) {\n            recomputeNumberOfRows(ref.current);\n        }\n    }, [ref, multiline, recomputeNumberOfRows, value]);\n\n    const onTextFieldFocus = (event: React.FocusEvent) => {\n        onFocus?.(event);\n        setFocus(true);\n    };\n\n    const onTextFieldBlur = (event: React.FocusEvent) => {\n        onBlur?.(event);\n        setFocus(false);\n    };\n\n    const handleChange = (event: React.ChangeEvent) => {\n        onChange(get(event, 'target.value'), name, event);\n    };\n\n    const Component = multiline ? 'textarea' : 'input';\n    const inputProps: any = {\n        ...forwardedProps,\n        id,\n        className: multiline\n            ? `${CLASSNAME}__input-native ${CLASSNAME}__input-native--textarea`\n            : `${CLASSNAME}__input-native ${CLASSNAME}__input-native--text`,\n        placeholder,\n        value,\n        name,\n        disabled: isDisabled,\n        required: isRequired,\n        onFocus: onTextFieldFocus,\n        onBlur: onTextFieldBlur,\n        onChange: handleChange,\n        ref: mergeRefs(inputRef as any, ref) as any,\n    };\n    if (multiline) {\n        inputProps.rows = rows;\n    } else {\n        inputProps.type = type;\n    }\n    return <Component {...inputProps} />;\n};\n\n/**\n * TextField component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const TextField: Comp<TextFieldProps, HTMLDivElement> = forwardRef((props, ref) => {\n    const {\n        chips,\n        className,\n        clearButtonProps,\n        disabled,\n        error,\n        forceFocusStyle,\n        hasError,\n        helper,\n        icon,\n        id,\n        inputRef,\n        isDisabled = disabled,\n        isRequired,\n        isValid,\n        label,\n        maxLength,\n        minimumRows,\n        multiline,\n        name,\n        onBlur,\n        onChange,\n        onFocus,\n        placeholder,\n        textFieldRef,\n        theme,\n        type,\n        value,\n        ...forwardedProps\n    } = props;\n    const textFieldId = useMemo(() => id || `text-field-${uid()}`, [id]);\n    const [isFocus, setFocus] = useState(false);\n    const { rows, recomputeNumberOfRows } = useComputeNumberOfRows(multiline ? minimumRows || DEFAULT_MIN_ROWS : 0);\n    const valueLength = (value || '').length;\n    const isNotEmpty = valueLength > 0;\n\n    /**\n     * Function triggered when the Clear Button is clicked.\n     * The idea is to execute the `onChange` callback with an empty string\n     * and remove focus from the clear button.\n     * @param evt On clear event.\n     */\n    const onClear = (evt: React.ChangeEvent) => {\n        evt.nativeEvent.preventDefault();\n        evt.nativeEvent.stopPropagation();\n        (evt.currentTarget as HTMLElement).blur();\n\n        onChange('');\n    };\n\n    return (\n        <div\n            ref={ref}\n            className={classNames(\n                className,\n                handleBasicClasses({\n                    hasChips: Boolean(chips),\n                    hasError: !isValid && hasError,\n                    hasIcon: Boolean(icon),\n                    hasInput: !multiline,\n                    hasInputClear: clearButtonProps && isNotEmpty,\n                    hasLabel: Boolean(label),\n                    hasPlaceholder: Boolean(placeholder),\n                    hasTextarea: multiline,\n                    hasValue: Boolean(value),\n                    isDisabled,\n                    isFocus: isFocus || forceFocusStyle,\n                    isValid,\n                    prefix: CLASSNAME,\n                    theme,\n                }),\n            )}\n        >\n            {label && (\n                <div className={`${CLASSNAME}__header`}>\n                    <InputLabel\n                        htmlFor={textFieldId}\n                        className={`${CLASSNAME}__label`}\n                        isRequired={isRequired}\n                        theme={theme}\n                    >\n                        {label}\n                    </InputLabel>\n\n                    {maxLength && (\n                        <div className={`${CLASSNAME}__char-counter`}>\n                            <span>{maxLength - valueLength}</span>\n                            {maxLength - valueLength === 0 && <Icon icon={mdiAlertCircle} size={Size.xxs} />}\n                        </div>\n                    )}\n                </div>\n            )}\n\n            <div className={`${CLASSNAME}__wrapper`} ref={textFieldRef}>\n                {icon && (\n                    <Icon\n                        className={`${CLASSNAME}__input-icon`}\n                        color={theme === Theme.dark ? 'light' : undefined}\n                        icon={icon}\n                        size={Size.xs}\n                    />\n                )}\n\n                {chips && (\n                    <div className={`${CLASSNAME}__chips`}>\n                        {chips}\n\n                        {renderInputNative({\n                            id: textFieldId,\n                            inputRef,\n                            isDisabled,\n                            isRequired,\n                            maxLength,\n                            multiline,\n                            onBlur,\n                            onChange,\n                            onFocus,\n                            placeholder,\n                            recomputeNumberOfRows,\n                            rows,\n                            setFocus,\n                            type,\n                            value,\n                            name,\n                            ...forwardedProps,\n                        })}\n                    </div>\n                )}\n\n                {!chips && (\n                    <div className={`${CLASSNAME}__input-wrapper`}>\n                        {renderInputNative({\n                            id: textFieldId,\n                            inputRef,\n                            isDisabled,\n                            isRequired,\n                            maxLength,\n                            multiline,\n                            onBlur,\n                            onChange,\n                            onFocus,\n                            placeholder,\n                            recomputeNumberOfRows,\n                            rows,\n                            setFocus,\n                            type,\n                            value,\n                            name,\n                            ...forwardedProps,\n                        })}\n                    </div>\n                )}\n\n                {(isValid || hasError) && (\n                    <Icon\n                        className={`${CLASSNAME}__input-validity`}\n                        color={theme === Theme.dark ? 'light' : undefined}\n                        icon={isValid ? mdiCheckCircle : mdiAlertCircle}\n                        size={Size.xxs}\n                    />\n                )}\n\n                {clearButtonProps && isNotEmpty && (\n                    <IconButton\n                        {...clearButtonProps}\n                        className={`${CLASSNAME}__input-clear`}\n                        icon={mdiCloseCircle}\n                        emphasis={Emphasis.low}\n                        size={Size.s}\n                        theme={theme}\n                        onClick={onClear}\n                        type=\"button\"\n                    />\n                )}\n            </div>\n\n            {hasError && error && (\n                <InputHelper className={`${CLASSNAME}__helper`} kind={Kind.error} theme={theme}>\n                    {error}\n                </InputHelper>\n            )}\n\n            {helper && (\n                <InputHelper className={`${CLASSNAME}__helper`} theme={theme}>\n                    {helper}\n                </InputHelper>\n            )}\n        </div>\n    );\n});\nTextField.displayName = COMPONENT_NAME;\nTextField.className = CLASSNAME;\nTextField.defaultProps = DEFAULT_PROPS;\n"],"names":["COMPONENT_NAME","CLASSNAME","getRootClassName","DEFAULT_MIN_ROWS","DEFAULT_PROPS","theme","Theme","light","type","useComputeNumberOfRows","minimumRows","useState","rows","setRows","recompute","target","currentRows","scrollHeight","clientHeight","recomputeNumberOfRows","renderInputNative","props","id","isDisabled","isRequired","placeholder","multiline","value","setFocus","onChange","onFocus","onBlur","inputRef","name","forwardedProps","ref","useRef","useEffect","current","onTextFieldFocus","event","onTextFieldBlur","handleChange","get","Component","inputProps","className","disabled","required","mergeRefs","TextField","forwardRef","chips","clearButtonProps","error","forceFocusStyle","hasError","helper","icon","isValid","label","maxLength","textFieldRef","textFieldId","useMemo","uid","isFocus","valueLength","length","isNotEmpty","onClear","evt","nativeEvent","preventDefault","stopPropagation","currentTarget","blur","classNames","handleBasicClasses","hasChips","Boolean","hasIcon","hasInput","hasInputClear","hasLabel","hasPlaceholder","hasTextarea","hasValue","prefix","mdiAlertCircle","Size","xxs","dark","undefined","xs","mdiCheckCircle","mdiCloseCircle","Emphasis","low","s","Kind","displayName","defaultProps"],"mappings":"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"}