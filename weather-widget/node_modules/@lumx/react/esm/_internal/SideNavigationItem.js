import { Theme, Size, Emphasis } from './components.js';
import { g as getRootClassName, a as _objectWithoutProperties, b as _extends, d as classnames, h as handleBasicClasses, c as _objectSpread2, o as onEnterPressed } from './getRootClassName.js';
import React, { forwardRef, Children } from 'react';
import { i as mdiChevronUp, j as mdiChevronDown } from './mdi.js';
import isEmpty from 'lodash/isEmpty';
import { i as isComponent } from './type.js';
import { r as renderLink } from './renderLink.js';
import { I as IconButton } from './IconButton.js';
import { I as Icon } from './Icon2.js';

/**
 * Defines the props of the component.
 */

/**
 * Component display name.
 */
var COMPONENT_NAME = 'SideNavigation';
/**
 * Component default class name and class prefix.
 */

var CLASSNAME = getRootClassName(COMPONENT_NAME);
/**
 * SideNavigation component.
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */

var SideNavigation = forwardRef(function (props, ref) {
  var children = props.children,
      className = props.className,
      theme = props.theme,
      forwardedProps = _objectWithoutProperties(props, ["children", "className", "theme"]);

  var content = Children.toArray(children).filter(isComponent(SideNavigationItem));
  return React.createElement("ul", _extends({
    ref: ref
  }, forwardedProps, {
    className: classnames(className, theme === Theme.dark && 'lumx-color-font-light-N', handleBasicClasses({
      prefix: CLASSNAME
    }))
  }), content);
});
SideNavigation.displayName = COMPONENT_NAME;
SideNavigation.className = CLASSNAME;

/**
 * Defines the props of the component.
 */

/**
 * Component display name.
 */
var COMPONENT_NAME$1 = 'SideNavigationItem';
/**
 * Component default class name and class prefix.
 */

var CLASSNAME$1 = getRootClassName(COMPONENT_NAME$1);
/**
 * Component default props.
 */

var DEFAULT_PROPS = {
  emphasis: Emphasis.high
};
/**
 * SideNavigationItem component.
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */

var SideNavigationItem = forwardRef(function (props, ref) {
  var children = props.children,
      className = props.className,
      emphasis = props.emphasis,
      icon = props.icon,
      isOpen = props.isOpen,
      isSelected = props.isSelected,
      label = props.label,
      linkAs = props.linkAs,
      linkProps = props.linkProps,
      onActionClick = props.onActionClick,
      onClick = props.onClick,
      toggleButtonProps = props.toggleButtonProps,
      forwardedProps = _objectWithoutProperties(props, ["children", "className", "emphasis", "icon", "isOpen", "isSelected", "label", "linkAs", "linkProps", "onActionClick", "onClick", "toggleButtonProps"]);

  var content = children && Children.toArray(children).filter(isComponent(SideNavigationItem));
  var hasContent = !isEmpty(content);
  var shouldSplitActions = Boolean(onActionClick);
  return React.createElement("li", _extends({
    ref: ref
  }, forwardedProps, {
    className: classnames(className, handleBasicClasses({
      emphasis: emphasis,
      isOpen: isOpen,
      isSelected: isSelected,
      prefix: CLASSNAME$1
    }))
  }), shouldSplitActions ? React.createElement("div", {
    className: "".concat(CLASSNAME$1, "__wrapper")
  }, renderLink(_objectSpread2({
    linkAs: linkAs
  }, linkProps, {
    className: "".concat(CLASSNAME$1, "__link"),
    onClick: onClick,
    tabIndex: 0
  }), icon && React.createElement(Icon, {
    className: "".concat(CLASSNAME$1, "__icon"),
    icon: icon,
    size: Size.xs
  }), React.createElement("span", null, label)), React.createElement(IconButton, _extends({}, toggleButtonProps, {
    className: "".concat(CLASSNAME$1, "__toggle"),
    icon: isOpen ? mdiChevronUp : mdiChevronDown,
    size: Size.m,
    emphasis: Emphasis.low,
    onClick: onActionClick
  }))) : renderLink(_objectSpread2({
    linkAs: linkAs
  }, linkProps, {
    className: "".concat(CLASSNAME$1, "__link"),
    tabIndex: 0,
    onClick: onClick,
    onKeyDown: onClick ? onEnterPressed(onClick) : undefined
  }), icon && React.createElement(Icon, {
    className: "".concat(CLASSNAME$1, "__icon"),
    icon: icon,
    size: Size.xs
  }), React.createElement("span", null, label), hasContent && React.createElement(Icon, {
    className: "".concat(CLASSNAME$1, "__chevron"),
    icon: isOpen ? mdiChevronUp : mdiChevronDown,
    size: Size.xs
  })), hasContent && isOpen && React.createElement("ul", {
    className: "".concat(CLASSNAME$1, "__children")
  }, content));
});
SideNavigationItem.displayName = COMPONENT_NAME$1;
SideNavigationItem.className = CLASSNAME$1;
SideNavigationItem.defaultProps = DEFAULT_PROPS;

export { SideNavigation as S, SideNavigationItem as a };
//# sourceMappingURL=SideNavigationItem.js.map
