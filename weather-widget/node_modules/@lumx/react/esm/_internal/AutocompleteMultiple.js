import { Size } from './components.js';
import { g as getRootClassName, a as _objectWithoutProperties, b as _extends, d as classnames, h as handleBasicClasses } from './getRootClassName.js';
import React, { forwardRef, useRef } from 'react';
import { d as mdiClose } from './mdi.js';
import { u as useFocus } from './Popover2.js';
import { m as mergeRefs } from './mergeRefs.js';
import { C as Chip } from './Chip2.js';
import { D as Dropdown } from './Dropdown2.js';
import { I as Icon } from './Icon2.js';
import { T as TextField } from './TextField.js';

/**
 * Defines the props of the component.
 */

/**
 * Component display name.
 */
var COMPONENT_NAME = 'Autocomplete';
/**
 * Component default class name and class prefix.
 */

var CLASSNAME = getRootClassName(COMPONENT_NAME);
/**
 * Component default props.
 */

var DEFAULT_PROPS = {
  anchorToInput: false,
  closeOnClick: false,
  closeOnClickAway: true,
  closeOnEscape: true,
  shouldFocusOnClose: false
};
/**
 * Autocomplete component.
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */

var Autocomplete = forwardRef(function (props, ref) {
  var anchorToInput = props.anchorToInput,
      children = props.children,
      chips = props.chips,
      className = props.className,
      closeOnClick = props.closeOnClick,
      closeOnClickAway = props.closeOnClickAway,
      closeOnEscape = props.closeOnEscape,
      disabled = props.disabled,
      error = props.error,
      fitToAnchorWidth = props.fitToAnchorWidth,
      hasError = props.hasError,
      helper = props.helper,
      icon = props.icon,
      inputRef = props.inputRef,
      clearButtonProps = props.clearButtonProps,
      _props$isDisabled = props.isDisabled,
      isDisabled = _props$isDisabled === void 0 ? disabled : _props$isDisabled,
      isRequired = props.isRequired,
      isOpen = props.isOpen,
      isValid = props.isValid,
      label = props.label,
      name = props.name,
      offset = props.offset,
      onBlur = props.onBlur,
      onChange = props.onChange,
      onClose = props.onClose,
      onFocus = props.onFocus,
      onInfiniteScroll = props.onInfiniteScroll,
      placeholder = props.placeholder,
      placement = props.placement,
      shouldFocusOnClose = props.shouldFocusOnClose,
      theme = props.theme,
      value = props.value,
      forwardedProps = _objectWithoutProperties(props, ["anchorToInput", "children", "chips", "className", "closeOnClick", "closeOnClickAway", "closeOnEscape", "disabled", "error", "fitToAnchorWidth", "hasError", "helper", "icon", "inputRef", "clearButtonProps", "isDisabled", "isRequired", "isOpen", "isValid", "label", "name", "offset", "onBlur", "onChange", "onClose", "onFocus", "onInfiniteScroll", "placeholder", "placement", "shouldFocusOnClose", "theme", "value"]);

  var inputAnchorRef = useRef(null);
  var textFieldRef = useRef(null);
  useFocus(inputAnchorRef.current, !isOpen && shouldFocusOnClose);
  return React.createElement("div", _extends({
    ref: ref
  }, forwardedProps, {
    className: classnames(className, handleBasicClasses({
      prefix: CLASSNAME
    }))
  }), React.createElement(TextField, {
    chips: chips,
    error: error,
    hasError: hasError,
    helper: helper,
    icon: icon,
    inputRef: mergeRefs(inputAnchorRef, inputRef),
    clearButtonProps: clearButtonProps,
    isDisabled: isDisabled,
    isRequired: isRequired,
    isValid: isValid,
    label: label,
    name: name,
    onBlur: onBlur,
    onChange: onChange,
    onFocus: onFocus,
    placeholder: placeholder,
    textFieldRef: textFieldRef,
    theme: theme,
    value: value
  }), React.createElement(Dropdown, {
    anchorRef: anchorToInput ? inputAnchorRef : textFieldRef,
    closeOnClick: closeOnClick,
    closeOnClickAway: closeOnClickAway,
    closeOnEscape: closeOnEscape,
    fitToAnchorWidth: fitToAnchorWidth,
    isOpen: isOpen,
    offset: offset,
    onClose: onClose,
    onInfiniteScroll: onInfiniteScroll,
    placement: placement,
    shouldFocusOnOpen: false,
    theme: theme
  }, children));
});
Autocomplete.displayName = COMPONENT_NAME;
Autocomplete.className = CLASSNAME;
Autocomplete.defaultProps = DEFAULT_PROPS;

/**
 * Defines the props of the component.
 */

/**
 * Component display name.
 */
var COMPONENT_NAME$1 = 'AutocompleteMultiple';
/**
 * Component default class name and class prefix.
 */

var CLASSNAME$1 = getRootClassName(COMPONENT_NAME$1);
/**
 * Component default props.
 */

var DEFAULT_PROPS$1 = {
  closeOnClickAway: true,
  closeOnEscape: true,
  selectedChipRender: function selectedChipRender(choice, index, onClear, isDisabled) {
    var onClick = function onClick(event) {
      return onClear && onClear(event, choice);
    };

    return React.createElement(Chip, {
      key: index,
      after: onClear && React.createElement(Icon, {
        icon: mdiClose,
        size: Size.xxs
      }),
      isDisabled: isDisabled,
      size: Size.s,
      onAfterClick: onClick,
      onClick: onClick
    }, choice);
  },
  values: []
};
/**
 * AutocompleteMultiple component.
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */

var AutocompleteMultiple = forwardRef(function (props, ref) {
  var anchorToInput = props.anchorToInput,
      children = props.children,
      chipsAlignment = props.chipsAlignment,
      className = props.className,
      closeOnClickAway = props.closeOnClickAway,
      closeOnEscape = props.closeOnEscape,
      fitToAnchorWidth = props.fitToAnchorWidth,
      hasError = props.hasError,
      helper = props.helper,
      icon = props.icon,
      inputRef = props.inputRef,
      clearButtonProps = props.clearButtonProps,
      isDisabled = props.isDisabled,
      isRequired = props.isRequired,
      isOpen = props.isOpen,
      isValid = props.isValid,
      label = props.label,
      name = props.name,
      offset = props.offset,
      onBlur = props.onBlur,
      onChange = props.onChange,
      onClear = props.onClear,
      onClose = props.onClose,
      onFocus = props.onFocus,
      onInfiniteScroll = props.onInfiniteScroll,
      onKeyDown = props.onKeyDown,
      placeholder = props.placeholder,
      placement = props.placement,
      selectedChipRender = props.selectedChipRender,
      shouldFocusOnClose = props.shouldFocusOnClose,
      theme = props.theme,
      type = props.type,
      value = props.value,
      values = props.values,
      forwardedProps = _objectWithoutProperties(props, ["anchorToInput", "children", "chipsAlignment", "className", "closeOnClickAway", "closeOnEscape", "fitToAnchorWidth", "hasError", "helper", "icon", "inputRef", "clearButtonProps", "isDisabled", "isRequired", "isOpen", "isValid", "label", "name", "offset", "onBlur", "onChange", "onClear", "onClose", "onFocus", "onInfiniteScroll", "onKeyDown", "placeholder", "placement", "selectedChipRender", "shouldFocusOnClose", "theme", "type", "value", "values"]);

  return React.createElement(Autocomplete, _extends({
    ref: ref
  }, forwardedProps, {
    anchorToInput: anchorToInput,
    className: classnames(className, handleBasicClasses({
      prefix: CLASSNAME$1
    })),
    name: name,
    value: value,
    onChange: onChange,
    onKeyDown: onKeyDown,
    onBlur: onBlur,
    shouldFocusOnClose: shouldFocusOnClose,
    onFocus: onFocus,
    hasError: hasError,
    helper: helper,
    icon: icon,
    inputRef: inputRef,
    chips: values && values.map(function (chip, index) {
      return selectedChipRender(chip, index, onClear);
    }),
    isDisabled: isDisabled,
    isRequired: isRequired,
    clearButtonProps: clearButtonProps,
    isValid: isValid,
    label: label,
    placeholder: placeholder,
    theme: theme,
    type: type,
    isOpen: isOpen,
    closeOnClick: false,
    closeOnClickAway: closeOnClickAway,
    closeOnEscape: closeOnEscape,
    onClose: onClose,
    offset: offset,
    placement: placement,
    fitToAnchorWidth: fitToAnchorWidth,
    onInfiniteScroll: onInfiniteScroll
  }), children);
});
AutocompleteMultiple.displayName = COMPONENT_NAME$1;
AutocompleteMultiple.className = CLASSNAME$1;
AutocompleteMultiple.defaultProps = DEFAULT_PROPS$1;

export { Autocomplete as A, AutocompleteMultiple as a };
//# sourceMappingURL=AutocompleteMultiple.js.map
