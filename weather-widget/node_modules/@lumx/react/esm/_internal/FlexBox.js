import { Orientation } from './components.js';
import { g as getRootClassName, a as _objectWithoutProperties, b as _extends, d as classnames, h as handleBasicClasses } from './getRootClassName.js';
import React, { forwardRef } from 'react';
import castArray from 'lodash/castArray';

/**
 * Component display name.
 */
var COMPONENT_NAME = 'FlexBox';
/**
 * Component default class name and class prefix.
 */

var CLASSNAME = getRootClassName(COMPONENT_NAME);
/**
 * FlexBox component.
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */

var FlexBox = forwardRef(function (props, ref) {
  var children = props.children,
      className = props.className,
      fillSpace = props.fillSpace,
      gap = props.gap,
      hAlign = props.hAlign,
      marginAuto = props.marginAuto,
      noShrink = props.noShrink,
      orientation = props.orientation,
      vAlign = props.vAlign,
      wrap = props.wrap,
      forwardedProps = _objectWithoutProperties(props, ["children", "className", "fillSpace", "gap", "hAlign", "marginAuto", "noShrink", "orientation", "vAlign", "wrap"]);

  return React.createElement("div", _extends({
    ref: ref
  }, forwardedProps, {
    className: classnames(className, handleBasicClasses({
      prefix: CLASSNAME,
      orientation: orientation !== null && orientation !== void 0 ? orientation : wrap || hAlign || vAlign ? Orientation.horizontal : null,
      vAlign: vAlign,
      hAlign: hAlign,
      gap: gap
    }), wrap && "".concat(CLASSNAME, "--wrap"), fillSpace && "".concat(CLASSNAME, "--fill-space"), noShrink && "".concat(CLASSNAME, "--no-shrink"), marginAuto && castArray(marginAuto).map(function (align) {
      return "".concat(CLASSNAME, "--margin-auto-").concat(align);
    }))
  }), children);
});
FlexBox.displayName = COMPONENT_NAME;
FlexBox.className = CLASSNAME;

export { FlexBox as F };
//# sourceMappingURL=FlexBox.js.map
