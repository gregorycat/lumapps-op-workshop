{"version":3,"file":"IconButton.js","sources":["../../../src/components/button/IconButton.tsx"],"sourcesContent":["import React, { forwardRef } from 'react';\n\nimport { Emphasis, Icon, Size, Theme, Tooltip, TooltipProps } from '@lumx/react';\nimport { BaseButtonProps, ButtonRoot } from '@lumx/react/components/button/ButtonRoot';\nimport { Comp, getRootClassName } from '@lumx/react/utils';\n\n/**\n * Defines the props of the component.\n */\nexport interface IconButtonProps extends BaseButtonProps {\n    /** Icon (SVG path). */\n    icon: string;\n    /**\n     * Label text (required for a11y purpose).\n     * If you really don't want an aria-label, you can set an empty label (this is not recommended).\n     */\n    label: string;\n    /**\n     * Props to pass to the tooltip.\n     * If undefined or if tooltipProps.label is undefined, the label prop will be used as tooltip label.\n     * */\n    tooltipProps?: Partial<TooltipProps>;\n    /** Whether the tooltip should be hidden or not. */\n    hideTooltip?: boolean;\n}\n\n/**\n * Component display name.\n */\nconst COMPONENT_NAME = 'IconButton';\n\n/**\n * Component default class name and class prefix.\n */\nconst CLASSNAME = getRootClassName(COMPONENT_NAME);\n\n/**\n * Component default props.\n */\nconst DEFAULT_PROPS: Partial<IconButtonProps> = {\n    emphasis: Emphasis.high,\n    size: Size.m,\n    theme: Theme.light,\n};\n\n/**\n * IconButton component.\n *\n * @param  props Component props.\n * @param  ref   Component ref.\n * @return React element.\n */\nexport const IconButton: Comp<IconButtonProps, HTMLButtonElement> = forwardRef((props, ref) => {\n    const { emphasis, icon, label, size, theme, tooltipProps, hideTooltip, ...forwardedProps } = props;\n\n    return (\n        <Tooltip label={hideTooltip ? '' : label} {...tooltipProps}>\n            <ButtonRoot ref={ref} {...{ emphasis, size, theme, ...forwardedProps }} aria-label={label} variant=\"icon\">\n                <Icon icon={icon} />\n            </ButtonRoot>\n        </Tooltip>\n    );\n});\nIconButton.displayName = COMPONENT_NAME;\nIconButton.className = CLASSNAME;\nIconButton.defaultProps = DEFAULT_PROPS;\n"],"names":["COMPONENT_NAME","CLASSNAME","getRootClassName","DEFAULT_PROPS","emphasis","Emphasis","high","size","Size","m","theme","Theme","light","IconButton","forwardRef","props","ref","icon","label","tooltipProps","hideTooltip","forwardedProps","displayName","className","defaultProps"],"mappings":";;;;;;;;;;;AAMA;;;;AAoBA;;;AAGA,IAAMA,cAAc,GAAG,YAAvB;AAEA;;;;AAGA,IAAMC,SAAS,GAAGC,gBAAgB,CAACF,cAAD,CAAlC;AAEA;;;;AAGA,IAAMG,aAAuC,GAAG;AAC5CC,EAAAA,QAAQ,EAAEC,QAAQ,CAACC,IADyB;AAE5CC,EAAAA,IAAI,EAAEC,IAAI,CAACC,CAFiC;AAG5CC,EAAAA,KAAK,EAAEC,KAAK,CAACC;AAH+B,CAAhD;AAMA;;;;;;;;IAOaC,UAAoD,GAAGC,UAAU,CAAC,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAAA,MACnFZ,QADmF,GACEW,KADF,CACnFX,QADmF;AAAA,MACzEa,IADyE,GACEF,KADF,CACzEE,IADyE;AAAA,MACnEC,KADmE,GACEH,KADF,CACnEG,KADmE;AAAA,MAC5DX,IAD4D,GACEQ,KADF,CAC5DR,IAD4D;AAAA,MACtDG,KADsD,GACEK,KADF,CACtDL,KADsD;AAAA,MAC/CS,YAD+C,GACEJ,KADF,CAC/CI,YAD+C;AAAA,MACjCC,WADiC,GACEL,KADF,CACjCK,WADiC;AAAA,MACjBC,cADiB,4BACEN,KADF;;AAG3F,SACI,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAEK,WAAW,GAAG,EAAH,GAAQF;AAAnC,KAA8CC,YAA9C,GACI,oBAAC,UAAD;AAAY,IAAA,GAAG,EAAEH;AAAjB;AAA4BZ,IAAAA,QAAQ,EAARA,QAA5B;AAAsCG,IAAAA,IAAI,EAAJA,IAAtC;AAA4CG,IAAAA,KAAK,EAALA;AAA5C,KAAsDW,cAAtD;AAAwE,kBAAYH,KAApF;AAA2F,IAAA,OAAO,EAAC;AAAnG,MACI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAED;AAAZ,IADJ,CADJ,CADJ;AAOH,CAV6E;AAW9EJ,UAAU,CAACS,WAAX,GAAyBtB,cAAzB;AACAa,UAAU,CAACU,SAAX,GAAuBtB,SAAvB;AACAY,UAAU,CAACW,YAAX,GAA0BrB,aAA1B;;;;"}