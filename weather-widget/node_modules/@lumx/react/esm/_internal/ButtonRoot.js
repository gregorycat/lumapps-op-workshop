import { Emphasis, ColorPalette, Theme } from './components.js';
import { a as _objectWithoutProperties, c as _objectSpread2, d as classnames, h as handleBasicClasses, b as _extends, C as CSS_PREFIX } from './getRootClassName.js';
import React, { forwardRef } from 'react';
import isEmpty from 'lodash/isEmpty';
import { r as renderLink } from './renderLink.js';

/**
 * Component display name.
 */
var COMPONENT_NAME = 'ButtonRoot';
var BUTTON_WRAPPER_CLASSNAME = "".concat(CSS_PREFIX, "-button-wrapper");
var BUTTON_CLASSNAME = "".concat(CSS_PREFIX, "-button");
/**
 * Render a button wrapper with the ButtonRoot inside.
 *
 * @param  props Component props.
 * @return React element.
 */

var renderButtonWrapper = function renderButtonWrapper(props) {
  var color = props.color,
      emphasis = props.emphasis,
      variant = props.variant;
  var adaptedColor = emphasis === Emphasis.low && (color === ColorPalette.light ? ColorPalette.dark : ColorPalette.light);
  var wrapperClassName = classnames(handleBasicClasses({
    color: adaptedColor,
    prefix: BUTTON_WRAPPER_CLASSNAME,
    variant: variant
  }));

  var buttonProps = _objectSpread2({}, props, {
    hasBackground: false
  });

  return React.createElement("div", {
    className: wrapperClassName
  }, React.createElement(ButtonRoot, buttonProps));
};
/**
 * ButtonRoot component.
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */


var ButtonRoot = forwardRef(function (props, ref) {
  var ariaLabel = props['aria-label'],
      children = props.children,
      className = props.className,
      color = props.color,
      disabled = props.disabled,
      emphasis = props.emphasis,
      hasBackground = props.hasBackground,
      href = props.href,
      _props$isDisabled = props.isDisabled,
      isDisabled = _props$isDisabled === void 0 ? disabled : _props$isDisabled,
      isSelected = props.isSelected,
      linkAs = props.linkAs,
      name = props.name,
      size = props.size,
      target = props.target,
      theme = props.theme,
      variant = props.variant,
      _props$type = props.type,
      type = _props$type === void 0 ? 'button' : _props$type,
      forwardedProps = _objectWithoutProperties(props, ["aria-label", "children", "className", "color", "disabled", "emphasis", "hasBackground", "href", "isDisabled", "isSelected", "linkAs", "name", "size", "target", "theme", "variant", "type"]);

  var adaptedColor = color || emphasis !== Emphasis.high && theme === Theme.dark && ColorPalette.light || emphasis === Emphasis.high && ColorPalette.primary || ColorPalette.dark;

  if (hasBackground) {
    return renderButtonWrapper(_objectSpread2({}, props, {
      ref: ref,
      variant: variant,
      color: adaptedColor
    }));
  }

  var buttonClassName = classnames(className, handleBasicClasses({
    color: adaptedColor,
    emphasis: emphasis,
    isSelected: isSelected,
    isDisabled: isDisabled,
    prefix: BUTTON_CLASSNAME,
    size: size,
    theme: emphasis === Emphasis.high && theme,
    variant: variant
  }));
  /**
   * If the linkAs prop is used, we use the linkAs component instead of a <button>.
   * If there is an href attribute, we display an <a> instead of a <button>.
   *
   * However, in any case, if the component is disabled, we returned a <button> since disabled is not compatible with <a>.
   */

  if ((linkAs || !isEmpty(props.href)) && !isDisabled) {
    return renderLink(_objectSpread2({
      linkAs: linkAs
    }, forwardedProps, {
      'aria-label': ariaLabel,
      href: href,
      target: target,
      className: buttonClassName,
      ref: ref
    }), children);
  }

  return React.createElement("button", _extends({}, forwardedProps, {
    disabled: isDisabled,
    "aria-disabled": isDisabled,
    "aria-label": ariaLabel,
    ref: ref,
    className: buttonClassName,
    name: name,
    type: // eslint-disable-next-line react/button-has-type
    type
  }), children);
});
ButtonRoot.displayName = COMPONENT_NAME;
ButtonRoot.defaultProps = {};

export { ButtonRoot as B };
//# sourceMappingURL=ButtonRoot.js.map
