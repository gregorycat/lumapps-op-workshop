import { Size, Kind } from './components.js';
import { a as _objectWithoutProperties, f as _slicedToArray, c as _objectSpread2, i as _toConsumableArray, g as getRootClassName, b as _extends, d as classnames, h as handleBasicClasses, C as CSS_PREFIX } from './getRootClassName.js';
import React, { useReducer, useEffect, forwardRef, useCallback } from 'react';
import { b as mdiCheckCircle, c as mdiAlertCircle, k as mdiRadioboxMarked, l as mdiRadioboxBlank } from './mdi.js';
import { m as mergeRefs } from './mergeRefs.js';
import { I as Icon } from './Icon2.js';
import { I as InputHelper } from './InputHelper.js';
import { I as InputLabel } from './InputLabel.js';
import { r as reducer, I as INIT_STATE, T as TabProviderContext, u as useRovingTabIndex, a as useTabProviderContextState, b as useTabProviderContext } from './useRovingTabIndex.js';

var DEFAULT_PROPS = {
  isLazy: INIT_STATE.isLazy,
  shouldActivateOnFocus: INIT_STATE.shouldActivateOnFocus
};
/**
 * This component provides a context in which steps can be defined and linked to their step panel.
 *
 * It does not produce any markup so you can wrap it around any React elements and then split the ProgressTracker and ProgressTrackerPanel
 * components in the react tree.
 *
 * This works exactly as TabProvider so it uses TabProviderContext and tabs state.
 *
 * @param  props React component props.
 * @return React element.
 */

var ProgressTrackerProvider = function ProgressTrackerProvider(props) {
  var children = props.children,
      onChange = props.onChange,
      propState = _objectWithoutProperties(props, ["children", "onChange"]);

  var _useReducer = useReducer(reducer, INIT_STATE),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      state = _useReducer2[0],
      dispatch = _useReducer2[1]; // On prop state change => dispatch update.


  useEffect(function () {
    dispatch({
      type: 'update',
      payload: _objectSpread2({}, propState, {
        activeTabIndex: propState.activeStepIndex || INIT_STATE.activeTabIndex
      })
    });
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  [dispatch].concat(_toConsumableArray(Object.values(propState)))); // On active tab index state change => send update to the onChange.

  useEffect(function () {
    if (state === INIT_STATE || !onChange || propState.activeStepIndex === state.activeTabIndex) {
      return;
    }

    onChange(state.activeTabIndex);
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  [onChange, state.activeTabIndex]);
  return React.createElement(TabProviderContext.Provider, {
    value: [state, dispatch]
  }, children);
};
ProgressTrackerProvider.defaultProps = DEFAULT_PROPS;

/**
 * Defines the props of the component.
 */

/**
 * Component display name.
 */
var COMPONENT_NAME = 'ProgressTracker';
/**
 * Component default class name and class prefix.
 */

var CLASSNAME = getRootClassName(COMPONENT_NAME);
/**
 * Component default props.
 */

var DEFAULT_PROPS$1 = {};
/**
 * ProgressTracker component.
 *
 * Implements WAI-ARIA `tablist` role {@see https://www.w3.org/TR/wai-aria-practices-1.1/examples/tabs/tabs-1/tabs.html#rps_label}
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */

var ProgressTracker = forwardRef(function (props, ref) {
  var _state$ids, _state$ids$tab;

  var ariaLabel = props['aria-label'],
      children = props.children,
      className = props.className,
      forwardedProps = _objectWithoutProperties(props, ["aria-label", "children", "className"]);

  var stepListRef = React.useRef(null);
  useRovingTabIndex({
    parentRef: stepListRef,
    elementSelector: '[role="tab"]',
    keepTabIndex: false,
    extraDependencies: [children]
  });
  var state = useTabProviderContextState();
  var numberOfSteps = (state === null || state === void 0 ? void 0 : (_state$ids = state.ids) === null || _state$ids === void 0 ? void 0 : (_state$ids$tab = _state$ids.tab) === null || _state$ids$tab === void 0 ? void 0 : _state$ids$tab.length) || 0;
  var backgroundPosition = numberOfSteps > 0 ? 100 / (numberOfSteps * 2) : 0;
  var trackPosition = numberOfSteps > 0 ? 100 / (numberOfSteps - 1) * ((state === null || state === void 0 ? void 0 : state.activeTabIndex) || 0) / 100 : 0;
  return React.createElement("div", _extends({
    ref: mergeRefs(ref, stepListRef)
  }, forwardedProps, {
    className: classnames(className, handleBasicClasses({
      prefix: CLASSNAME
    }))
  }), React.createElement("div", {
    className: "".concat(CLASSNAME, "__steps"),
    role: "tablist",
    "aria-label": ariaLabel
  }, children), React.createElement("div", {
    className: "".concat(CLASSNAME, "__background-bar"),
    style: {
      left: "".concat(backgroundPosition, "%"),
      right: "".concat(backgroundPosition, "%")
    }
  }), React.createElement("div", {
    className: "".concat(CLASSNAME, "__foreground-bar"),
    style: {
      left: "".concat(backgroundPosition, "%"),
      right: "".concat(backgroundPosition, "%"),
      transform: "scaleX(".concat(trackPosition, ")")
    }
  }));
});
ProgressTracker.displayName = COMPONENT_NAME;
ProgressTracker.className = CLASSNAME;
ProgressTracker.defaultProps = DEFAULT_PROPS$1;

/**
 * Defines the props of the component.
 */

/**
 * Component display name.
 */
var COMPONENT_NAME$1 = 'ProgressTrackerStep';
/**
 * Component default class name and class prefix.
 */

var CLASSNAME$1 = getRootClassName(COMPONENT_NAME$1);
/**
 * Component default props.
 */

var DEFAULT_PROPS$2 = {};
/**
 * ProgressTrackerStep component.
 *
 * Implements WAI-ARIA `tab` role {@see https://www.w3.org/TR/wai-aria-practices-1.1/examples/tabs/tabs-1/tabs.html#rps_label}
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */

var ProgressTrackerStep = forwardRef(function (props, ref) {
  var className = props.className,
      disabled = props.disabled,
      hasError = props.hasError,
      helper = props.helper,
      id = props.id,
      propIsActive = props.isActive,
      isComplete = props.isComplete,
      _props$isDisabled = props.isDisabled,
      isDisabled = _props$isDisabled === void 0 ? disabled : _props$isDisabled,
      label = props.label,
      onFocus = props.onFocus,
      onKeyPress = props.onKeyPress,
      _props$tabIndex = props.tabIndex,
      tabIndex = _props$tabIndex === void 0 ? -1 : _props$tabIndex,
      forwardedProps = _objectWithoutProperties(props, ["className", "disabled", "hasError", "helper", "id", "isActive", "isComplete", "isDisabled", "label", "onFocus", "onKeyPress", "tabIndex"]);

  var state = useTabProviderContext('tab', id);
  var isActive = propIsActive || (state === null || state === void 0 ? void 0 : state.isActive);
  var changeToCurrentTab = useCallback(function () {
    if (isDisabled) {
      return;
    }

    state === null || state === void 0 ? void 0 : state.changeToTab();
  }, [isDisabled, state]);
  var handleFocus = useCallback(function (event) {
    onFocus === null || onFocus === void 0 ? void 0 : onFocus(event);

    if (state === null || state === void 0 ? void 0 : state.shouldActivateOnFocus) {
      changeToCurrentTab();
    }
  }, [changeToCurrentTab, onFocus, state === null || state === void 0 ? void 0 : state.shouldActivateOnFocus]);
  var handleKeyPress = useCallback(function (event) {
    onKeyPress === null || onKeyPress === void 0 ? void 0 : onKeyPress(event);

    if (event.key !== 'Enter') {
      return;
    }

    changeToCurrentTab();
  }, [changeToCurrentTab, onKeyPress]);

  var getIcon = function getIcon() {
    if (isComplete) {
      return mdiCheckCircle;
    }

    if (isActive) {
      return hasError ? mdiAlertCircle : mdiRadioboxMarked;
    }

    return mdiRadioboxBlank;
  };

  return React.createElement("button", _extends({
    ref: ref
  }, forwardedProps, {
    type: "button",
    id: state === null || state === void 0 ? void 0 : state.tabId,
    className: classnames(className, handleBasicClasses({
      prefix: CLASSNAME$1,
      hasError: hasError,
      isActive: isActive,
      isClickable: state && !isDisabled,
      isComplete: isComplete
    })),
    onClick: changeToCurrentTab,
    onKeyPress: handleKeyPress,
    onFocus: handleFocus,
    role: "tab",
    tabIndex: isActive ? 0 : tabIndex,
    "aria-disabled": isDisabled,
    "aria-selected": isActive,
    "aria-controls": state === null || state === void 0 ? void 0 : state.tabPanelId
  }), React.createElement(Icon, {
    className: "".concat(CLASSNAME$1, "__state"),
    icon: getIcon(),
    size: Size.s
  }), React.createElement(InputLabel, {
    htmlFor: (state === null || state === void 0 ? void 0 : state.tabId) || '',
    className: "".concat(CLASSNAME$1, "__label")
  }, label), helper && React.createElement(InputHelper, {
    kind: hasError ? Kind.error : Kind.info,
    className: "".concat(CLASSNAME$1, "__helper")
  }, helper));
});
ProgressTrackerStep.displayName = COMPONENT_NAME$1;
ProgressTrackerStep.className = CLASSNAME$1;
ProgressTrackerStep.defaultProps = DEFAULT_PROPS$2;

/**
 * Defines the props of the component.
 */

/**
 * Component display name.
 */
var COMPONENT_NAME$2 = 'ProgressTrackerStepPanel';
/**
 * Component default class name and class prefix.
 */

var CLASSNAME$2 = "".concat(CSS_PREFIX, "-step-panel");
/**
 * Component default props.
 */

var DEFAULT_PROPS$3 = {};
/**
 * ProgressTrackerStepPanel component.
 *
 * Implements WAI-ARIA `tabpanel` role {@see https://www.w3.org/TR/wai-aria-practices-1.1/examples/tabs/tabs-1/tabs.html#rps_label}
 *
 * @param  props Component props.
 * @param  ref   Component ref.
 * @return React element.
 */

var ProgressTrackerStepPanel = forwardRef(function (props, ref) {
  var children = props.children,
      id = props.id,
      className = props.className,
      propIsActive = props.isActive,
      forwardedProps = _objectWithoutProperties(props, ["children", "id", "className", "isActive"]);

  var state = useTabProviderContext('tabPanel', id);
  var isActive = propIsActive || (state === null || state === void 0 ? void 0 : state.isActive);
  return React.createElement("div", _extends({
    ref: ref
  }, forwardedProps, {
    id: state === null || state === void 0 ? void 0 : state.tabPanelId,
    className: classnames(className, handleBasicClasses({
      prefix: CLASSNAME$2,
      isActive: isActive
    })),
    role: "tabpanel",
    tabIndex: 0,
    "aria-labelledby": state === null || state === void 0 ? void 0 : state.tabId
  }), (!(state === null || state === void 0 ? void 0 : state.isLazy) || isActive) && children);
});
ProgressTrackerStepPanel.displayName = COMPONENT_NAME$2;
ProgressTrackerStepPanel.className = CLASSNAME$2;
ProgressTrackerStepPanel.defaultProps = DEFAULT_PROPS$3;

export { ProgressTrackerProvider as P, ProgressTracker as a, ProgressTrackerStep as b, ProgressTrackerStepPanel as c };
//# sourceMappingURL=ProgressTrackerStepPanel.js.map
