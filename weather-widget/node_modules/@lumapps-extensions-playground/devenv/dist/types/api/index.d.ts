import { ExtensionConfig, NewPartnerInfos, PartnerInfos, VersionedExtensionAPIProps } from '../configTypes';
declare const createPartner: (data: NewPartnerInfos, environment: string) => Promise<any>;
declare const createExtension: (config: ExtensionConfig, partnerId: string, environment: string, lumappsOrganizationId: string) => Promise<any>;
declare const updateExtension: (config: ExtensionConfig, partnerId: string, extensionId: string, environment: string, lumappsOrganizationId: string) => Promise<any>;
declare const getToken: (environment: string, lumappsSlug: string) => Promise<any>;
declare const loginToLumapps: (email: string, password: string, environment?: string) => Promise<any>;
declare const getUserInfo: () => Promise<any>;
interface BuildExtensionParams {
    type: string;
    environment: string;
    extensionId: string;
    partnerId: string;
    httpServer: string;
}
export declare const buildExtension: ({ type, environment, extensionId, partnerId, httpServer, }: BuildExtensionParams) => Promise<any>;
declare const deployExtension: (extensionId: string, environment: string, httpServer: string) => Promise<any>;
declare const listPartners: (environment: string, isAdmin?: boolean, partnerId?: string | undefined) => Promise<{
    items: PartnerInfos[];
}>;
declare const listPartnerExtension: (partnerId: string, environment: string, cursor?: string | undefined) => Promise<{
    items: VersionedExtensionAPIProps[];
}>;
declare const extensionDetail: (extensionId: string, environment: string, organizationId: string) => Promise<{
    data: any;
    error?: undefined;
} | {
    error: string;
    data?: undefined;
}>;
declare const extensionVersions: (extensionId: string, environment: string) => Promise<{
    data: any;
    error?: undefined;
} | {
    error: string;
    data?: undefined;
}>;
export { createPartner, createExtension, updateExtension, getToken, deployExtension, listPartners, listPartnerExtension, extensionDetail, extensionVersions, loginToLumapps, getUserInfo, };
