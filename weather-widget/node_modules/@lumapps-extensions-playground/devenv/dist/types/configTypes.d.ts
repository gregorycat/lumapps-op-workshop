export declare type EnumLiteralsOf<T extends Record<string, unknown>> = T[keyof T];
export declare type VersionType = EnumLiteralsOf<typeof VersionType>;
export declare const VersionType: Readonly<{
    Major: "Major";
    Minor: "Minor";
    Patch: "Patch";
}>;
export declare type ExtensionCategories = EnumLiteralsOf<typeof ExtensionCategories>;
export declare const ExtensionCategories: Readonly<{
    Widget: "widget";
    ShareTo: "share_to";
}>;
export declare type ExtensionAvailabilities = EnumLiteralsOf<typeof ExtensionAvailabilities>;
export declare const ExtensionAvailabilities: Readonly<{
    Marketplace: "marketplace";
    Open: "open";
}>;
export declare type ComponentTypes = EnumLiteralsOf<typeof ComponentTypes>;
export declare const ComponentTypes: Readonly<{
    content: "content";
    global_settings: "global_settings";
    partner_settings: "partner_settings";
    settings: "settings";
}>;
export declare type ExtensionTypes = EnumLiteralsOf<typeof ExtensionTypes>;
export declare const ExtensionTypes: Readonly<{
    Chat: "chat";
    Login: "login";
    Media: "media";
    Remote: "remote";
}>;
export declare enum LoginStatus {
    LoggedIn = "logged-in",
    LoggedOut = "logged-out",
    Loading = "loading"
}
export declare type TranslatableObject = Record<string, string>;
export declare type LinksParameter = Record<'documentation', string>;
export interface ExtensionAPIProps {
    category: ExtensionCategories;
    components: ComponentTypes[];
    description: TranslatableObject;
    links: LinksParameter;
    icon: TranslatableObject;
    readonly id: string;
    name: TranslatableObject;
    oauth?: boolean;
    readonly partnerId: string;
    public: boolean;
    type: ExtensionTypes;
    settings: {
        global: Record<string, unknown>;
        internal: Record<string, unknown>;
    };
    whitelist: string[] | null;
}
export interface ExtensionVersionProps {
    bundle: string;
    readonly extensionId?: string;
    id: string;
    number: string;
    createdAt: string;
    hash: string | null;
}
export interface VersionedExtensionAPIProps extends ExtensionAPIProps {
    version: ExtensionVersionProps;
}
export interface ListAPIProps<T> {
    cursor: string | undefined;
    items: T[];
    more: boolean | undefined;
}
export declare type ExtensionsAPIProps = ListAPIProps<VersionedExtensionAPIProps>;
export interface ShareToTypes {
    name: TranslatableObject;
    icon: TranslatableObject;
}
export interface ExtensionConfig {
    availability: ExtensionAvailabilities;
    category: ExtensionCategories;
    components: ComponentTypes[];
    description: TranslatableObject;
    extensionId?: string | Record<string, string>;
    icon: TranslatableObject;
    links?: LinksParameter;
    name: TranslatableObject;
    oauth?: boolean;
    partnerId?: string | Record<string, string>;
    public: boolean;
    shareTo?: ShareToTypes;
    whitelist?: string[] | Record<string, string[]>;
}
export interface PartnerInfos {
    bundle?: string;
    contact: {
        email: string;
        phone?: string;
        website?: string;
    };
    description: TranslatableObject;
    icon: TranslatableObject;
    id: string;
    name: TranslatableObject;
}
export interface NewPartnerInfos extends Omit<PartnerInfos, 'id'> {
    organizationId?: string;
}
