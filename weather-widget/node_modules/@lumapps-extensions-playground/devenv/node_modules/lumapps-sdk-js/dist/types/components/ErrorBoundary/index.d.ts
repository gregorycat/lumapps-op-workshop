import React, { ComponentType, ErrorInfo, PropsWithChildren, PropsWithRef, ReactNode } from 'react';
import { ErrorBoundaryProps, ErrorBoundaryState } from './types';
declare type ErrorBoundaryType = PropsWithRef<PropsWithChildren<ErrorBoundaryProps>>;
declare class ErrorBoundary extends React.Component<ErrorBoundaryType, ErrorBoundaryState> {
    static getDerivedStateFromError(error: Error): Record<'error', Error>;
    updatedWithError: boolean;
    constructor(props: ErrorBoundaryType);
    componentDidUpdate(prevProps: ErrorBoundaryProps): void;
    componentDidCatch(error: Error, info: ErrorInfo): void;
    resetErrorBoundary: (...args: unknown[]) => void;
    reset(): void;
    render(): ReactNode;
}
declare function withErrorBoundary<P>(Component: ComponentType<P>, errorBoundaryProps: ErrorBoundaryProps): ComponentType<P>;
declare const useErrorHandler: (error: unknown) => void;
export { ErrorBoundary, withErrorBoundary, useErrorHandler };
